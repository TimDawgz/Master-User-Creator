<File version="3.2">
  <FileID>c95ae3e0-a538-420a-aeb6-92411ccf751a</FileID>
  <Preview>iVBORw0KGgoAAAANSUhEUgAAAgAAAAIACAYAAAD0eNT6AAAAAXNSR0IArs4c6QAAAARnQU1BAACx
jwv8YQUAAAAJcEhZcwAADsMAAA7DAcdvqGQAAIe7SURBVHhe7P1nexxXuqYLzh/oM/9mPs6HPnNd
M909p6d77927eld37XIqlVRWXqIoegMQ3nvvvfc2gYT3iQSQcJnwNuEyYTKBBHDPigAgURSoIkUR
JJHvzeshwqxYsSIyYr3PCrPi/yYIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAIgiAI
giAIgiAIgiAIgiAIgiAIgiBccx793//Df6j58MMPa/wDQ2p8nviLRCKRSCR65xSox/H/8z/+xxoV
2zX9OP/H//Ef2nz9g+kZW2Bkbhvz7CbmGZFIJBKJRO+UVPzW4nhrzzD/5b/8fzkP88/n/fc/rOlV
wb9tZIHm/mmaB0QikUgkEr2LalLqm96gqKL+HxuAoKDQmvElJ4ZBK61DNpFIJBKJvFrG4RnazXMv
LaNpRl++bXiWNjXeNvyC0pZVy+jrVnlclvc/0sW6NXWMLWHsMf9jA+DnF1gzoQyAcWhGFUQVWmWi
qXVsgZbxZV2tlsVvp+tpRCKRSCS6blIxTgumTX1TlBtMVLQMv5RaVENay6eua5SatmFq2l9QbSYa
eiy0j8zR/Irr1tSj4rahY/DFDMCkMgCaC/nWSaiF+w2DrNwNYf1rP0yVbbSqaRfzr4/mL5kmEolE
Im9Ux8i8akHPkFfZSUXzoK7yF1RZQz9FdX3Udo5Q3dJPY9cIDZ1mXS39ExgHp76nxu7v5mvDlYZe
3TgUVHd/t96mQTXdRG3HmDIJKl+jmTo1rP3V5n277sZ+tVyPXn5tO3on1zB0vqgBWN5VC83rC3dY
lugatGG/8YTp5GLGc2rY+ugefe0jtCsToKdR6rIs0zW2eD6+cDY+uvDt/KfVOaby/Dbt5eocXVR5
nKV5kfRPS1u2e3yFblWGzkvmf19aWZfUMvO629PGL093pou8eyZWVf5quUvSiEQikejdV6eKYc39
Vgpre/UY0aLMwMVl9R+Tlq59eIai2j6qjIO0m2x63NDiYs/ECiUNPaTk1ZJZ3EhaQT2ZJc16o/ss
zRI9KmBrJqHcMEBJfb+KM3Mqz7NbCXWdo6QX1pNR3Ex+dSdJOVWUNvRiNJ3dMmhR8Vpbd35V97dx
vG9qnZYXNQDTq/t6oNOCbufUGibV+rd/E0jb/A4Gu1sfHi9spN22odKowo4v0tgxqFY8o19q6FEb
0KRW1jo8rzuP3smzYKkFzT413mGapGXAqo/r89UO0YK1Nqwtr6XtME3R3DOh7yxj/5ied6/aiLO0
S5cup5VX34FmK9WNbVS1DNI5frZOvVz6+s7LotKd5bFES69F7SS1g7W/o2f5PV3m78qlDMXwNDXN
7ZQ3GKlqHaTrqfy1H+5sWTVumaGqoYNWsyqTMjJa2UQikUj07kiLAVpALVYtea2xp10N0Ma1YN0x
ukT7yKKuDl0LtKp5ehrNAKiAXNIwoFrrw3QM285ikJJRLRselUp9bT1FRaXUqb+JSRkU1HQyaLXr
6+xT8cc4MKHMg4nSRmUgVCu+WcVMbT2pBQ3k5ZXS0tpFakYR3V29BEdn6PlqZTOodG1q/UW6aTnb
jgHrBq1dQy9mAGbWXXrg7ZtQBVZBfkC5ir33v2QhMpPZ5CK2vvBhcNBKtypsrwqQg9YVyktLdDcy
OLNN9/AoObnFNKmCNHf0UN0yoAdHQ0c/9WpnVNfVkqMcT5dlgYbWThpVoO8yq8Da1KEP96vCdvQN
Ul7fy+DcFk2t7dS2j2LoUjuzbViVTRmMtm7qOkbVxs1Q19xJvXJFvcqs9E8sqnxaaegcUz/AtDIP
FmUGOvWdYuw16ZdiNJPQpoarmruVyxolP7+ISuMwrX2TdI8tUN/cRqVyXt3K2DS391HZ0I5BGZB+
lX/v+BJt/YMUldUpg6N+8G5Vzjqj+sFnGZhcor6ljYqmPvUjKgNQ20qbMhT9k8psqP0pEolEondH
WiDWgn2pCuTdqrHbphq1nSrwa5fcEzPKSMosJzm7Uh/Or2zT52lpjEodqvVd2jhEQ5eKU6qBqTUU
9cBumiMrt5TsnCJu3A8jODyR8rIq3QCYZrb09Q5Mr6sgPq3MwwjlzUNq3Yv6Q4FaWbR1BEZlYTKN
sLfrJDQqnQoVv7Rgr83XjIBmVorr+88auio/0+w2xm7TixmAuc1D+qdVMLXZGRqbx/4ogg1V0HWf
aFZCUhjpGmNWBexRNa9vWqWZWVFBs5WiKoP+9GJTWzvF1Qa9ld/aM0BJRa3akCEV+FtoURtv7Fam
QO3Alq4eiqsa9QBaZ+yitKZDD+KDM5t0DmoBepDhRQctnb3UGvup0pY3L9A5MERxRQPltS3Ut/dQ
WtVCl2ZElFnpGR5Ty/UztODAvLBDa0c7pdqOGJtS5aijrKaJOmUOOoZUurpGylRwr2poU85pQjcg
dcZe6tX2GTr7lFkZoKLGQENHHxWNPfSrcmkObWDSpkxFj/pRbFQ1dtE+PE6NoYfmzn7dlLR0q7/t
/dQoY9I5rrbHuqZ+UJFIJBK9Sxq0rqvAukCZaoX3WLTn3hbom9ogLqOChvoGZqzTTE9OMj42SkRs
Ju3aVQGVpk2LUyNquWYTTT1jdI/OqwakXUkFdjUvITkHY6uRbNVQrq1toLBQNaCrOjHP7uhGYVA1
gttNVj0Wlas8ese12+0LekAvbeonOi6D+vomKipryS8oJT6zQm+0a2nalbRWv3b1QWu0atsxouJh
W8/wixmA+a0jFUxVoFtyMq1cyeaDcHocp/Sq6d1bx9gmF/E0tLKjgpxZZT48v0ZdU7tqTY9RUlZB
badZtZx7VADspqali7KKSmq7p+i3TOqt6cb2XuWKxjF2dVNUaaBVewiip1+17kf1oG2a3aJ/1EJF
XTv9sxs0NBsxDCkHNTJOZWMHTR29FJc30Nw3QfuAatUro2Cadyj3tMnQ5CxV9S10WFYZsq1iaOuk
oduGacpKUUkV9Z0jdA6NU63KW9XQpMxBG7WGbuWcpqkzdFKrytvcb6Ojb4i6tj5qm3vpGp1WeXYx
oFyUto7BSas+3jUypQxAjzog5lQePTS29dDQM6XMy7C+rGYouiY31DLKJGlmSiQSiUTvjEwzG/ol
+fKmIfpUgNVa2dotXi0Ih0WnE5ecR2xSLpFxmfo9fe2WsZamXUlrtVcYhjH0jdOrhgetWgNyQ1dS
VgWJaQVk5JaRnl1KZHw2hn4rwyrGDKhGtXYloNNso7HHQqXBrAdx7Ra0dim/TK07IjaD2NQiolJK
iEnIIjmnSsUhu25S9NvimlFQpkWL49p2WJZ2aet9gdcAnygDsLhzrIKwCqar+1jrutj96B421Tqf
KTMwW9yIzdCPXQX7mbE5hue2GJnfwNg7Qr9qHbeo1nK3dv/cpAJ8v4V6Yzd1rT36QwnG7gEVgM30
jc1S3zagCjtHQ0un2vBpelWQNQ7adAMwrPVeNL+lDEKvCvhG3QWZZtYwqMCvLT8wvUJTW5cK7Bb6
LDP6pfvh+Yvlds6uAqhWfaNyXp1DyiQMzzO6uEVrtwroRu2H1C7t96hyqWCvlu3oN6u0ZlXeCfon
l2gwGKlqUe5pelltl1rH5AKtvePKZOxgVttrsi3R0jOqj7cp41JRb8SoXJ1ZGY6GFu32Qd/5sqP0
29T+mdvUyyYSiUSid0dafa+1uitVK3xMa5yqBqDJpk3fUcFVNVRVsO6f3lAxaUOfps/XtcWw+lup
DEDLwCQm6zrjywcqEO+pv3tMrLpUrHKqlvkuZvXXsrzPxIo2f1dPM6nm948v0KjiT3WrGcuiQ5VH
xR6VpxbjhrT81frGFnd1QzGiGsDD5+vU0mk9AGpXLbQ4rm3HhIrl7X0vaACWVWvfPL+NeXmXiZE5
7MHJbAQmsRGUxNaTWBYKG1VAdajC7+iF0TS26GRU/dUKr+2oUTWuTRtT6cbURo0tOPT5Z9POpo+q
aRfLnQ2rPNV6z6TSni+np9HyPB/+4bSnl9tW42q5p/LXynOR3/fyUbKc/73I89u/Shfpvv37dNn0
ce2vti4t/VPr0/SDZUQikUj0LkmLF2YVULVWeH37GA2d4zR0nEsbflZPzasxjqgG64T+LF3b4BQ9
o3NKs09JG39a35/XNjipGp8rVLWOUKetW+Vb32H5/rovhs/nnc23UKOWqW2z6HFJ246pdTcdfSMv
ZgBWnJwFMKURFTRNW8eYNjxn2vQwvKbcy4LmXjQT8IJSDuUHw8+bdqGLeU/Pf97wxTIXumyaSCQS
iX52md+oVJB+jRpVsW5ItfY7Rpb0J/9fSOdptVa6trx27//phwv/kbSrDgNWuwrguz9t3Ura7YSz
RqkDq/2Izv7RFzAAT/xrVneVAVAr1noEXLY7XkkrG29Qm86fpFVduz+jVL4bV6vLy3F1Wtt6k9rz
Wq1vv2Ht7L9R2XcOvFYbjjcp1xvTpvP1a2vXzfbekdLhS2lTLXe2/CFbalz/+yI6T/uP1r2zf/Qj
OmRp80A3ATbVeH9pA6D1COhw7OB8Be06HW9M2isSP0X7e7vsbG+xvbX5ytLy0fJzuw44dLuuTEeH
7peSVr79vbNt/zl0sL/3xuQ62Pdaab/jm9SRduy9QXmO3F6rY8/RG9PJseeN6fTk2Gul/nu+OGVn
z61fofnJBmB7Z4edV5DD4XhjcjqdLy23201PTw/19fW0tbW9shoaGuju7mZxcZGZmRlmZ2ffOtls
Nux2O0dHR/o+2N3dfWXt7e29Me3v73utDg4O3qhcLtcblXb+eqsODw/fmLS6403J4/F4rY6Pj58r
zQRoVw9euwHY3t7B7TlzJC5VCWiVsEsdkFqLcmfn8uD8fSmj4NzFc3yqXAscKzerT3s6jVrP7p5q
RR+59OHvzXuudlG7QXGKS7UMtWn7LtXiPTrUKwutwtxTrdWnDYA23Wg0qm3a1pc8OdGc1BnPDv9g
/PSU06ekoe0LzQSMj4+zsbHB5ubmpdL2oVPtA6fTwdbW5Wm+p60ttW+39eEtVdbt7a0fpnlBrays
YLFY9G0QA/Bu67KgfJV6Ohi/CV0WGL1FlwXmq9JlgfmqdFlg9BZdFvgvdEUGwKFOPCdN+Sk88Q+k
oqGFocEh2hubMU8sc6xMwdHhjwdtLbDvrM6QFu3Pw/sPiMut5kDFVo/7QJ9/eORRwemY5WkTjQ3d
uFRs9aggrt1ieDavb6WCqdu1SWliFAFBwfRNLCkbAKvTZlobWlUrf4jVTe02gTIBu983AO3t7Xpg
vAjy+5vztBv6OFZBfWXCRG//tB7cNbbmLHR2jJ2PaZx+++NcBNTGxkaWlpbO51/O7tYqU5MTWGcX
cHnOJ/4Yx24V9NUPpTg8UGXfO9SHfwqaWbFarfpBIwbg3dZlQfkq9WxAvmpdFhi9RZcF5qvSZYH5
qvR0QPQ2PRv0n9YVGQCnKoid0M++IKemj+UF7ZKyhfgHD6lut7I0NcyAaYrdg/3LA7UmLfiqvCYH
a/nsvS/ompilvaGeAcucyttFv7FB799/uqeKJ4+SmV2YpKWti42dPf1e/+V57uPatfL4L19Q1zvO
jnOPRdsYyYEPCQnJZ3Z6itCvPiUwpQ73oVsFrcsNgGYatqwdPLkdg9beN5WnEZdswO1cwzxiZay1
lNDAXHbWV+jp7GJxY58TtfO1H+dpA7CwsKAH2+ehmSTrqInRyXkO1W934jnkQJVl16Fa92pbNNz7
uyrQu86GnauMjdn04Y3FaWzzGxxrV0cce2q9KpArY3aoyrCv9s+B+8cdhXYSTU9P6weNGIB3W5cF
5avUswH5qnVZYPQWXRaYr0rPBuWr1LNB0Zv0bNB/WldmAI6Pt4n47C988s0TGpurSQqNISEygfyM
LP7yL//Cv/z+MwYXVUBSAezSYK3k3HWplvYkcf7R5KYl4fMgkMCQUEoKcvC560OA/xOys7JJCY7m
61ufEpVVzY4Khj9mAI5cC9x/7zfc9c9geLiTMF8/Ht68QVB4IulRUXz2+z9wN6IY19GhClpnBkA7
kTQDoF2u13aiFvT3Vwb5+y9+TWBwMF9+8Afi00sJu/F3/vV/vkdoTAIFqVkE3LyD7xN/giPTcKp9
rz8co5bXyvIiBkBjfcHGyIiFtU0nm2sLTIyPYR4eY3xyguWVJQa72unoM7F3pAyCe5O+zh7GJyYY
7OvFtrDEuKmf9u4Bpq2Tajm1zNIMncZW+ken8Xx3t+IHaCeRGIDrocuC8lXqsqB8lXo2KHqTLgvM
V6Vng/JV6rLA6C26CPaX6QqvAKwT/uU31Pcv4ZjvJejuE6KVCQh/+Ig//OYT8qsamF3d1p8J+EGg
Ppdz9wDH6gjh93x5/M1jKluGqcwKw+fOPVIL2jGWpRAW6k9UQCrG5jLuPHqi927kel6e2hUAp5XH
f/2K1tFlxtqLCYkpoDE/gUePAokPiyUmKJzi2mEVrN164HueAdi0tvP46wj21Lzekgwi/cL5+L0/
kVVSQXVeGgmhsYT6htPb10NEQBAbKkCf/gQDsGidYGF5Hev4MFMLa9hVALct2FlbnFFmYJS+3iEW
V9b0KwRHu2uMqsB+fHKCfdHG5PgE/X0DzC2tsDw3pf5usDY/Se/gKCvrW/qVjOehnURiAK6HLgvK
V6nLgvJV6tmg6E26LDBflZ4NylepywKjt+gi2F+mK3sG4OBgg8biMixz2+zardSX19BQ04hpeIT8
+DBiEnOZXdv5cQPg3MOxMUddWSOWkW78b98hvaQDu91GjO99wpPKmZocxVDVSGl+KkFRmSw79tl7
7hUA7RmADfIiAvD1D6JXlaUwOYy7KvjXNrRibOqko7GMsKQctvfc3z4HoJ1ImgHQnorXd/LxCc61
aRqq2vCcnrJg7qGnd4yehmKiE5JoaW1joKOFwM8+44s7Phh6Z/RL/9pJoS2v7SPtIUDtLYB/xO7W
hn7/f3lmnFWnKpN9joH+IWaX1jk5PWZlYZbZhZWzBxuPD1QZd/Tl3LvbOHb32V5fxja3wJbKZ8fp
Ur+/m1mrlcW1LT3d89DKKwbgeuiyoHyVuiwoX6WeDYrepGeD8lXqssB8VXo6IHqbng36T+uKDMDZ
WwAu7T66U407dvU3ALSTUauQPKog2nvpz71U/7S0oK3yOXC5z5Y7dKkK/UAfPjpys68qGLeaps9X
Lex/mKf2ZoEKbh51kGiVk5bPidop2lsA2nrch6qVrj1MqPJ5+grAs28BXLSeteHL2SEzLJmN84Ra
Ou2NAA0tIGmvFE5OTl5exqe0u7vHimq99w8Os+VwMjthxjK9qOehlU3bn9pbC3p6NX4x7Pw26Grz
9/R8zm5p7J4to+Y9vZ5npZkdeQvgeujZgHzVejYgX7WeDYrepMsC81XpssB8VbosMHqLLgv8F7oy
A/BjuizgXJUugvrLSDuROjs7qaur068EXPZu/w9lxNDcrIzD96dry2utf+3v3Nyc/qS99s79j2ly
YpzJqWlm1LDVOv1Cy7yqpqamWFtb008mbR9cFtBfVpcF5qvSZYHRW3RZUL5KXRaUr1LPBkVv0mWB
+ar0bFC+Sl0WGL1FlwX+C4kBeCa4v6i0ZbWAuLq6+oJaY121otfWLpu3qud3WWV1qfST+ZLpL6nL
Kogfk7aMtu2XBfOfossC81XpssDoLbosKF+lnj0Or1qXHdveossC81XpssB8VbosMHqLLgv8F1IO
4NUNgP6K3juqywLTi+iyoPKqumw9b5suK/e7qMsCo7fosqDsTbrMFHiLLjMF3qDLDIm36DJDdCHt
TTTtWwI/yQBoXzCaWnayp1Uqz1QyIpFIJBKJ3l5p30XRPtClxfKf3QBc5r5ft54tg0gkEolEoh9K
+zjYazEAWjC+uE+uPUH+urW+vq6vS7tM/awpEL0ZPX08iEQikejt0ms1AFpHOVpA1l95uwJpXfNq
neloD9VpH6+5jtK+F/AubN/y8vK3Zuzp40IkEolEb4deqwHQArI2fFVobxRoVwK0v9o7+tdN2v7U
Ogt627dPK59mALQrQGIARCKR6O3UtTMA2u0ALfBow9dNW1tb3wbWy+a/LdLKp10FEAMgEolEb6/E
ALxDEgMgEolEop9LV24ADjYXSY4MJbui46y/+nNce+5v/+6vzTJsmdfHXwYt+HzPADic+ruOe7sO
tK6ItWna311VJq1ff4ea73B8P3hdSLuUvXegvTt7gNt9yP5F97qXpL2Q1q3w/sEeO+eXwZ8rNd+5
q3a+a1+NO3C5XT+a74V+aADUetQ6Dw/VPts/UD/mAbsqX7cq874qu1vlr3Vh/GN5a10Ba58UPlDl
1rpU1g4IPXC7VJ5qm8/SOb8t475Kq+27i/15mbTlxQCIRCLR260rNwDN2dE8jipifWub48N9TL0D
zFj7+fqDz8guyOSTP9xgaNLK8tIa9nkbTQYDi44jONymrcXAhG2VvZ11OlpbWHOq6U+hBZ8LA+Bw
qMC2s0RcdDimmXUO9lQQO9S+eX/C+uICWxsb9LW1M7eu0ql5WgDVynp8eopbBUPXkZv+2nxu3rrL
/eA4pueW6FHpVxxuTk+O9LRaX/4uFSSdKnBqvfpr5VqYW9G/R3B0fKJ/r1/rbOhI63XJc4RTmQ0t
MGvB1GZqp6y0TRmBZYozilnZ074hcMKuSn/oOcGjfeNApT0+PltO623xBwZAbaPbuU5WXDD37t2i
tHUY5/okkTGpdLQ1EhOfRmNzO7alTf2DRcd6eXb1cmvbuKd+/KnBZh5+c4vazmnWZgeJDg+hf9RG
RXY4QeE5zG9o+3GB0sxilvf2MJYU0TOypO1uXPu7Kg+1P049euc6RyfH+r7UyiYGQCQSid5uXbkB
2NtaIi30IYUN7dSnRfBv//RLvnz8gM8/+JKM3FQ+/uA29Q015CZl4nfrHo8e+xIWn0dNUSYJcTE8
vPGIqNgwvvGJZmnn8DzXM542AHtuDzNDzXz0lw/Jru1Vc08YMtZQ0VCF/98+5KuADCZGzHR0dmHf
djJpGWFqxkpDWTmD43N41L/SCH9SCjtoKYzDLyKTiclptcww1eWNTM9aqS2tYGzOjn1xjKKiQgqT
gvj1Lz9lamOTtoo8Cqtb2diw01pRTlFNHRvOfSZHh5jd2mfckIefTw67+zP4feVHt3mE0uJi5tc2
GWipp6XbzMy4icqyRhY2tvWPGj1rAFxHR3SXJOIbkcP6uo2Y4GACbn/GBx/fxfeT9/nkYQLjI+Os
bG4zYCijsKpZlWeN+tIyBi1z+tUK+/oyLeX5JKUUEx/5gDu+8czOWfH/6vdEFrSo8h2xt2nB99OH
zKrWf84TH7VdPRiqi+mzzLIwaaK80sDcwiwNpZUMTS2o33xPDIBIJBK95bp6A7C9waxtkIePb3Dj
o8+5F5SK0dRD3ONoRibNxAemMNjTTGxQFFGBacyvzJD8OJDw6CS6BvoIveNLr9lE6KNvqOyfPc/1
jKcNwLHngMLEcFLSswgIT6SvvYnHD/zoHRwk4qvPCE4rJickmDt3/KlsbKM0P4mQh3f5H//Xf+cj
/xTcqklfFR9OYd0krqU+wkIeExmUQITvQ3yeJJHsf5t//q//zE1Vzki/AIqa2mnKi+GzT/yoLcvG
70k0CdGBJCdHc+tvtwiOiKC03khmYjQTm0dMGguJCC/n+GSNhAeB+Pjf51FUNv0NhfzyP/83fvf1
fZ7cuslD/xy21b50qm161gAcnxxQEBVGqXFK3/7qzHC++eQzHgfEEXv/G8LTi8kOiyIpNgX/J8H0
j0yQH/aIf/ov/42P/JJwHJ3iXLUSERZAbmE+Xz/0ITYmhuD0AuanRgh6eIuarmmOd62E3ApmXVtH
dBTBgUF89OV9zKP93PzN/+Zff/kefiH+ysTdxrK6o44FMQAikUj0tuvKDcCGbYjQiHAqukfZXplQ
rc54antGaa3MpbZjgOriTGoMnYz0D9HXMYR9c43BLjMLU0NEhz7k478+UEbASExEItP27+d9YQCc
e24ci0P89Q+/IyQqmj++/wHh4RE8eRLD4to2FbEhpBTVkPIkiLpGI1//6X0KjH3kBtzibzfVtI5B
TvBQFuFLYEwBxcmxFJRVkxAQTMijIKob+0n3ucFnD6Jpaq3l8Y27GEZnsfXW4O8TR3VBKsGR+VTm
JquAGkRESCF7zmW+/tsfiCtp028XLI0YuXf3MVXl2SpgxzNmaufONzcIV4H0w/c/p6yxlfhHPpQ2
jXPicenb9qwB2D88YrQpnwd+cfR0VxOgtq8sJ40s1XJvzE6ivKmPgvAwwv3D8AtIZGXdTtL9L/n7
jQC1jf36J4DnpiYwVCmT5POI0IQcCnNSCEzOY31lgVi/byhpt4Bnh4iH35BTXY3PvUe0D46pfXGL
wKhwPv39h8TllVGeGUdYUB7akxxa+cQAiEQi0dutKzcAP5XFsXbiQh4RmVX97bf3n+XCAOzuH7A0
baKld0ifPjfeT+/YKE0FySRmlzM21EWGavG2NXeyuLpGfWUZlsUtthZGSYiIJr++kwPXAZO9zYSG
hZFb0cLegZP+tna625Q5GV9kbXaY2MhYKjpNTA0aCA2NwDQ2TkFuOgPj45Qkq5Z3Tj2L81Y6Wgc4
9uwS9OgrWsZWODzYVTt+l5bydAKDIhiZX8HUVkVMfC5zq4tUZyWRnFtCe0s7Y5Pat/7PHsb74UOA
Dv1evqEyj5CQIPqnVliZMtM/NMHEYB+jEzOYOrqYWVqkKiNG5VnF4twkKWob8+o69N9stLOOMGUS
hqbXWR3rIig0BsvsLFVpsSTmVLLpPNAfEpwebiUgMJCy9mHW59V+ioule8yGuaOW2IQkmoxt9HWb
cagDSgyASCQSvf16ZwyAe2+H1TX7+djlXBgA7Wl1x+4+hypwaU/z6w/eqXIcnj8It3/gVn89uA/d
Zw/dHXnY33XoD/NpaA/g6W8BuM6eMfAcuVWeKpi53fqnePf3nN+mPdKeuNfSnZ6q6Xscq3Vo+8Jz
csrJ8aH+VP4pHgyFSSqg1rLnPlTl3NYf6tMe9tM+x3igAvxZHsd6q/xs2SO9fNq6Lp64/6EB0B4O
dOjlV6vXH8rbVeXSn+hX26w9xX/g1p7a3+VI5Xl8pMqzp5XnqW3UH+JDlVktu+/Sy6Mtp5VNK4O2
L8/Sne8L94H+BsPZ+vY4ODxSwyf6F7f0txpUWjEAIpFI9PbrnTEAL8K3BuCpAPk2SHvV0L6+rr8m
qD3Rf1maF9FlBuBtlBgAkUgkevt17QyA9v0B7dU7Lfi8LdIu1TtUmbQH+S4C5E+R1hLXDMDbtn3P
SiufZgC0v9o3yLVjQSQSiURXr6fj8rO6VgbgIkBqJkC7EnDdpH3tcH5+/q3fPq182keZtL+aIXj6
6oBIJBKJrk5aHy1Px+anda0MgHYfWrtMrhmB66p3bfu0A/Cy6SKRSCR6vdIaYdrXY59nAq6VARAE
QRAE4Yzj42MxAIIgCILgbWjfwhEDIAiCIAhehhgAQRAEQfBCxAAIgiAIghciBkAQBEEQvBAxAIIg
CILghYgBEARBEAQvRAyAIAiCIHghYgAEQRAEwQsRAyAIgiAIXogYAEEQBEHwQsQACIIgCIIXIgZA
EARBELwQMQCCIAiC4IWIARAEQRAEL+SdNACnR3tMz86ejz3D8T7TkzMcnY9exuL4ENVVlYzMb4JH
5TW9cD5HEITXzwmdzVVUtfTqY0c7i/SaJllfmaWrd5CZ2SWV4nmcYh1qo8HYo4/trU3SaOhg33VA
l6GOriGrPl0QhH/MO2kA5vsr+M0HHzHnPNbHj/YdbO+sURSXzLB1hekJG+6Tsyrk5FT/w97uxXqO
SPjmJvGZOTy8/YTe0TmmrYuqXjlVZTrUU+zuHuh/ldNgc2uTvuoiiiv79Um7O9scnufpUjvNdXhm
NY7V+i7WJQjC8zilvTieR5FpZCSGU95opDDsPiGphYTc+JTUym5lAFb0lPs7m+y5PPrwt+ckbqaG
u4h4EEBTey/5SQHkVbeyajHyxWcf0z48d55OEIR/xFtvAE5VYNYKqUkLsirU0lxVSklpCc39Vtbm
Rgh8dJ/Mgnz+8J/+O6H5NTSkpxKTXcamfY2KiiKK0uJ577fvU9Izo+VIhn8ECyrWzxlziIpLoqm2
hezIUKJSyilLjeC93/2V6r4hylNCiU1OIviTD/nt56EMtdfy8MYdojKK6W2q5M5HX+GfnMvWtp38
wiJ2VF2lldPj8YhEXqfnoc27OC842SDSJ4JNbcbpBsnhD3j/F78lJC6eP/7XX1LS2klDcTPDQ0Z8
7z2ixTxBdVIov/vtn2kYXdbzW5wcIjI5j9bmSv7+9y8Ij0tjyDxAdMgTUvMbOVDVxPFT6xSJvEXa
Ma/FzBdFS/9WG4Dt7W22trbY2dnB5Trk0D7CX9//kADfh3z6MITsqEhKOlULXpH+JBrrwgwpvpGU
VVQRGBRBR6eBb377HkFaoB+yqVTHpD4OxuqAnsJ0MjMzSY1KJNwvmuGxMW78739XlUsa+cmxBIYV
6PkOlGTQ0GImPzSQvrk9WosjCPL1p6RiAEtPE36BITR0jiprAQ5VTofDIRJ5lTY2Ni49l10ulz5P
S+Pc3VMGYJeEJ36MbCljsDBAQmIymdGpmK2zZAcmMDkzTrJvKE/uBzCwpuWwwgf/7X+qczKZDos6
z4+P2dlapTI3iaDgANIbTAy25pHTdXYbL/LJXWy7p+zv7v6gjCLRdddFrHxR3noDoG3M047G0lFG
cmE9i4uL5GSl0mhsJvDWN5QZTZQnRxKfX0hZRg1r69Pcve3L9omLlpw4noQn0jWhtSCOKQh5zL1H
D8lUrYX15RnKcgopziphdn2HhoxogmNVhTQ9Tk64L5GJuQy11uAXkUifsUa/ApBe1Ehvcy31zdr9
xhX+/rc/q0rn+XctBeG643a72VVB91m081zT0yyOdfDI5xGPff0wTy7QkpfPqG2eypR8bAtWyjIr
Geht5P4tH1rNFqrS4ghR56RpTrmGw0NqCpLwCwhjZHiU0oQw7gTHMj45QXTAA+JzG3Gfr0cQvA0t
Vl47A3CsXP8FJ+f39p/mcE+1LvZcauiEvWcqmwt2trT7iWf3609PjthWTul5F0q2Nzc40FZ56mFz
62xnHqgdobHn2HnqAUM3XVU5pJc1/8hDS4Jw/dFa+s8zAJed467dbRwHP/aorjrXdrbYc5+d+9o5
uX94dpth36GW3T8L86ceF/tudfZp5+rmtj5NELwVLVZeawPwdnHIcG8PG5d7DkHwGl7WAAiC8PMj
BkAQhCtHDIAgvHnEAAiCcOWIARCEN48YAEEQrhwxAILw5hEDIAjClSMGQBDePGIABEG4csQACMKb
RwyAIAhXjhgAQXjziAEQBOHKEQMgCG8erzEAdXV1pKSkkJOToys7O5v4+His1unzFLAxP0lXzwCu
1+IfTtnZ2uB5PaBvrSzi2Dv7uNBlHLsdDPX10t03oY9vLS+wf/GVoVfk+NDNrkPrGOkU584mR9JL
kfCaeVkDYLPZ9PNVO28vzmHtfK6trT1PoTh00NPVxeLGD/P9OVifH6erq5vt89N0bsLGtmOXuSkb
83PqfNQ6GHoOB9vLdPf04jjvdtCxNkOfeVwfXrSOqvPa9G29c6DyPDw65eRoH4fz9WyLIGh4jQGI
i4tjfn5ez+NC9fX1ujRmujuJCo4hK7eIpe1Leuq56FHwcJP29mp+WAp1wl7S6+C3HK/w5Mbn9E5u
nE/QPnpyzOpUG70jYyxNW9jYeb4BsHaU8fhJBNEhYcSVNjI3acH5nOTah02Od5dp76jjLIkqm/73
ctbNA5Qkt6shDzmxj5hXv8Xp8eVW5SW+GyEIz+VlDUBDQ4Me7J8+fxcWFvTzWsOzs0puZALx6Tl0
DE3p057l+Pzzm+N9FUyuOPThpzn9kfN3friX4IhocjPiiSmsZtbaTXBQDMb6HEKjUjCPjHLm309V
/fNsPieszZrJjgsjq7CZnY1VEmOjKKlrg/01wn0/JqOsHtf5Yq3JxYzY3GxP1ZKeV6xP81xSp52e
/thZLQj/GK8xAFlZWXr/408zODiIoaVVDZ3q8yf0T47BykAbEf7xGDvaCLr5DXHl3Yx3FfHV3QC6
2sp577f/TG2/hbyIAG76JrK6q3VR6iIn6jGP1ck73dtD8L2H+CVksnPeNal1dIDKqiIqDYMcHjjI
CQkmPddARfKn/OHWA/qahqksLWRaVUwWtf7BoX6CbtwgNLdZ70p4ylhLx/C8nldqajJVZQOMthmI
Dk7C2N6K/1ffkFTdhampgqCgDIY6S/m1Kmdjr1mVK4Sg8CRskzPkBgZzKyCAqbU9Olpqmds7ZluV
rSSxQ+V8TGnqEzILcgmMiGNlbZWcUD/uh6djqKoiMjiVuW3pOV14dV7WALS0tNDff/aJ7QsODw/1
81bD3FVNTqNFH+Z4mwzfUMoM7RTGRfCNTyKTs+P43btJXn0n4bf+mfspFfQ2lPLlZ7epGz37nPCk
MZ8bNx9iGp+kMCKG20+e0GXd0ufl5aTRt3R2LnfVZxLw6E987h9EQuBfuJmQynDLOCtzNhJ9/Cms
H2F5up8HX3xFXEWPbr5P3Ts0FxfTYujD1FnJZx99RXJ2DetbdlJCHxCSUcjW7pldb0koYtR2yI61
gYz0OGKigymo72ZurE/leZOUqhZKo2LJreuVLsWFV8JrDID2Fb9nl9UqlDMDoIJqcgJDK2et3v78
fBrUiZsY66sqjzCisgoorqvk1md/JDU7h7aOElobK/nt324TEBGPxX7IxvIscUlRfH7jLySHZVFX
10NdeiF9E2f9jcc++ZwnoRHcfxhIdUMVqTUmfbq1M5M2Sxed6Q1UFFWSnhxHa1sLESFq3Y+DCM4o
OzcANbSbNAOwR2Z6OMlBpZQn59JW109sxEPu+ocTGhPCneh8PV92Jqmty6RGtZqK+tc4mO4gUq0/
N7oWm9VMrmopFVc26Xlvj/eTk9qkL1aVmUh5TRUF5VUU5ybw3sd3CU5MJvpxDM2t390uEYRX4acY
gN7e3vOxM7S02nmtMdJeQWLlmUE4WrWQ4ptPf18Vv/vT18r8xpNX20iQ3zfcU8agsSkHi6WXTz/+
mNDwEPLaRtVCTmrry7n1xYdERceQGVmFqa+TnHTtyhgUZaVgnHLqw8baYqqrs2ns7maiO5/W0R46
EioIjoqmZsiup/G9+xX3/UKJyKs7MwBHewy115FTVE11WTbFfRa6C0to7lvV09eWxVPQf/aFwpa0
LEwLRxwuDCjjkUNBcSEtHQbu3r2FT2AEUdmZxN1PZf1ILscJr4bXGADt3uGzl+jNZjMGg0Efnhlq
xy/gMYnZpdQrZ24eXGK0s4YH/vG09xpVqzpUndR3aGhpIjcriqLKRsJUazqrpE4PovOWZr6++Zjo
KF+K0+uZGF9koLSRsZkDPDtTJGWkM2wyUZCuAmxpOcF+/mSXdmGfbiEsLZ7ypEa9xZ0S9YAh2xbj
7TXc94miqUdVToq53iru3/fHV1VYBlMfXcUtNBY2MWZawmSs4EFQIl3DJvKSogmNzWZrc4W05CBK
qpsICQ4iIiIWY2MXjXl9en5pwfcxjp5VPif7a6QkPiIsNJjs2j4Wxju4+cUtsirqiVLbnVNRR3tB
E8Nm/XurgvDK/BQDYFLnz9NoXzLTzmsNz/Yy6bEB6tiPp14d8/U5PdhXrQT7BpBZWkdhbpIKoPdI
zcyivamAxLwS8lKSiEvNxLamynFgJ9DfHx91jmfnZGMsU614q4X6/DPTsWLpJzjYj7iIANIqO1ib
NtLUN4B1qJLuySF68lppa6zjwT0/aozjdNWX8jA4gQ6zTb99ONXTQkJ8IHkNnawszZIW5It/YhGL
m1sUJyQQHBfL3ObZrce5CQO+T+4SGJjEwMwy5Rkx3PSPpay0BL+IZLpMA9QlN6umgCC8Gl5jAKKi
oujq6mJkZORbaZcPtXuLFzjtS1jnlvEca/fxzqbNz1hZ2XTg2t5kfmEVzXM71Tp2XUc4NpaYnl3k
Ym32+QXWtp36+k+OTzg+8qDddjw9duvLnaGmqTHHxjKzC2fPA6yt29U2n13+Oz5yf3tZb0Gte3Ht
7BIkJ24WZm3Mrp5dUTg+PMKj8vfoKz9lzmZldUv7fvoB1ulZDtV05842e+4jttYWmFs9W9eRWm7d
OkR4tGpBPHU1/8S1g9Vq1de9u73G3HnZduyLWOcXcakMT87voQrCq/KyBqCpqUlv7T99/narFnhk
ZOR5CsWxduxP41Tn5vHR2VnpVEZ4enaBI7eLpdl5dtXxf+I5ZG1LnadH+3r6nfNzz71lV+f4Ckcn
6rxSy5+cHOt/LzjYWWN6eub8XFbz9PNcrUtLd/7lwTUV3JfXz64UzKpzUqs7NA52NtT5NfPtQ8A7
q8tsOLUT8IQFVQa7PvwdG0szzC2dnesLszPs7GrlOGXGNs3qhqrjPFotIgivhtcYgOHhYSoqKvQH
iS5UWVnJ+vr6eQrvwTrYxfC092238PbwsgbAbrfr5+vT5692Pj97VUAQhBfHawyAIAhvDy9rAARB
+PkRAyAIwpUjBkAQ3jxiAARBuHLEAAjCm0cMgCAIV44YAEF484gBEAThyhEDIAhvHjEAgiBcOWIA
BOHNcy0NgNZBiCAIby9at9zPMwCaBEF4/Wix8loZgO3tbV1Op1MkEr2l2tjY0CuRZ9GuDGjzLltG
JBL9vLqIly/KW28AtO5+tY+EaAUViURvr553pe6ytCKR6OeXFit/9Cu2z6At81YbAEEQBEEQfn7E
AAiCIAiCFyIGQBAEQRC8EDEAgiAIguCFiAEQBEEQBC/knTUA0jeAIAiCIPx03jkD4N6YxO+LrwlL
yuKHbx1rbFGZW8OLvwjxQ5ZHuvH18aWsxXw+ReMI+8rW+bAgCIIgvNu8cwZgw9LCgy/DWF7fwjI2
yurSChOzq3DioDIvm15TNyFf3iUxp4hpu4ud+WGqqhvYcDgZ62ghM7+Ixd1j9hbHyM/No394liPX
Ng3lFUwsbHGq/uWE+RJX3M7+4RG7azPUVjbS05TPr/75fdpHxlle2mB7fYW5mQXGejrILyxldsN1
XkJBEARBePt56w2A1pOYw+HQdXjoYXeum7/84o/kVrZj6Szn7x/eYHRZtfqTI0kvM7KwOoXPJ7eI
DA8jLL6KqZ5K/u2//f9Iysrn0Zf3iYqIIDohh+yUFEoLMnl8N4jkUH/+1y9+yZ34ErSvDrh3l8kM
f0xeTQNRNz/n1795j7tPHvPgZhitzZVkZBiwtNWRHBnPg88fkZebSlRyIYen4HQ6ftA7k0gkEolE
r1tanNRi5ovy1huAra0tPa3Ww9HxyQmb4y3c/sgXy+QklpZi/vj7j7GsbFESE0xmVS+r6xaiHicz
tzhB8sMQQiMj+fzTL4iJTyA5qoR5m4n4JxHExiVTU1NG6JNwov19+OZxLM0DE3B6zOrcND2tJSro
3+f+pzcITM5noN9A6INIhoaMhIdEER0YQER0MpG+EVSW55GQXoZHGQCtnCKRSCQSXbW0WKnFzBfl
rTcA2ocNnu7a8MS1QVlqMmm5BbR0DbBgtWGeWuDYtUp2YhKdZgvTYzPKCW1itdgYGTSSnVvK1MwM
U5ZZdrbXsU0tsTjZS8ijr/j8m3icjhXy0jKp7R5TazhlaayH5JQUxpYd7K9MkJ6ZQ9+4jfamCkZm
luhsKiYxo5hJczcP//QpURk5LG7LFwsFQRCEN4cWK6/d1wBfx+eAzW3lhPo8pLxz9HzKT2B/ntLs
uvMRQRAEQXhzXMvPAb8OA3DsOcLzKq8KCIIgCMJbhBgAQRAEQfBCxAAIgiAIghciBkAQBEEQvBAx
AIIgCILghYgBEARBEAQvRAyAIAiCIHghYgAEQRAEwQsRAyAIgiAIXogYgCtG24GCcFXI8Sa8LKen
p3g8nvMx4TojBuCKGB8fJzc3l4yMDMrKytjY2Difc86xm63tHU7PR1+W7a1NDqSuF865ON4yMzMv
P95egkPXAZ7jn3pkCu8S/f39ZGdn68dNTU2NXtE/zeHeDtuOg/Mx4V1HDMAVMDU1RX5+vl5+jenp
aXJycr7dFsecjeTQUMJik2gsaaCva06f/mP011Uzv6Nc+ukR7dX5PPAP4UFULLP2p09YD01ptWy5
z0cFr2BiYuJ7x5t2/GlmQDuHNMaMDViW1bF3uEJVa5s+7YL27Aa0w+pp5kb6WN05O6cW+o30j83q
w8L1oq+vj4qKCv0zsVodajKZKC4u/vZqwOJ4P/4BT/D186VpbBGXYxmna0sdM82IJXg3EQNwBWiV
8fr6+vnYGUajke6eHn24LCsL44hdHzaVVNBcZ2Gis56IiGhs82tMT82pk3KL8aklHPPjRMZE8fhR
CIuuU5yzA4QmVejLLg/Xkl5UQG9tE5EJCVjW1mgIy6GyuQXHwRHDw/1suOSDBtedgoIC7Paz4+mC
1tZWes6Pt97SNDLKWjB3VBCrjOigeYBd1yFmSw8Zj+LwC42gxDjAumWUooISujqncW2vk5eeyL27
DzEOiQG4bmh1ptbyf/aWkWYIpqZtqqGxT3xsClanmnhiJzsrDv+7v+dufDKFfokEhEfRPrmMZ99O
flIabWYrg7W1VDT1qmaI8LYiBuAK0C6nPXspTbvU1mxo0YeTM9Oxnc+2Gjoois8mMr+a2SkT6QmR
xGapAL6zQnF2MbEpaXSYLKQqczCjdoV9vJW4irOKXY2QX5hA6O0ESivKyM6roS2nnpysfGqq6iko
rmRfLuVee7KUoXz2POnt7cVgMOjD/WWJ3H4cSlKEjzrOSjHU1FNZWU91QzWZwckY+4YpyI0m8n4M
5TUGmuLLSEhMpKDVRH12ErU9Vj0f4fqgfRteq6eepb6+HpN5TAX9bSLTc3GdT2+oKSQlJRDDUA95
AQmUVFaSl1RKdFwgH/39M25GRBH2ZTD9Mxs/+bam8PoRA3AFaK39trbvLrVq5dNaaYuLi/p4X20x
gdHx1Ld0UJdeRk1WBZEq0FeU5FFcWkF2bBpx8VFEphZRkJNNVnEJ/o8CsSk3fry3SlxIIAVVdSTE
R2Po6qY2sQX70gyVCaWUJNayuDJPvN9Deqa+3yoUridaa7+9vf187LvjbWlpSR/vLS/AtKiq8uMl
smsaOdxbI/SxDzbHNhX+4aTnFFBUVEBBVCVTs8t0pleSm5FDgmZAg/yp7VUtQuHaUVVVxejod587
1+pa7VbljsOhxk6oz0shKjOfwtwE8hs6sXRmk1JRQmVkLeubazRGlpKemcDjsAw6hvooDq5AW1J4
exEDcAVoO626upqSkhIaGhrIy8vT77c9jbm3meqmLtbXtnDtHbE8PURFRRW7HnAsjVNZXcPM2h4n
u2tU1VQxaLHhObfWh85lKpQD7x6d0cc3Fjdxu9T+WtlgY3kDx9o0kZFxbBzqs4Vrjtaa0yrzp483
7YrTBc6NdRz7R+A5YHVjE+fSGOHRyfp93O25Weprq5he2ca16WB338X26hbH7gM6DLU0d5vYc8nT
ptcRrVLX7vmXl5dTV1enPzeiPU/yHUd0GqqobGxDq0q0uqi9b5DlhU11zLlVXaPqXtc2dTU1DFim
2Vze/raOEt5OxABcIVarVa+In70/+7rprVaBYOAfP1goXC9e9HhrLSmgzbJ6PiZ4O9obJIODg/rD
gML1RgyAIAiCIHghYgAEQRAEwQsRAyAIgiAIXogYAEEQBEHwQsQACIIgCIIXIgZAEARBELwQrzQA
o4Zy/AKCqeudPJ/yfZbH+hgcWTkf+2ns7yyQHhVEZFoR24fPfxm2p7GcgopGRi1n7/C/KO59l9YB
AIN9Zv2dXEEQBEF4GbzSABQF+ZJR3s/ayjyr61tsax2jeGB3dZJmYwetRen4P4yje/jMIFhM3VgW
7RzvORjsbKN79KwntOnhHjp6TOy7T3GszdI3MIG+ZvcGycE+NPVNsLQ0z+7hMeN9Rox9Fr1bzLmR
IVp6+llfNvHHf/oF5d2jLC1ucLS/QVtrC9b5NbbsG3onLDsbG2xvbjDSb2ZuYY6BoX6WVm3c/8Of
KGofZc62zPGJi47GBiwLm8oU7GPqaqdz+OkOPARBEATh+1x7A6B921pbRiuwJjWFyoiHfHzTn66B
AbLDfQmKK2dl2UqMny/VjQY6yzP4+pPb3P7mEYPWdRJ8P+Lf/vyAisxEbn55j3v3gqiuqyU+Mga/
O7dJyy7j8V/e43/84j0MNrUzty2EBueeFUCxOFDHk0ehxEaFUVKaz52PbvLY5wnRCUnc+PNXNLS3
kB2dTn5WOvExEdy/60dKZJIK4lYa0jNIi4nk5ldRWMd7+fBX/8Qdv0huf/gJufWN5EamUJCeSkRY
IvFJ8RSkJfDN53e4ffM+vTNqX3iO2N3d/Xb7RSKRSOSd0mKhFhMvuPYGQCuw1hOatrwmzQAUBT8h
raSXdZVf2oO/cyOsEufcAI/uR+LcP6C3KJnCOhPdxVlEBcQT8MSHu/cfkxARQ1PPFMbMFEICwskr
b6UxP4WYsBg+/cPfKCitYHbDBZ4tYp/cprLLwsraCi05ScRlGBg0FJMQH0ZyXA2zw21EB8eSEl2I
zWYm3ieIyJhU+gb7iHgSRkZ8HIXlNUT7+hOt8q+s6qOrpoDPP/2SkOh4UsOT6RsdJs0vhDCfYBq7
JqgtTCA6JIzallFaM+Mpa5lR+8Lz7f4TiUQikfdKi4VaTLzAKwzAs11ajrVWEhgcTnZxMd3dg3S1
dbJy4KKvOovopEyGB01MTC8xOzLMUN8A2WlxFFQ1YR4YYGp2lcmBfuZm56kqSuPv731IUcsYA40l
JKamYV0/+6yfc2WUiIBA4nOr9U/5liSGE59Rp36AZfq7RllfstHb2atkwr6xzGD3CLOWXsID7vDR
x0Esr0wSFamWTy9V6x1ifGKZ2bF2IiKi6BiapLe5jLzqOga7RlhdnCDKz5/qjnGWp0cZm1xierCX
ybltvSyCIAiCoMVCrzMADv1rVj8zR9sUp6Vx+44/k2uq8D8Ds8MtxAbeIza/4XyKIAiCIPw8aLFQ
DMDPwOnxEWvLyzgPvlvXq3Lg3GJlTT7ZKwiCIPz8iAEQBEEQBC9EDIAgCIIgeCFiAARBEATBCxED
IAiCIAheiBgAQfASpqen6e/v19/9FYQXQeskxmKxMDg4KPXmNUQMgCBcc9xuN5WVlZSWltLU1ERe
Xh69vb3nc8G5scbOnut87Mc52nOyviT9SXgDWo+hhYWFVFRU0NDQQE5Ojm4GLlibMavjqoKppa3z
KcK7hhiAN4Rre56C7GxqjP3nU76Pe3uTxZnN87GfxtachazsLCYWXvwHFa4fLS0ttLe3n4/ByckJ
BQUFLC4u6eO9Zbm0Dc/qw2qufoXg4ozZ2rBzcOjBtefAcXDIxtgQ+TFN53OF64xmGkdHR8/H0Otc
zQTs7JzVn7Vp0eQVFxAflo1WC+87nRyf6LOUeTjgxHOIQ/3V8Ow72HTsqQp4g9LCRNbccHrkUnl6
9PnCm0EMwBvC2l5ObEIOU3MLON1n3+9zu9TJ4NnDOj3PbF8vOaFlLK6u6/O21hZZdZxt6/7WBkvr
Z5dxDxzrzCyu6B8V4vSQ5eXzy7vHW0T6h1PZ3sXM0g4n7l1W185+2J31VbX8hj585NFOwBNWl9fU
/2p8T6VT89xH52ey8M6TlZWlny9Po10BMBgM+nB/VSGdo4vq+HHRlJ+Fj98TKup7sfS08uRhKOa5
bQaq4nnvo69pbWynOv07MyFcTw4PD8nMzDwf+476+nqGhob14brUYPwCQqhvGWZmrIsbf/wTD5Ny
KYxN5t79QEJCI/ALDqBnYID08DCCg2PoNtTwlw//jdK2AeIf3+b9jx4xYf/xOlx4fYgBeEPM9VRy
4+sHNHQN06xOisyMNMwjU9RkphCTUMj0UDePP7rNbb8AzMt7NKQ94dd/v0W3as0FqOXuBUcyZB4h
OSqCR77+5Jc1UpYVx29+9TsSDRZVmZ/QVplJYmoOK8srJPnf5bfvf05yZgExd+9zJzSWybkVjM3V
lBdm8eFv3sMvNZ+kB0Ek5RTT1v9ynyMW3l7y8/N/cN9fuyrQ09OjD/eW59EztaV84DIPonP0aeWJ
/vzVJ5o17dRxr5FekIfvzQ+ICk+hJr1LTyNcXzyqYZCdnf294KBRXl7O1NS0PtyYk0BKYpIyiy3E
R/lzPySJrMoKEh7nMWLuJrSsg9n+HO753CWvTzVklgdJSc/C2FFMZ2st73/ygJSMXCbt3zenwtUh
BuANMd1eQVpOBfatXebb8vnlhzdYXBzlcUyePt8+1EFRVgcz/f3kJxaTXF6I360/ERWcRFONmemO
HqL9IkhoMOFeGCU1OpyPbt4lW1XUBpNNVeaHuA9djLWVcuvBHT78/B4FhYXkJWTSXDeNfaaHJ08e
YTL1c+/2NyRkF1BeVUpWcCV7RwesrMl93uvC5OSkbgI2Njb0h7q0ce05gIurAmPN+Xxz35eqzn4a
CnOVofShtrGfoZZKbj8OwzQyTFRYOCEB/lSUV9FZPaIvJ1xvBlTLXbv/r9WXWh06NDSkP0dyUZ/2
NtSx5XbTWpGvjqdy1cKPpL6rl47iXubmJijpm2RhrJ72tkZiQwLx9Q9n1jpPSV40xXVtpMZGkqqW
2/+uehauGDEAbwj7RAeP7z4kLb+IakM9bY01DA5NUJ+fhF9oOhPD4wx1TrMyOU1nXTPRkVHEREfQ
WNuKZWiB+eERRrrHqS7K4uGDB6RnNdBRV050QjITy2r7PAe0VWUSGBBOs2mEmpx0klKyGGpTFXv3
girBJumpyeweHjHSUk1IdBI9A4P0142yuDRFW/fkWUGFa8HExAS5ublkZGTorTjt3PmOU/acDvZc
ZxXB0+fHrmOHQ+30OXKzfz5f8B40E6BdCdBuB9TU1PxofXuw52B3//KHSY8P93Huu8+GPcd4TtVR
d+xie8fJyXdfoxWuGDEAb5LTk/N78N/n6R/kW1TL7YfniYe28jwe3fWjvv/sIS7P0SEn355RJ3g8
393LvzTfc449R98+wCNcX7RLu4LwsjxdhwrXBzEA7zKnh1j6uugbtp5PEARBEIQXQwyAIAiCIHgh
YgAEQRAEwQsRAyAIgiAIXogYAEG45mxtbTM3v8jC4rJIJPJSzS8ssXLesdwFYgAE4ZozOjauTvw1
Nja3RCKRl8q+sYnJPKr38niBGICXxL27weiImUX75TvpyOVWO/i79f0UdjcXGR6ewP1Tsjn1sOVw
4j44+1Hdrn0lJ2MjIyxsaNt9iuu862HBO5i2ar06ysvWguDt2Gyz+sfBLhAD8JK0F8QRFJ3CwOTi
+ZTvYyproKtT62jnp3FgnyM6JJqUrELm1r/7YV6U6ZEOMjIKqc85+9pbZX4U5UUFhEdEEBuVRX9n
J42Nnfo8wTuYmrbJ+/+CIOiNATEAr2AAWnPjSCuuZ842haG3i8F2I/Nza1QnRpGQWcdgVRW3P75J
cEYxLo+b9PAnxJS3MNPbQ9Cjh0QV1LC5bicmNJDHIfFYbAsY8lO48zAG284B7q1JwgKCMM8t4TnY
Izc8iKDkYrqbWgh9cIfYsjYOduz0mIbori3m3oNwWjp7SA2IYXB6HmNDA+Y+E+WJRr28pVmBFObk
kZaVRWVlC/1tTdTUtunz+to7mV2XfrivO2IABEHQEAPwygYgluT8KlY2dqmOvstnIRlMmgzEFp19
IKWvoIDSKu2LacW0dgwSHx/EF7c+IzU0m7qmTurTSwiPjqVmeJnxpnIiI0L58KMv8H0SgHFK+2DL
Ka6tRUrTY/EJCOAvn97BJyae8PvRdLSbqS3KI6uwUAX6Sv7y908ICAoiPDSW3OQWduzjVNQNsLs8
SV5Ko16e2oJMqkoL8H9wl6icJpamTTS2DOjz1paW2NmXwHDdEQMgCIKGGIBXNADtBfGExKVj6DBS
nJ9MekYOpr5e/H39KKzuYqCqlZGxRUYrjeSkJXH7ni/R0Y8oTGrANrdKf34TDRW1xCUkE+wfTGlp
NZEhoWTnlrKjfpejvTUqS3IITUgipbCIEP8QCmqaacmoZcLmZn26Bp+gWPZ2VolVwT89K5e+BiOd
1Sa6uusYWVT742iT5PhHxMREkVbVxXBHMxNz6wy0lpCakk7gw3vkVzXQ0trNvHyJ69ojBkAQBA0x
AK9oANx7m/pDgNa5ORyHR3jU+g+PTtlcnmFsagG3Ns1zzKHrkJMjN7Nj4yxtbOnj2nT3gZtTt5Oa
snxufOnDkHWHnbV5hofH2D//HZaso4xal/Xh5dkJRiatager5Y9PUZnq+0PjQJmA4WEzmzv7eFy7
TE9Yufgpj3bX1bxh9rQJx4ccasuqbd/c2mJ2akyV1caOc5+jp74VIFxPxAAIgqAhBuAVDcDPweHW
IoXZOZQ1DqC8gyC8VsQACIKgIQbgLTAAgnCVaCe9IAiCbWZODIAYAMGbGB2bYHZ2nsWlFZFI5KXS
egMcMo18L+CLARCEa87+/gHr6xvY7ZsikchLtW7fUPHw+7FPDIAgCIIgeCFiAARBEATBCxEDIAiC
IAheiBgAQRAE4bWztbVFX18fJpOJoaEh0RuQ1jfM6el3756LARAEQRBeO8vLywwODmK321lfXxdd
sbT9rxmwpwO+GABBEAThtbOysqK3QIU3g9PppL+/XwyAGABBEISr5cIAnJxI9+NvAi3uiQEQAyAI
gnDliAF4s4gBUIgBEARBuHrEALxZxAAoxAAIgiBcPWIA3ixiABRiAARBEK6e120A7DYz8bEJGIem
z6f8VJ4u3+VlPdyeJz0mhtzK5vMp38fj2GDKvHg+9nYgBkAhBkAQBOHqeZ0GwLkyRXxwKj3D48zM
r7C/tUJvbx8HpyqE7zoZMZuw77vB7WZqzMzM2pa+3KptmuX1AzXkYbh3kMWVRZIjb9A6oc0/pSTp
awraLXj2t1R+vTgP9cVYHGwkISGH+eU11lQ8OVExxrl9wIlri74eE/Ojw2T4ZDFsGdctxPrcBJa5
VbRX8DfmZxmemNTz2V2bpdc0yp5bxagTFxOWKQ6/C1c/K2IAFGIABEEQrp7XaQBGuivJ6bKejRxt
kBodR3xcJJX1zWQFRHP/8WOSSg20ZGZz7/YDQhML6Oru4JPf/pbff/2EvKIS4qNyGR6z8OjGLyno
WlAZnRD36DeEZpWQn55BXHw0WXn1aB/T3bS0cuOjLylp6KfDWEdEZAQm8ziV2ekkZ5QzN2HC//OH
3Pf3p21snc7icP7113+ksb6BoBuPeRgcRmtXLymxMYSHhZGaVUxeegy/+rd/w7ewQ9+MnxsxAIrn
GYAT1zYt1VUYOi3nU57mmJXVF98plzFt7qCsrJy1Xc/5lJfDs7fLkdoOx+omrtfkEF8G9/IM++vq
Rzp1cbC+ej71DI9jR53k5yOK3ZEulusNHLrOJ7wkx7sOjj2XVBrHLlwbzvMRQRDeZl6nAVizdBIY
mcHajpP5wWYeJJTi2l0jOzOORN9S1rbsVMcUURBVwOTsGj2plURFBHHjSTzltVXc8g/DYj8LhLUl
QVi39UF6G+Pp7DYQnFSoYs0mafGJbKlW/JqpmZTUQtY2tlkZrOHf//B3bAvjPA5LQqvmdq0mClOM
rExYyA/PIbq4gOB7fyUiKJbGMjOLw2aSnkQTWtKCY3GczPgovrj7kPTCEtrMtrOV/8yIAVA8zwCs
D7Vz8w+3qTAMYbWOs7a+yeLaGm21ZZQ21BIXFkducS32jQ1ay8roHZ/FYV+msriIbvMC24sTZGWk
0jG2qFayS0VFOePLZ5eZpocMRKem0NTUxOauC0N5IQW1vXjUv6H2ZkoqmtT61jBUl1NvNKsIukt5
RQVz2y42p4ZILy4j+v6nuhM1Gy04th1U5WVR3W7h+OSAzsYaauraGbdOsbTx4/vj52I9J5HBJxm4
18dZqC/nwDrGXEG1OumcWH1uYKsf1NM5Bo3Y8gtY7+jm6MDFem05K52jnJ4estnZyoqhWwXxNdbq
1b4dnObUvcNKYxOuvSPc00Ms1DUw9eQW09U9eDaWWDa04Tk6wdHbzFRcDPNNY/p6BEF4u3mtzwCc
HtFvKORJcKgKMhO0VebzxNeXIVVPW1rNbG5vMdI6hMloYmVti/E2M0szVlKiI8iv62TW1MUDnyDM
M9sMtBaS13zWYdHMYB3p5Y101ZXh+8SX9r4Zffr+qoWwxz4kZuVT29bKcF8HQ0NTDDaX4hecxOSE
jbFeKxuLiwx39JOTlkJcbAIdHV1MmBZZs9mYNM3RVV+K7+MHxKfUMt7XRlR8MqaZNX0dPzdiABTP
MwD24U7u/fURzeZppoxl3HkQTn19GQnplUzNjRAeEElSahxZdU1EPvyUD/4USGlBJjGRSUQmBhIe
X0BjZS53IxPJy4jkV//+7zyIS9PzrihMZeTMC2DrrSezoIa8tDxqK6sJC4oiPTcZ36AA4iOTSc6K
4e7j+/zmt7/GL8Kf5KQseiwTlMeHUGpspy2tjoKsbEqrm8hOzqeuopTQwBhVtkhiKpqZuyIDsFXX
gi0jn8XKMubL47AVNLDW1MB8RSvz6bEsD82qVKcsFGexq91iUzi6a5mvbWEhv4SV+jomolOYK81h
LCoSa2ouswUpjAb70/v3vzKREo81u4htq5WFtHiW2zuZDn1Mz0cfM6mM1nyVQeWTjK3uzGgIgvB2
87ofAnz3OKWzPA//B4HU9p4Zi9eJGADF8wzAcq9yXw/SmbYtMN5SxBef+FJZWkZabh3WWRM5BR1q
Qy38zech4dHBPP4qkpySamZnVsksiuOzgCR6O2rxSUihQAWswOhs+rWrAYrupgL8EtLpHR6ipaaU
/LIGivKKqCirprrRxOxcH3++H8zk+ApNnSX8+bM7xKYWYDL1kRKfgml6joHqImo622hOqCQ3PYsy
FYDzswpVHlW0dEwyMFTPnewqlhznT6m8ZtYKK9gaX2M5OxRTkA8zJU2stzWrFnsP6/XFrAydXcay
NxUzlVPGzvgYK3XlLDS1sVRawVJNA8tGC/szXQz5x7A7u6aWL2bogR+2wip2RgewZuTgmF/Brtz3
snLZ1pgI5iob2e5qYjpf5ZUdx1Rlr74eQRDebsQAPMsxy7Yppmwr5+OvFzEAiucZgOPdNUrTMyir
aWNS/ShLC0vMLCzQUqUCdVsvC0tbaiO3GZ0Ypb68BGOXheWlZRzaPaf1daoywvnf//z/Jqi0lWPn
Gnk5eQxNXlzKOaa9OpvMyma1/mNaKwspNg5xdHzAwoIdh9NO/+g421u7LG2sMT9rpSA3n/GFXVbG
u8korWNx3kp7bzdzKk/3rpPKgmzqhqY5dDlYXt5Syy7TPDDE6u7VGAD3/CKHeyccb8ywMzmPyzaq
WvM1aptOOVoax24aP095qAJ4CUutfZx4PMocVLA6MMnJkTpgljfxqG3fHp/myLGHa3OdgzmrMgiV
7G0csG/pZrGpk4OFaTZHJ3HNTbBYXo/b6WK7o5r5ilp219SBIgjCW48YgDeLGADF8wzAq7Iw2k9j
o5Htt+EJPUEQhLcMMQBvFjEAitdlAARBEITnc2EAnv4evXB1iAFQiAEQBEG4ejQDYDab5QrAG0L7
HPDAwIAYADEAgiAIV8vy8jKdnZ2Mj49jsVhEV6yxsTG6urrweL7ri0YMgCAIgvDacblczMzMMDs7
K3pDWlpaOv81zhADIAiCIAheiFcagK2tLX2aSCQSiUTeKi0WepUB0B5A2d7e1qeLRCKRSOSt0mLh
0w9lXnsDIAiCIAjCD7mWBkDeOxUEQRCEH0eLldfKAGj3OLT3H59eViQSiUQi0felxUotZr4ob70B
0Ar49HIikUgkEokulxYzX5S33gAIgiAIgvDz824agJMDzMPDrDrc+uj2xqoq5C5bm6vMzi+xs+vS
p1/KySFTo2a17Fma9YVJZpY28bh3GRsxs3n+Nb7d3R0ODs+frjw91t+3fLoDzCOX2jnusylHew7W
7d/dd3HvbWEZG8G6ePE1wZ/CMc79vfPhH3Ko5rnc3/UI9WPs2NfZ2fuxrwx6WF9Z42JzBeH1ccrB
3gHHzzzWs7ayiN15dj6/PCf68euWZ4UF4aV45wzAqWeb3Bh/AqJiCQ5LYHx6gvCHj6msr8b3nh/G
zgGW7c8PnEf7K1RkxBMUksvYpJmEiECMQ3N0lEVxPzSeWfuBni730Zd8FZivD4/VxfMvv/icpy+s
DFcXkJlWRkdzL1sbS0xal8/nQENCCPeexNM6OHE+5fssj/XT2T11PnY56+MG/vzJDVZc368pt2zD
9A5a6SnLpaLx8vwvWLNo65lmaWqC5a3LK9f+hkZmljcZH53gaj5ELHg3uxSEZbL81OG4t9jL15/d
Y3Lt7Nx7GUxNTUzO25kcHedAnhUWhJfinTAA2pONF28CrAw3ExJVqA9PtZbge+szfvfvfyUm+AG/
+f1NBnv7GBmZpd+Qj39YFPPLi2QEPsYvOg+ninCnKoxbhgxkFzVSnB3Bn/5+h5rOQboqE7nvG4xl
zqnnXRPlyx/ev8/m3j75Ubf49MsQDLVaZbNCf2MTlTk5BH31Ff/8f/2KUoORnjYzR4duDo88VMcE
EhRdqNKuM9VVwq1bj5hetdNdnU5EfCyRX/+df33vAVMTg4Q/uEdcbg220T7874Qyfv59/M66UpJT
0umeWGS624hpYomxDrXtn/2FX35wh5LMRL7802f4x+SwvmEnI8CHsPRSOpqUEbp9h8jMItJ9Pud/
vn+XtuZ2pqyLGEoSCEvMwm5fJjrwLmlFlXz6T/+Ne0kl9Bh6sU0Nq/LcJTqjgplxbfgBd/wisG2f
1dYXv4NIdJl+jO/S7FIUnUtbayOBd+4RkJBFUdwT/tevbrC0bCXB7z7BcbnMTFuI9g2npKyM6Cf+
hEREEBcTSmBCCe4jB/EhD0jIK+fmL/6ZryJz6Tb0qGVGifW5S1hSAbNTanmfx9zyCcFybiyeLqtI
dF31Mrz1BkC79K6l055sdB+qwpoNhEYV6fNGavJIVAE1KaqAkQEDyUlV9DeVEfU4lIDAJD3NZE0y
//ovf8QnMhFVHGUAjlVroZO0xFh8wyLoHLYQnxyNXaXdMlUQmpCnL1eTnERSXBpRocHkFWaSk5hJ
tH8kg5MLlMZEkxiVRnp0PKnxZUyr/GKCMqjOTSG7op3q5DAeBaYzODFJc1EGf/rd74kMjSE4JF3P
21yZSXFlL5UJETQMrtBWFktogB+R4SUcaz/g/jw3P/ucyJAAboUmUpOZgqHPSkNqAlHB0ZRX99Nd
lkZqXh2FCQnK/ATx2198SIAyDGEPfCiqaiEnKpr4yHiqG010lGQT9jBEGaezbVsd6+WOMhI3HgSS
HJbKqG2GvJAwAu/509S/pMxQnCrPE2LjSqhMiyOndozjY4/+G2gdT4hEz2pjY0M/p5/l8PBQn6el
cTg0c+2kLLGI7PhwkrNqKE2MJzYqgdzsegwFKeQ1TDLclEFYyBNi1HneVZNDREIZeVH+FNSp8zYg
jAYV7ANvf8Jnt3zU8ZvM0OQMRRGRBNzzo6pthsGGNMJD1PkUWUBdThKpRf3qvDrrNe3ZcotE10la
rNTeBHhR3noDoG3U0x0BabcACuIjCI6NJEgFecvEMJlxRUyNdpGT3YS5rZaiglqyYoKITc3GMmjk
/uc3ySqoZv8E3MvTZOekEBebisHYStD9e8Tkl2HpbsLv9tdUdlr09VSqwNrbN0bIw4d0T1oojM+l
qTqP+w/vcvMbX/Iz8inPLSfcz4+C0mIyk6r15TTqkxNoG9a+V7BP0KM7fP7lHaoaW0gL8yNRtcyH
DBU8DojBWFeM7z1fEtMKaaosIj+vQ19+srMYHxX4u7u7CQ0Po6Qklye+9/nyiwdUlpYSEBJBcUYW
7QPTtOblUFlSjs/Xt8ksqaUkPpme0Rkas7Ipy8khIDyakowcqiubSAh8TGZ+JTX56XzyyWfEpReQ
nxBJXH6hMhJZ1FUU43fPRxmiPJqrVPCv6mNAlbG0dlQvlyA8D+1DMZdVPBfn+3fsUplaQml2Fs0d
FrrKCsiIT6Mwv43ZsQ4e335EVEwGLQ2ValorI+21VLeY6SrJp9NspTkzi6SYBL78XBnkpGyKU2KI
yspTx282dZVl+N97TEx8Ni31FZSWdmJuqSC/pP983YJwvdFipRYzX5S33gBc2hPgyQHDw8Ns7p9N
39s9wOM5VHm6OXK7OFSTj/c3GTaN6Pe1t5etDI9OcqhdHTlSG2MaZtV5dkffNjnBtvsYx/IMIxMz
+jQNl9ohR1r2J9pCJ+yrdXB6xPj4KEtr2xyqCu9IJdhYn2dxbRO367s76O79PdxaIRTOjSUmpmf1
BwgPHesMmy24VKtofn6Wo5MTZiwjLG+7NGej9sXZpfaDPQcXW+w5Uttz6MY6bWF20a6K4mFhcQb7
lpMjzzGu8/23tWRj2DLFjnNf7Qtt+gHHR27mF2bY3NpF24qDzWXMY1OqbAdY1XZv7R5yuL/FzMKi
OgDO1q2VZ3FTy/NY7c9DtT8PXvhhQ8F70QzA7u7Z7aun0c7z75/jp+rYdKmK5UC/onfoOpt/cewv
To8xu6I9UHuqT9Nuq7ncKp1Kr91e05b1HB1gm5rA7lDDrh1sC/Nq3WcP9S5MjjG3phkRdc6e1wcH
rhd/LUoQ3mWuZU+APzAAgiC8Vby4ARAE4XUhBkAQhCtHDIAgvHnEAAiCcOWIARCEN48YAEEQrhwx
AILw5hEDIAjClSMGQBDePGIABEG4cl7VAIyPtDG7fQQeBwM9Q+dTf4hrY4ZR84/3onk9OWakrYSg
sCgm17RXjOHEfUBlYgzReRXfduPtWJujNDuDRW1fCl6HGABBEK6cVzUApqYSytom2Jnro6Cmk+0l
K4NmG2617NigmWnbFF1d7SwurLBp3+PAPkddXR2brmPc9nXaWw3M2LfZUXWKY/86Bj+Pqi+3GW3N
JbG8Vp8y1l1DToWRuqIMOoZX9GnrtlGCH/2ZgaUzkyB4F2IABEG4cl7VAJzsWMnLL6WpoQFju5E7
H/2F//X+J4SExJISlk5MnD/+yXmMtfZQm15JWnY2hQU5FFdUkuwTRWBIKDHJJQwMjzC79vxvgbzT
HG5SWpFDn3VJH+1ryaVTmaHV5jYa6ib1aRo9dZEMzG2ejwnehBgAQRCunJ/jGYDS2Ls8iK1kcbyd
v3x6VwW7aiqTCuk0zrNiMxMcHkhCQinVMVkEZRezuDBNTk4SST6lqpLapDIwj0HrDBvnXwm9Vpy6
KMkKpai5C+f+ATa1nZ3NlWQUN1BZnIWxe4zxiXk9aWOhD72zYgC8ETEAgiBcOT+HAZgf68DYa4WT
Iwzl+aTnFmMxTbG2sM3EkIEYZQaGhqdYnl5jtKuO0NBQxmZWmB2YYtvhYKZvjIGhYRbtL7a+dwrN
AOSmkZiQQGO/CvZjk2xtblOaGkdKfQeuvQ36Bs6uAswqA7W88/JfVhTefcQACIJw5fwcBkAQhFdD
DIAgCFeOGABBePOIARAE4coRAyAIbx4xAIIgXDliAAThzeN1BmBjY4OZmRm9AhIE4c0gBkAQ3jxe
YwBOTk4wGAzk5uZSUlJCTk4OExMT53Nhb3cbx/k3+k89LjYdDtz7WwwM9DO9uK5Pd+5s4tE+lK9z
yoGqwDwn3064lK2VRZzXsqMRQfjpiAEQhDeP1xiAnp4evSewC5xOp24CNjbO3n9tTn3Ax74p+vCI
IZXbYbmYmosIjk6hf3xW7altAr/5gs6xNT2N1tNWXU4Wtqe60Dy9xAssTY2yuXve76YgCDqvagC0
9/w1Q29oaWPausrRuTPf3Vhiafn777Rbh0ev56t+P8Kpasv0tkGrQdV9fTA/pxpB5/MuY6ADGoyq
glfD+3b1+5y1hYRrjtcYgKysrB9UON3d3RiN6ixRmKszufUwkK1dJ2VhvtxOa6S/Lo+opBxmlrZZ
to1SVVVEaV2XavtreKjJysC2c8zJ/g5VqQk8fviE8elFOityuffoCfnVDYx2TzPe3UOMjx+PohNY
lqsBgvDKBmBhvJebd77EJ6OQ8rACBkxLaBfj9u3zLCxtqRSnHB4e414d4P7tm0x6WVe3mgEwFMBv
vlR/VRVns55N95xXP4dPBXhjOUSotk9mGhQrI9CUAJaZ85nnHD3VV9KRWtbtUnlIu+adx2sMQHZ2
Ng7H9yuBzs5OOjrUEa8Yqq+kuCSXxPh4yooKCC5poqsml4jEHKyLm2SE3+JJWCQ3vrrNqn4yHFOb
nYNW1Tin2/DPUWeZe41ovzvcTanlcHuF1JR4SpLrqUjOoaiglZbCMpq7znrfEgRv5ue4BdDUVoPp
4BRzdgZffPwlkYVVTA1MMdY/RU1ODB994kN83AM+uv05tS3dTC28eEV3LVCBOqZe/VX1VX8jNBfC
3Tsq2IeDao/QqwV5VVWGp+pJdUpLVF0ZARlqmmUBhnugqwse/g0Cs5RBiIQcZRgqM+HPX8GS83xB
4Z3EawyAyWSioqJCOd+zQ31tbU2/BbCzc2YKhhqqGB41Ex8RwbB5lITyBvoNDVgW99TZsUBiWhJD
g4PkJEXS1DetL1MW50uAatUPDvap5SIJDQ6hubmd4sxMYmMiiIhNxVDSrk68Bgb7ZrA0tNLTq84q
QfByfg4DUFpdQNvqNh1JOXSbJqlPL6M8s56S6GQ++OIGiUkpVFTlUd9SytbmFtu717DL3x/heFMF
7VLVQFlW+ypOBfYoZQS6IShfBXbV7ilpVYlOlSFQ01c9aliprBoKVVqD+pui/rZ2QnQo3A+CpGJI
eADzqgrLUWbitjIFNQP6qoR3FK8xABraJX/tSoD2IGB+fj5zc3Pnc9SOODrk+OIe/ukJrsMjPJ4j
jk9OOT12q3kX17uOOXCfVSQHzg2mJyfY0b4w5rQzNX123WxuqJUoPx+iUxvUDvNwpOd1rNbhUX/l
upkg/CxXAIy19Nl3GC01YFtYo7+shZbyNtXa7SU3LZ7ktBysY52099QpA25idMbL+rtXuzFTu6+v
2jjtqtXeUQUr86oV36da7uNqfOQs2XS/MgVhEBIOPaptY66AjW3IT4OJFVg0wRNlANqGoEsF/nW7
Su8H4f6g9cQsvLt4lQHQ0Ja32+2cXvbE3s/CKcMtNeTllrHklPv9gnAZP4cB0M5h7Sw+1Uy6GtDH
T84M9qlnn+XlFVxHWl1wqtcJJ//gjZ3rxLYK4CEhEKgCd3CwCtiB51Lj2jTtryZtXlS0auF/Azdu
qeGos3TBatlgLY36GxkB39xQunu2TJgyCz534PY9GFCmQHh38ToDIAjCm+fnMADC89F8kNOJ2sff
/f12WOnir/ZYlEP93VO7XNvtTjXufGoZ7a82X5un6vyzaSrNRXrtgUDh3UUMgCAIV44YAEF484gB
EAThyhEDIAhvHjEAgiBcOWIABOHNIwZAEIQrRwyAILx5xAAIgnDlvKoBOHFt01xVSUv3+PmU73Os
5s9M2bR+bn6U0yMX66tn3Xvvby4yP7eqD59xwvrcGu53uDoZNEJFOSwsKz3Vu599Re0j9XdP1f2b
z/wMajdIV8BeghgAQRCunFc1AKvmFiLCY8iMSadnZInjw0MOj0842t9hy6mWP9lnznrW66ZDe4xd
49SN3b7N5lwvJZVFuD2neDZnyE/LRfs26MHWMgsLdpXuhB2911A3JQH5LO54VIV3wMlre3X49dCa
DwkZ0N0G4yr4L9igpRr6xqA69yyNrV8NK11smvanIRJ6hmBX3mK+9ogBEAThynlVA7BibqO0rJba
qkpqG5uIvxdEaV0DiWGhhITE0Nc9ykCDiS5jKX99/wOiywzUZ6UQk1BGf2MCv/nD77BuujlxLlCc
Vah1gsdS/zB9TT1khkby9cOH1AyMYkgooiA3g8KSKoydo2crfwc4VZ4nKltV2CdQVQ5tRuivAp/b
EJwDGcEQmwwP70BdLxiaYH0NmtuhNu7snf/HKo39hz+RcI0QAyAIwpXzqgbAPmrgy79+SnZlH/aZ
EUriGmjpKCd/wI5ntpuwsCRaUsr56tEd4tKziEsI43Farb6se7GLsroifdhjt1GYWagPWxuaKU0q
ITu6ghnrBKVpdcR//lfeu++Py+1ibfUd6knQBdGxsKr+DjWDb4Bq2WdBe6fazlUojlGGYAxK1LTa
LjWuzMLCPGSVqGlRMLEIrQXQ9cxHgYTrhVcZgKWlJUpK1AmenU1TU5OepyAIV8+rGoD1iUG6Byf0
4b2FaVoqhtlatRHo85DAsEQsQxbqU5vobKkiOCaFEYuFvLgwgiLz2d2aJyoqhNGVPU7c28Q9/oqQ
mCQ6G7rpruuko3qQ9eV52suMdJS3U1GVS05BAYZOFTHfIWaH4UkghEdDUwsMNKqg3wExOdChWvza
5f75URicBaOadvMO5Cqz0K9MwOOHkJIBTu/6fILX4TUGYH5+Xg/8NptN/ypgb28vRUVFeDzaxT/t
5EgjodigD3cWt+N4gS77i9PCqTcpq6zoMxRS0zlCX006T4JCGZrZ5Ni9QFZyNvvneZ3sb9DV0q7f
b3w+h4z29GjdeAvCteVVDcDzOHLvqXw3acxJJbGwR5/mdGzr9/u1h/p2dnb1wOdRFdnh+Xc5PIcu
tncc6Emeg/YRsR+Z/dahdQUcrQL/k0dw94EyAeEQGgohwSq4+6i/58Nad8H6dPX3gQr62nC41tWv
Ws5fTVtZOs9QuJZ4jQHQgr12BeBpGhsbGRoy6cN9RVF88LcbzK+vUR5cjH3XSUNhNo3dIxzvu+iu
r6O0sUX7sua3pNz5E/fiq5WV9hBy4xMiS7tpzk+mzWzj4PCYpfEufB8/omf67NLh8c48+SmZ6I8k
qWV6aksoqtY+yQUjHQ1kldYyv7TCyuwa9oVF6kqLMaiWjCBcN16XAdA52Wego5dN1wu4+GuK9lCf
qqvxqKpQqw614QtpbR59+PCp6Wra0+m0YS3dO/bco/CSeI0BSE9P1yudp+nv76e5uVkfNjXWUF9Z
SkZ2JjUJdeQW5pJfYaCmKJvcxAxCH0URG5eEsW+MkvQMukfm6K7KI72wgJ62dqKCw0hrG6IuxZd7
/uHMLC2TnxVPYVEBybk1+jpOHAuU55bowyOdNcRmVdNSXkBqYgJR6cVU5mWSkJpFXWYzhbGJRITH
Ex6ayoLjh9sjCO8yr9UACILwQniNAairq2N4ePh87IzS0lJstrOnXDqLsxi02hlojuPT3/mTU5RL
Xn0fzWXZpEbm0NU6zWRjC401ZqwWC6sb2zSo4N9hrObr20+UkagnsrwZY0k+y8o576/189UXXxAX
G8PnN+6ztO3hdH+FhIAnDA6N0FZXRExhM30NZURFRBKbW0tnfRmpmTlUp9VSEl/G9Nw6zVGFTK7I
swrC9UIMgCC8ebzGAGiVTWFhoX7Zf2BgQA/+LS0t53PBPm9j3eFWW+igrd3Ewe4mealJVLcOsGff
YXlxk63FJVZW986XgIVpKzt7DmZtS+xsrWGZX2F1boY9tXrn2hSLjrPAvWo1KQOg3Tzw0FaVQ1p6
HusbWzSUZJFV0sCp55TehlLu3r5HRkErS9Zl5ifn2d7ZY2l8FqdLrgAI1wsxAILw5vEaA6ChPfCn
XfbXTIDVaj2f+hZw7KAiNZGAoCQm1s87LRGEa8wrG4CjfdrL8vELDqapuY2hdtv5jJfjdGeFtoqB
87HrxeY8xAZCciF0Vqvxn1i1WJpgSl4HvJZ4lQF4eznl6PAQ731kSfA2XtUATHY1kpzZzK77kOXh
bqJvRlBUU4vzFGwDBqrbBznY28fUaqC4vlHv6Gd2qI3s4gpmVrY5dK5RX9PMpHmIwsgGDnaWKczN
xWSzq1rOSUlJIYaeYRbn51leewdNudrgjCgYUr5IVS3UhEK0Gu8chxMX1NfC+Co4lUmoKIFerT2k
likrhbp2tQtUZTTVq9IPQnMKmMww0Ql5xSpoqKRzJsguguk5fW3CO4oYAEEQrpxXNQANNbk0TZ8F
5pN1CwHfBBObmEBt+zTG8gR++at/p7igiNB7EcQlp1GsAn90chY1pQUkJqQSHOTDH9/7AzcCk2hJ
ryU5P4e6ZiOlmemEJ6SQV9VIfEgI5c09Ksht6Ot5lzhVdXpE3vmIoj5GjUdDpDIBKyrwf/M3uBmi
gniQMgbxkJwI+Sq4Z5RBaiRk5sLf/gC/+QoS1XhtIcRlQWsNZKVCmEpfo4xDWKzWfBHeVcQACIJw
5byqAZjrNxAYkUCfaYTe2loqc/pYHbdQEJzKY2UEAu99RJSKUm21EywOmsgKSiY8u5SB9kYykpJ5
7BdISn4JXa2tVIUXEJmZgbHfRGVWMj6h8dR1DpCXEEu1cYDZxa3ztb5blGVAZYfaVwsqWKsgrnXr
O5ypgnwBBIVBrArexUq7buhXrfw0FfQNAyqtMg45OfAgABq7oF0NV6llkithckgZgDRIUONjfZCi
TIHw7iIGQBCEK+fVHwI8Zay3jiQVgUYtMyzP2nGq+mHROo+xuoKCokqmrTZW5jbZURWWfXmH0c5a
fB7cJTGzhfWZUTKychgam2LFpj3gO0F8QgI9Y8vgXCczPZabN/xp67cwu7R9vs53B7V7aW2Av38A
Xz1QQVu12KtU671QBfrMZDX9QwiMVsOq9V9TB7lai75Utfr/DP/zf0C+CvCPbsAnd1SaJKhTwd/v
FvxWLddkUAbAH375b/DF57C+fr5S4Z1DDIAgCFfOqxuAl8Wj9w7o7xNFr3af/0dYn+gnMT6KhNym
f9Br59uLtmuLilXgrleBvQrKKlRrvwhKy9WwUr0yB1UqqGvTi7Tp6m+8Cur/6T8pc/AVFBSeGYM6
ZRq09MUlUK2GG1R+Wj5//leV9j9DYhbMyXMA7yxiAARBuHKu3gCccuR2c/QCVcPJsUeVTzrBF64/
YgAEQbhyrt4ACILwLGIABEG4csQACMKbRwyAIAhXjhgAQXjziAEQBOHKEQMgCG8eMQCCIFw5YgAE
4c0jBkAQhCtHDIAgvHmupQE4OZFe9QXhbcbtdj/XAGgSBOH1o8XKa2UAtra29MJpLQyRSPR2Sqt0
nM4ffmRHO8+3t7cvXUYkEv280mKlFjNflLfeAGgtC61i0VoXIpHo7ZR2jmqf534W7ZLkZelFItHP
L+08PNQ+F/mCvPUGQBAEQRCEnx8xAIIgCILghYgBEARBEAQvRAyAIAiCIHghYgAEQRAEwQsRAyAI
giAIXsi7ZwBOT+hpLCen1IDr9HyaIAiCIAgvxTtnAOb76rhxJ5yR6WkqE6OJz2hi17nD4vIKB65l
wm/50D+3xdGhh+NjD0eeE1yOdWyzC0iHwoIgCIJwxltvALSORC56OdIKu785Q0KIL1WGLrIefsH7
NxJZmurh/d/8G8HRCfz5F78ltbyK/KQKbNPD5Mem89jnG5KLm9C6KdE6FhKJRCKR6LpJi5Mv8+2c
t94AaN0aXnQzqm3ciSqw62Cd0ICbPH4UirFllJ76Mr787HOCIuNIj8xlZn6CGP94+trrCPRNpq2l
mujkdFb3T/QNlZ4FRSKRSHTdpMVKrevtF+WtNwDaBp2efnez/3DDqoJ7AEHpRYz1NBERl0BZSR6P
HvhQb+ynPCOaktZe6vNj+PrrOxSVtFBdmMqDwER2XPJRIUEQBOF6osXKa/UxIG1jnr2kcfqSXweU
rwkKgiAI151r+Tngl7mnIQiCIAjeiBgAQRAEQfBCxAAIgiAIghciBkAQBEEQvBAxAIIgCILghYgB
EARBEAQvRAyAIAiCIHghYgAEQRAEwQvxMgNwqhfQc/ImPgt4vm6Ph2Ol5+E5OlTlOx8RBEEQhNeE
FxkAD+VJAQSERjK1dnA+DU5cG2w7X3wHHK7P01TUow+vjw/Q0WPWh38cD5XJQfirdQ9PTGCzmDDk
GVnf+74R2V8ewe/2LQKCM1lc/247T1xbOFw7WBp7sC24z6cKgiAIwk/HiwzAAQUxYfROLbA0P83k
8hKrk1PUZNzjTzcfsrZhpza3kN7xecbb26ltNNLd2EJydhaLex4WTAZyimuYtYxSGFmj57jQ00hZ
dZs+fLg+R0Z8PE09k5we7pKblUp2eSObu0dqrpvC2HA6Vd479g3mJ62UhBayuOGgvbyE2rZRvdW/
OtxOqzIU4x0NVLf009NQTHm7mcGaMP7+4BYViSWE+EZQ3T3E6vIi1oVNfd2CIAiC8LJ4kQFwkxl0
i6jUImbmVwi58zGJVX3YevLILc0jIzmKP3/4N74IiSDi63CMHUaC1d/cghwKS/vpayvm97/+JUkZ
RdSmtes5LvQZaGwb1oczU5Mw9I1Sn5+GT0QspS195EaH0mReUXNPyAr4moCYNIY7eqhIKseQ10xu
ZgIfvP8Xfn/Dj3nVsN+f7eHOx5/hG5HD1MIK2fH+/PoPf6OiPJWc6nyaMgtJScsjKSqTbvM0M4sv
/hUnQRAEQXgar7oCkBsRQF33IJMTI0T5fE1CiZFNaxuZhemkJybwOCyDtsFe1TqvZnVtnoo4A/bF
GcqD03mcEIPf3S+IjoqjPNGo57jcX0egfxTdwxNkp6eRW9VEeVYGkfGp5FY2kBYZTtvYmkrpoSI9
E4cacs+MUhxXQl16HQVZadx6FEaVoQetxPbRdhITs9nccbE2aeTLB/5qnV9R11BKTlU6VYm1TM2u
05FURqMyGJOzG1oxBEEQBOGl8SIDAFODLRQVFdE12M/q9gYr1hmczh3auvpYW12hurRUtazHWZ/b
xOU6YHXOjmtvl42VDcb7OqiqbGJhZZm1+S09P8/eOjXFRVQb+znYsVNUUED/+LI2g+KCNL787DGm
GadKecrawgLa14WP952szq+yumDH49qjtbaUurZ+tOf+jna3WN84+zFOj3dpr6qhqb2XA5eTrp4u
xsYW2D9ws720zvzsPMvrWt6CIAiC8PJ4lQG4KnbmRlVLPp6UgmZ2D9/EGweCIAiC8OOIARAEQRAE
L0QMgCAIgiB4IWIABEEQBMELEQMgCIIgCF6IGABBEARB8ELEAAiCIAiCFyIGQBAEQRC8EDEAgiAI
guCFiAEQBEEQBC9EDIAgCIIgeCFiAARBEATBCxEDIAiCIAheiBgAQRAEQfBCvMoAnLiclGTHExTo
S37HCCcnborSchgZHaYoM5/29g5WN93nqZ/llI3ZAQIfP6a2c5KT4yM6DSUk5pZwdOymtiCSmPg0
1vbOvv7ncW5RkZ5IQGA4tvUfL/OPosrocu+xPT/K+OTS+URBEARBeDW8ygB0VhWRVtXH/t4WRXlJ
5KT58dmDh+Qm3uWzwAisE0t41AYONlbT2D6ullBBvq6B8bktNXzKoTIQ1v4O8jPLmLeNce+LWxTV
dXLq3ib0zh9JqmlTqTROMZYUUVgzxK62o/ac9NWXU9HUxbHnhPHuTkrrG3Gq4aURM6UV5SzuesC1
SVNdE+v7J2xM9lNW3sZoexaf3voc84iNvd1DFs1d5BeU43SfsjY+pi87v7XD0vwie+4Tfe0C7Fkt
HGwfqKEj9ufWzn+Xy/Gsz7JUpvbp0ub5lJ+XI/sqh3uu8zFBEIS3A68yAIXFWfSvnM2zDdQSF/eY
yNQU6ovCiSnNxZDSQGlJGYlJRZjHl6jIjeUPv/oNf3yUiL5Wz7YyCwlU1PTTZSjgYVQSufGZdJhW
mJswERUbTO3wvEp4SmZBFtNqmzTGehqISSujrjCb4twCgr4JITohgaqGduLuBhGVlKiCeiOpcf78
/re/4ZOASJKSc+juG8faV4S/mt6U30ZFZglxGQU0VBRRXFpC5O0wolV5ktNrMJvG2NqXWx8XzIV9
xWBUMadHW8zEVekGwL26rAzYKfujTcw3GjlVE49XbdgSMllpaWdnZoXTQ3WsrdrPMjnxcLi1+a15
ONre5PjozGR51HGmZuu4V9bU+DoLJans756odR5wtHt2Jelwc52lgmzsU8v6uCAIwtuCVxkAU2MZ
oYm5jA53q6CZg3mwkfpOI/PmGoxjnXSn1ZMQF090biMrdgcZMUE8DM/A0DuqgsUpW8sLKtA2EpWS
TndPJ4Ul5ZRkF9I2sMDq/DzFebFUmRb0dXWU5xKVUcyoZZrS7GQSq7oYbCohOS6D+vxBViwjFMcV
UZpiYNO+RE1IDk9C/YjPLaOlvoTHEalY51c5WOontzKF1sJ2CuKzCMupZLS/lYzMNPLCG9naXKHY
vwDTxDQOl1wBuMBeU8pkSgorrV2sFLdi7zEwFRnJbGkTi3khDDwK5UgF8O3uGpZN57dW3JvMpacy
ER3L2oCZ+cRUxkKCWOoxs15WwlhAALayFhyTw4x8+SVjifmsGeqZji9ge2wA080PWWwfxBbpz9D9
UJaaG5lWBm3kSSAbM6/n6oIgCMJPxasMgCo+3c0lJCXGMTirKmTXOrbFBRz2WRY3llkaX2Bva4uy
rFTKGswcOlbJTM2gqXdMX3plvI+ExHjMc1oL8YSuslxyG/s4VvnWZCRTUNuqtyp1Tg4xVGWTlF7G
1sYmlXnJZBTVsbPpZG5yWa3Tzsz4rNIiu85t5idWsS9YSMvIZnxuldH2WhJTK3G592lqqqGjcwzn
hpP+5nLi4tNZ3dhlYXSO3V2Vn3mKYcskjgO5AnDBclEBjrl5bHEBTIbmMZWXi/sI1utKmS1XgXto
UE/n7G3AWtqmD+8PNTBR2qma93asWQlMRVWxvzrPQk4Fs+mlOBZXWM2uYDI+jNGINJYqizFHpnB2
IWCfpcYCNntbGLrnx2JFFWNhkTg2jtgoz2JlbEVPJQiC8LbgZQZA8BY2WhrVMQMHpmamUmtwmDsZ
Dw5gtqKdg+VxptOycO0dc+raUWYhRbX6k9gYGGYxPx1LeDQb5gnsDQO4t9ewN3ezbuhjf2uTjcZe
dkYHVKs/kdU+C5uGShXoU9izO1itzmLJ0M1CXqYyGU04TP1MxUUxHp3Izsr5/SBBEIS3BDEAgtdw
4tIeCjzjVB0j316tURx/e1ydcuw+PB9+PqdHLo4Pz9r+J+rYPD2/+3KW5Qmeg7OH/k6P3N8+QyAI
gvA2IQZAEARBELwQMQCCIAiC4IWIARAEQRAEL0QMgCAIgiB4IWIABEEQBMELEQMgCIIgCF6IVxmA
3a1VpqamcD/3vaxTHBt2XIcv1qPeieeIYy0vj4tNx97ZxEs4OfaoHXfeb+yLcuxiy76J9O338kz2
97No117DO2B0wIR5aAT75h7DPc3YNtV+nRkgJi6B1uEJpkxm7Nq3F2xjTNi2wL3FyNCkno9n105O
chxlTYPf+x2Od+YpLK3FvveSv6nKZbTXxJEa2lkYITE2hqioGHILyrDNO8+SPMXi2DAT1vXzsX/A
yT5NzQ3sPPUG4+rkCFOz2ncsvo97e5lhs/V87IyZsREW7N+9JnniufzI016fvJSDTSzmaX1weaKf
muYBfZijHaqKy1i99FMIah2Xnot7DHYMoa1porePlZ0f38+TvQ3EJcTTM/Hj3S2fHsvZJAhP40UG
4JCCaD/CQgLJyTeeT/shM6OD7FzUg6ryGhvt0Suiy1gc7qLN2EVJWSItY4vnU3/IymgXdU1d52P/
mMnRNrac24ybLedThJch29ePVrMWUHdIDgwnJSKekKBYMqqrmbd0ExESTt+whdmlGZIeBjC0fMRw
eRqJqQbsG/OkpaTqJrE1JxrfmEJmF1c59rgZHuhnZXuX2qi7fP4wgthHj0gr72L/0I3H7ebwUBk9
j4fttUUmpmwcqTw25udYWnewu72KbXaZirxkBmw7HO5t0VIQx70H8VTnJhMWnMP4zFmXxI71BWYX
7LRkxJBVfBZIdzdUntOzuFx7KtAOYRq1sHFuOjd2nNhtPXzw3u9oGjnrcXDRaiHx8UMKq8xsryww
qZZdX51nZGpW+dVd5maXOHAoszNsYs2pTNHSospnj/npEcYtXTz4+DZ98xvYFxZYWFlj1jbBypaD
0pDHRGa36V/S1PbH2q6yM4d7TAwYiYxNQvsCgrk4iv/8/3mfbTVsHy3m//n/+K8Mq/N6amKcTdcJ
x3sbjIwMU5MSyeOgfI5OTlhQxnxr183e5hqTJgN+NyP0vLJ9/OgYVdNGhlQ5DzlSy05Zl9U5fqTK
aqWnPpeI6FRGLBamF1bZXF5Sv+sGrv0tZfaXVDmPsE1a1O/moCjwITH5XcoIuDGpsq9rBs69y/SE
jT3Pc1sFgnBt8SID4KIgJpTiyjrq63tYnR0m6PETavsm6azK5+GTYGrburEOqkpyqI3wyBg6Wwr4
7e//ibKGLnLDQ3iSkI7j4JCWthZ2VWNiy9zEnz94n4pxFfyPD2nITiEoNImC+loVwPcxthnYVnXM
2rCR8uoz07E1PUzoIx+ySo04N7dJ8Quk3KAqxplu/H0D6Rrq4/MP/hNRBUZsI8vMKwPi5+NLbccI
86rSCvP1JaWiianJCYYnVvU8he9T4HeLv37xiODgh3x+I4Ci2Cf8x//Xr/WANFKZRVHz1FlCRV5g
KJZNmG4uJco/nsqeUczd9RhH19leniTS9z4NPWbaCtPw8w8jLimOgK++wjciCZ+//pXHwVEU1DZR
nRFBeEoF9c1NDHVV8qt/+Sf1G1cT8OlNSmsbuffBe/yvP9ygXh071Q3d+rrXRwxk5RgZ7yjlsw+/
4Pa9ANo62rn923/nt5/fIS4yjpqGs26o53rL+Ld/+idyq/spT/Pn089uEptbxdyUiaKqWpprK6lW
BientAnbRB9hAUHc++obMrLyePjJNzx6cJPb6vi6f/sx5bUNlGbkEf3kCTe/vk1gXDaNJWWkxyfw
xTd3aTbW8eG/vk+poZ47H3xJj2WKyMd/4g+f+xD0+Sc8iC6kPicZ/4Aw4jOyKEmO4qFvJm2Gavrn
d5jrrOTrP39Ny8AIzZVJfPNlKNPWOWUqfs2Nx4kkxfkTlpmv9v1dProdS0dNHr/57//K3bhEQm7e
JTY1i9iAdP3iQG1cArHRUXx2KwDropXAjz7gf/3uExJT4vG56UdEcDTdVlV56BwR8smnZBTXE/Ll
3/jF/3yfFvMUUQ/+xB+/ekLgZx/zOL6EusxE/APDSMzKoSghgm/uJbMpX9IUvBAvMgBuCqJ9+Oam
L93mCaIC7nJHBeK7fr74ZtSxPataTMmJlMfWUltTTmxyFqaxXspqUjEZOsmKq6SzrYnCghJKVTDX
qgv7SBMf/fuvVdBYxm418pv3PuahXwChcVlUlZYrs9Gs9xO/bDLSaDTppUjQPg6zus9AZTpf+wRR
369dOThhqKeJLz75E2Hx6dRUJ2I2T1IdnEZARi7rzgPqSlMJf6gCQp2RgthcesfmWNu4qPiEp8nx
9aHCOIvDYVNBLpTUmDieqAAQX9jE9EAdfiHxrG07cTid5EcFUz8wSVVqpGpttzIxu8K+fZKcvFJ1
kB+wvjDI3fuf8/Wnvphs69TkRxMfmUB7n5XGlAR6Rlcoi/fl3pNIgu9/Q1JRDaXZGXz12WfKREaT
EJbLjKWD937xAYVl1SxtbVJekIVdNW9XB6uJS6imtzaPotohukpyCVdB+k8qwJWoIJ0XEUJGfg8H
qpWamxCn8vyUpOw6asuLGV/eZripmBvKNIxZhrn1tw/w8/Pn/Q8/Jjk1mYrmIWrToggNiSE5oYrx
3jrS8tow1ZUSERBNWnQCEb4xTMzPkxUUTkxILCXlHZRnx5FZVkhyUCYTkwPEBmVjswzx6J46Xx48
USYhjbZOE6m+/gxa16jIDifcL4S6dnUc789QrMxOd0UxWWnlhN79lJiyKoqjE0lLyuXx3W+4fTuI
waFuYhJjyE1No6a2n7LoR3xyL0qZ3HYibgczt24n/ok/kwtzRKv90WMeJjsxgoycJP7yqw8pKKuk
PD2O3KI+rF3FBCYUse3cZXvbSsTdSGy2Uf72i19TUFpKfUkRTx4+4O4jfzIT0+noHibpoR/DM6uU
50QQqo6PWnWsCII34kUGYJ+6onJ2DjbJSYklOiaJgNhMBgb7SI1PITU5nvjkTOrSmlWFasb/1hek
VTdRkBdGdnodxlrtnuk2IY/uM752VoaFoXbV6mknPS2F7JJSgvyDyS2swu1aV4HnAealswBtt7Tx
8JsHFNV3UFtSSFBUIlmpuZSVleLjH02HaYLY+HDu3f6a7MIiqkriSMuvoSWrkaLiHCITksgrLKYm
rQHr7CrdmTXU1avKfEI+MHMZvTW1TC5q93H2aa9vorWxlZn5bVpqCxmaWaK7NhufgGCqeyZZXxkj
4P5dQjIrWJqzUNrcp+fRWlNKY1MjAcGBFLT0szTRje/9h1S2jTI92IV5coOJtmISSw1MdNVR1zWB
qaWCfqudztpc/AIiMHZ20lrbiVsF8Mr0WBLU8bWqijXdU0fD4Bx7y+MY20aYGxtgwDzLeE+n/vXI
qow4krNK6Gys5ME9X/IajNRX5BEUGk99bQVPbt8jJrcR+2wvd3yDVbnHqG7t0b9YOdJnoL2rndTo
APyCYmlr66ar3cyidYTuvkls5gG1P4x0tbTRqszk4po6nhrVMoYO+rr6iI8Ipqp9iJqCZHIra+lu
NbG2NE54sL86xpsY6WkkNquISVO7vj9quyeY7OtgQL/1cEqLMhgVFfWYRxcZ6WphbGmVkVYjRkMj
oUEBlFUa6GmtJCA0BfOwMgJJqVgsJmIDQyhQ5WqpaGTbc8poW5EyXg8oVMbZuTZGRKA/HaNTtJdn
q/M0HWOLge7uaeWddylNjyIwJIR28wgdNS04Dg9oL8lQ6ZRZaTcQEx5EbrmBke4G4nJKmRg04qPK
Xt87qfZ5O4NjciVN8E68yACcsr97FpCdWw6czh36+3pZsDuwDbQQ/OgR8ZnNHO4fsrk2z9DwhN7K
X1tZYGZhjUPXEcuWbsITsrh4RMDjPsCtKqtj1w52lef64hS9A8PMWfqISshk7+K24vEBlqEBVdFY
OT05Ykitd3b97KGv8eEBphc2ONhaZWjQjPPwEOemnanZRWUktG/LO+nr7cW+e8iJ6+w+s1u1TB07
DnZVWYXXw9GhOuZe9hm/F+X4EIf6DV8Jzw758RE0m+bOJ7wdHLn3kK9SC8K7gRcZgOdxSmdFAckJ
+cw9/Qj1Dzihu66a4fl/vLMGmmoZsMn334XXyLGb5aWVyx+iFwRBeAH+/+3ZT0vTARzHcR+39Aw8
9GyCLh26dxOj6BCUyBj4Z6tWbLh+v2E3zQydzvfrBR/E4W/D0/cNEwAAECQAACBIAABAkAAAgCAB
AABBAgAAggQAAAQJAAAIEgAAECQAACBIAABAkAAAgCABAABBAgAAggQAAAQJAAAIepYBcHl5efUb
AHCd8VY+qwA4PT3d/EPz+dzMzMxu2Hgrz87Orq7n7Z58ACyXy83fLhYLMzMzu2HjrbzLV+ZPPgAA
gPsnAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIE
AAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAg
AQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAg
SAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAA
CBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIA
AIIEAAAECQAACBIAABAkAAAgSAAAQJAAAIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAgSAAAQJAA
AIAgAQAAQQIAAIIEAAAECQAACBIAABAkAAAg6NEDYPwJAGzXcrl83ACYzWbr1WplZmZmW9xisVif
nJw8TgBcXFxsPnwymZiZmdkWN97f6XS6/QD4szEErnvdzMzMHm7j/f3bDX7wADAzM7OnNwFgZmYW
nAAwMzMLTgCYmZkFJwDMzMyCEwBmZmbB3UsA/Bje5Oew8c3MzMzs6e/X4vt6ev6fAXA0PPTxeLae
DAUxVoSZmZntxqbDvkznm1t+5wB4/3U+bLapBzMzM9utjcd/vOP/HAAHBy9fn6/WwwOrzUNmZma2
uzv+tl6/O/x0ewDs7794e/jh81ALR5tiMDMzs93dePxfvX5zewAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
ALA79vZ+A0GHoc/TK7u9AAAAAElFTkSuQmCC</Preview>
  <Form>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</Form>
  <Code><![CDATA[#region Control Helper Functions
Function Connect-Exchange
{
	
	param (
		[Parameter(Mandatory = $true)]
		[string]$URL = "ex2016srv1.exchangeserverpro.net"
	)
	
	$Credentials = Get-Credential -Message "Enter your Exchange admin credentials to connect to on-premise exchange"
	
	$ExOPSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri http://$URL/PowerShell/ -Authentication Kerberos -Credential $Credentials
	
	Import-PSSession $ExOPSession
	
}

function Toogle-LicenseStatus
{
	If ($null -eq $Licenses2Add)
	{
		$checkedlistboxDISTROo365groups.Enabled = $false
		$comboboxsharedmaiboxpermission.Enabled = $false
		$comboboxsharedmailboxautomap.Enabled = $false
		$labelSecurityGroups.Text = "Please connect to Office 365 in the General tab to add your user to Groups.
#If no license is selected for your user, this will remain disabled"
		$checkedlistboxsharedmailboxes.Enabled = $false
		$labelsharedmailboxes.Text = "Please connect to Office 365 in the General tab to add your user to Shared Mailboxes.
#If no license is selected for your user, this will remain disabled"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
	Else
	{
		$checkedlistboxDISTROo365groups.Enabled = $true
		$comboboxsharedmaiboxpermission.Enabled = $true
		$comboboxsharedmailboxautomap.Enabled = $true
		$labelO365Groups.Text = "Please select any Mail Enabled groups to add your user to"
		$checkedlistboxsharedmailboxes.Enabled = $true
		$labelsharedmailboxes.Text = "Please select any Shared Mailbox you want your user to have access to. The permission level and automapping you set will apply to all Shared Mailboxes you select"
		If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($Licenses2Add.Count -ge 1))
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'LightCoral'
				
			}
			Else
			{
				$labelCountryCode.Text = "*Country Code"
				$labelCountryCode.ForeColor = 'Firebrick'
				
			}
			$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
			If ($null -eq $CountryCode)
			{
				$comboboxO365countrycode.SelectedItem = "US"
			}
			Else
			{
				$comboboxO365countrycode.SelectedItem = $CountryCode
			}
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'White'
			}
			Else
			{
				$labelCountryCode.Text = "Country Code"
				$labelCountryCode.ForeColor = 'Black'
			}
		}
	}
}

function Update-ListBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ListBox or CheckedListBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ListBox control.
	
	.PARAMETER ListBox
		The ListBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ListBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ListBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ListBox $ListBox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ListBox $listBox1 "Red" -Append
		Update-ListBox $listBox1 "White" -Append
		Update-ListBox $listBox1 "Blue" -Append
	
	.EXAMPLE
		Update-ListBox $listBox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ListBox]$ListBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$listBox.Items.Clear()
	}
	
	if ($Items -is [System.Windows.Forms.ListBox+ObjectCollection])
	{
		$listBox.Items.AddRange($Items)
	}
	elseif ($Items -is [Array])
	{
		$listBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$listBox.Items.Add($obj)
		}
		$listBox.EndUpdate()
	}
	else
	{
		$listBox.Items.Add($Items)
	}
	
	$listBox.DisplayMember = $DisplayMember
}

function Update-ComboBox
{
<#
	.SYNOPSIS
		This functions helps you load items into a ComboBox.
	
	.DESCRIPTION
		Use this function to dynamically load items into the ComboBox control.
	
	.PARAMETER ComboBox
		The ComboBox control you want to add items to.
	
	.PARAMETER Items
		The object or objects you wish to load into the ComboBox's Items collection.
	
	.PARAMETER DisplayMember
		Indicates the property to display for the items in this control.
	
	.PARAMETER Append
		Adds the item(s) to the ComboBox without clearing the Items collection.
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red", "White", "Blue"
	
	.EXAMPLE
		Update-ComboBox $combobox1 "Red" -Append
		Update-ComboBox $combobox1 "White" -Append
		Update-ComboBox $combobox1 "Blue" -Append
	
	.EXAMPLE
		Update-ComboBox $combobox1 (Get-Process) "ProcessName"
	
	.NOTES
		Additional information about the function.
#>
	
	param
	(
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		[System.Windows.Forms.ComboBox]$ComboBox,
		[Parameter(Mandatory = $true)]
		[ValidateNotNull()]
		$Items,
		[Parameter(Mandatory = $false)]
		[string]$DisplayMember,
		[switch]$Append
	)
	
	if (-not $Append)
	{
		$ComboBox.Items.Clear()
	}
	
	if ($Items -is [Object[]])
	{
		$ComboBox.Items.AddRange($Items)
	}
	elseif ($Items -is [System.Collections.IEnumerable])
	{
		$ComboBox.BeginUpdate()
		foreach ($obj in $Items)
		{
			$ComboBox.Items.Add($obj)
		}
		$ComboBox.EndUpdate()
	}
	else
	{
		$ComboBox.Items.Add($Items)
	}
	
	$ComboBox.DisplayMember = $DisplayMember
}

function Get-DictionaryPassword
{
	param
	(
		
		[switch]$O365
	)
	$Dictionary = @(
		"Honda";
		"Staple";
		"Battery";
		"Civic";
		"Chicago";
		"Winter";
		"Cubs";
		"Bears";
		"Snow";
		"Train";
		"Shoes";
		"Blue";
		"Bike";
		"Ring";
		"Watch";
		"Computer";
		"Neck";
		"Laptop";
		"Monitor";
		"Toilet";
		"Baseball";
		"Football";
		"Soccer";
		"Phone";
		"Carbondale";
		"Saluki";
		"Swim";
		"Lake";
		"Puppy";
		"Watch";
		"Royals";
		"Basketball";
		"Letter";
		"Paper";
		"Sticker";
		"Kitten";
		"Marker";
		"Highway";
		"Wire";
		"Keyboard";
		"Frisbee";
		"Disc";
		"Hawk";
		"West";
		"North";
		"East";
		"South";
		"Water";
		"Ice";
		"Dirt";
		"Taco";
		"Mouse";
		"Deer";
		"Speaker";
		"Hand";
		"Green";
		"Purple";
		"Pink";
		"Boat";
		"Toilet";
		"Sting";
		"Fish";
		"Bee";
		"White";
		"Grey";
		"Shoes";
		"Carpet";
		"Bed";
		"Pillow";
		"Sears";
		"Mustard";
		"Relish";
		"Ketchup";
		"Milk";
		"Apple";
		"Orange";
		"Flower";
		"Lotion";
		"Plane";
		"Desert";
		"Sand";
		"Beach";
		"Clouds";
		"Wagon";
		"Hair";
		"Internet";
		"Track";
		"Golf";
		"Sledding";
		"Market";
		"Window";
		"Door";
		"Deck";
		"Cards";
		"Shelf";
		"Santa";
		"Tack";
		"Building";
		"Tennis";
		"Power";
		"Sox";
		"Wrigley";
		"Tea";
		"Juice";
		"Plant";
		"Geneva";
		"City";
		"Kansas";
		"Missouri";
		"Midwest";
		"Great";
		"Box";
		"Crane";
		"Michigan";
		"Illinois";
		"Garbage";
		"Cougars";
		"Route";
		"Bridge";
		"Mountain";
		"Message";
		"Fire";
		"Taxi";
		"Bus";
		"Color";
		"Sharpie";
		"Ball";
		"Square";
		"River";
		"Navy";
		"Pier";
		"Grant";
		"Park";
		"Lincoln";
		"President";
		"Wrigley";
		"Soldier";
		"Forest";
		"Bulldog";
		"Police";
		"Taco";
		"Deep";
		"Dish";
		"Pizza";
		"Fire";
		"Ice";
		"Lion";
		"World";
		"Shoe";
		"Ant";
		"Bug";
		"Hair";
		"Beard";
		"Light";
		"Wave";
		"Field";
		"Toll";
		"Tax";
		"Money";
		"Bill";
		"Pot";
		"Pan"
	)
	If ($O365 -eq $True)
	{
		$word1 = (Get-Random $Dictionary)
		$Num = Get-random -Maximum 99 -Minimum 0
		$WChar = @(
			"!"
			"@"
			"$"
			"%"
			"&"
			"?"
			"#"
		)
		$Wildchar = Get-random $WChar
		
		$Word1 + "-" + $Num + $WildChar
	}
	Else
	{
		$word1 = (Get-Random $Dictionary)
		
		$word2 = (Get-Random $Dictionary | Where-Object { $_ -ne $word1 })
		
		$Word3 = (Get-Random $Dictionary | Where-Object { ($_ -ne $word1) -and ($_ -ne $word2) })
		
		$Num = Get-random -Maximum 99 -Minimum 0
		
		$Word1 + "-" + $word2 + "-" + $word3 + $Num
	}
	
	
}

function Reset-Form
{
	###########################
	#                         #
	#  ACTIVE DIRECTORY USER  #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Active Directory'
	$textboxFirstName.Text = ""
	$textboxInitials.Text = ""
	$textboxLastName.Text = ""
	$textboxDisplayName.Text = ""
	
	$ADDescriptionReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescriptionReset -ne 1)
	{
		$textboxDescription.Text = ""
	}
	
	$ADOfficeReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOfficeReset -ne 1)
	{
		$textboxoffice.Text = ""
	}
	
	$textboxPasswordGen.Text = ""
	$maskedtextboxpassword.Text = ""
	$textboxConfirmPassword.Text = ""
	$textboxTelephone.Text = ""
	$textboxEmail.Text = ""
	$textboxWebPage.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Active Directory'
	$textboxUserLogonName.Text = ""
	$textboxSamAccount.Text = ""
	$checkboxAccountIsDisabled.CheckState = 'Unchecked'
	$checkboxUserMustChangePasswo.CheckState = 'Unchecked'
	$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	$comboboxOUTree.SelectedText = ""
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Active Directory'
	$textboxStreet.Text = ""
	$textboxPOBox.Text = ""
	
	$ADCityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADCityReset -ne 1)
	{
		$textboxcity.Text = ""
	}
	$ADStateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADStateReset -ne 1)
	{
		$textboxstate.Text = ""
	}
	
	$ADZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADZip -ErrorAction SilentlyContinue).ADZip
	If ($ADZipReset -ne 1)
	{
		$textboxzipcode.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Groups Page
	add-logs -text 'LOG: Resetting forms on Groups Page for Active Directory'
	for ($i = 0; $i -lt $checkedlistboxGroups.Items.Count; $i++)
	{
		
		$checkedlistboxGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Organization Page
	add-logs -text 'LOG: Resetting forms on Organization Page for Active Directory'
	$textboxjobtitle.Text = ""
	
	$ADDepartmentReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartmentReset -ne 1)
	{
		$textboxDepartment.Text = ""
	}
	
	$ADCompanyReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompanyReset -ne 1)
	{
		$textboxCompany.Text = ""
	}
	add-logs -text 'LOG: Done'
	
	#Profile Page
	add-logs -text 'LOG: Resetting forms on Profile Page for Active Directory'
	$textboxprofilepath.Text = ""
	
	$ADLogonScriptReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name ADLogonScript -ErrorAction SilentlyContinue).ADLogonScript
	If ($ADLogonScriptReset -ne 1)
	{
		$textboxlogonscript.Text = ""
	}
	

	
	$comboboxDriveLetter.SelectedIndex = 0
	$textboxhomedirectory.Text = ""
	add-logs -text 'LOG: Done'
	
	#Attributes Page
	add-logs -text 'LOG: Resetting forms on Attributes Page for Active Directory'
	$textboxproxyaddress.Text = ""
	$textboxEmployeeID.Text = ""
	$textboxemployeenumber.Text = ""
	$textboxemployeeType.Text = ""
	add-logs -text 'LOG: Done'
	
	
	###########################
	#                         #
	#     OFFICE 365 USER     #
	#                         #
	###########################
	
	#General Page
	add-logs -text 'LOG: Resetting forms on General Page for Office 365'
	$textboxO365FirstName.Text = ""
	$textboxO365LastName.Text = ""
	$textboxO365DisplayName.Text = ""
	$textboxo365passwordgen.Text = ""
	$maskedtextboxo365password.Text = ""
	$textboxo365confirmpassword.Text = ""
	add-logs -text 'LOG: Done'
	
	#Account Page
	add-logs -text 'LOG: Resetting forms on Account Page for Office 365'
	$checkboxRunADSync.Checked = $false
	$textboxO365UPN.Text = ""
	$textboxO365EmailAddress.Text = ""
	$textboxo365proxyaddresses.Text = ""
	$checkboxo365usermustchangepassword.Checked = $false
	$checkboxO365PasswordNeverExpires.Checked = $false
	$checkboxBlockCred.Checked = $false
	$comboboxMFA.SelectedItem = "False"
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	add-logs -text 'LOG: Done'
	
	#Address Page
	add-logs -text 'LOG: Resetting forms on Address Page for Office 365'
	$textboxO365street.Text = ""

	$O365CityReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365CityReset -ne 1)
	{
		$textboxo365city.Text = ""
	}
	
	$O365StateReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365StateReset -ne 1)
	{
		$textboxo365state.Text = ""
	}
	
	$O365ZipReset = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\Reset' | Get-ItemProperty -Name O365Zip -ErrorAction SilentlyContinue).O365Zip
	If ($O365ZipReset -ne 1)
	{
		$textboxo365zip.Text = ""
	}
	
	
	add-logs -text 'LOG: Done'
	
	#Mail Groups Page
	add-logs -text 'LOG: Resetting forms on Mail Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxDISTROo365groups.Items.Count; $i++)
	{
		
		$checkedlistboxDISTROo365groups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Security Groups Page
	add-logs -text 'LOG: Resetting forms on Security Groups Page for Office 365'
	for ($i = 0; $i -lt $checkedlistboxO365SecurityGroups.Items.Count; $i++)
	{
		
		$checkedlistboxO365SecurityGroups.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
	
	#Shared Mailboxes Page
	add-logs -text 'LOG: Resetting forms on Shared Mailboxes Page for Office 365'
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	for ($i = 0; $i -lt $checkedlistboxsharedmailboxes.Items.Count; $i++)
	{
		
		$checkedlistboxsharedmailboxes.SetItemCheckState($i, 'Unchecked')
		
	}
	add-logs -text 'LOG: Done'
}

function Update-DisplayNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatDisplayName -ErrorAction SilentlyContinue).UserFormatDisplayName
		#Create an array that we will use for formatting
		$DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatDisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text
			}
			ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
			{
				$DisplayNameFormatString += $textboxInitials.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$DisplayNameFormatString += $space
			}
			ElseIf ($_ -eq "EmployeeID")
			{
				$DisplayNameFormatString += $textboxEmployeeID.text
			}
			ElseIf ($_ -eq "EmployeeNumber")
			{
				$DisplayNameFormatString += $textboxemployeenumber.text
			}
			ELseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.text
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$DisplayNameFormatString += $textboxEmail.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$DisplayNameFormatString += $textboxFirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$DisplayNameFormatString += $textboxLastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "SamAccountName")
			{
				$DisplayNameFormatString += $textboxSamAccount.Text
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$EmailFormatString += $comboboxDomains.SelectedItem
			}
			Else
			{
				$DisplayNameFormatString += $_
			}
			
			$textboxDisplayName.Text = [String]::Join('', $DisplayNameFormatString)
			
		}
		
		
	}
}

function Update-EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatEmail -ErrorAction SilentlyContinue).UserFormatEmail
		#Create an array that we will use for formatting
		$EmailFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$EmailFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$EmailFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$EmailFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$EmailFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$EmailFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$EmailFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$EmailFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$EmailFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$EmailFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$EmailFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$EmailFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$EmailFormatString += $_
				}
				
			}
			$textboxEmail.Text = [String]::Join('', $EmailFormatString)
		}
	}
}

function Update-SamAccountNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatSamAccountName -ErrorAction SilentlyContinue).UserFormatSamAccountName
		#Create an array that we will use for formatting
		$SamAccountNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$SamAccountNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$SamAccountNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$SamAccountNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$SamAccountNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$SamAccountNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$SamAccountNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$SamAccountNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$SamAccountNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$SamAccountNameFormatString += $textboxSamAccount.Text
				}
				Else
				{
					$SamAccountNameFormatString += $_
				}
				
			}
			$textboxSamAccount.Text = [String]::Join('', $SamAccountNameFormatString)
		}
	}
}

function Update-UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatUserPrincipalName -ErrorAction SilentlyContinue).UserFormatUserPrincipalName
		#Create an array that we will use for formatting
		$UserPrincipalNameFormatString = @()
		If (($null -ne $config) -and ($config -ne ""))
		{
			
			
			$config -split "%" | ForEach-Object {
				If ($_ -eq "FirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text
				}
				ElseIf ($_ -eq "LastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text
				}
				ElseIf (($_ -eq "Initial") -or ($_ -eq "Initials"))
				{
					$UserPrincipalNameFormatString += $textboxInitials.Text
				}
				ElseIf ($_ -like " ")
				{
					$space = " "
					$UserPrincipalNameFormatString += $space
				}
				ElseIf ($_ -eq "EmployeeID")
				{
					$UserPrincipalNameFormatString += $textboxEmployeeID.text
				}
				ElseIf ($_ -eq "EmployeeNumber")
				{
					$UserPrincipalNameFormatString += $textboxemployeenumber.text
				}
				ELseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.text
				}
				ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
				{
					$UserPrincipalNameFormatString += $textboxUserLogonName.text
				}
				ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
				{
					$UserPrincipalNameFormatString += $textboxEmail.text
				}
				ElseIf ($_ -eq "FirstLetterFirstName")
				{
					$UserPrincipalNameFormatString += $textboxFirstName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "FirstLetterLastName")
				{
					$UserPrincipalNameFormatString += $textboxLastName.Text.Substring(0, 1)
				}
				ElseIf ($_ -eq "SamAccountName")
				{
					$UserPrincipalNameFormatString += $textboxSamAccount.Text
				}
				ElseIf ($_ -eq "UserPrincipalNameDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				ElseIf ($_ -eq "UPNDomain")
				{
					$EmailFormatString += $comboboxDomains.SelectedItem
				}
				Else
				{
					$UserPrincipalNameFormatString += $_
				}
				
			}
			$textboxUserLogonName.Text = [String]::Join('', $UserPrincipalNameFormatString)
		}
	}
}

function Set-DarkMode
{
	$labelCountryCode.ForeColor = 'White'
	$contextmenustrip1.BackColor = "44,44,44"
	$contextmenustrip1.ForeColor = 'White'
	$MainForm.BackColor = "44,44,44"
	$MainForm.ForeColor = 'White'
	
	$labelLogFile.BackColor = "44,44,44"
	$labelLogFile.ForeColor = 'White'
	
	$labelconnectionstatus.ForeColor = 'LightCoral'
	
	
	$richtextboxregistry.ForeColor = 'White'
	$richtextboxregistry.BackColor = "44,44,44"
	
	$groupboxStatus.ForeColor = 'White'
	
	$groupboxADSync.ForeColor = 'White'
	$groupboxHybrid.ForeColor = 'White'
	$groupboxExchangeSetup.ForeColor = 'White'
	
	
	$tabpageSettings.BackColor = "44,44,44"
	$tabpageSettings.ForeColor = 'White'
	$groupboxADGroups.ForeColor = 'White'
	
	$menustrip1.BackColor = "44,44,44"
	$menustrip1.ForeColor = 'White'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "44,44,44"
					$_.ForeColor = 'White'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'White'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "44,44,44"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'White'
	$copyOffice365UserToolStripMenuItem.BackColor = "44,44,44"
	
	
	$groupboxInformation.ForeColor = 'White'
	$linklabelTimOlvera.LinkColor = 'DeepSkyBlue'
	$linklabelGitHub.LinkColor = 'DeepSkyBlue'
	$labelChangelog.ForeColor = 'DeepSkyBlue'
	
	$console.BackColor = "35,35,35"
	$console.ForeColor = 'White'
	
	$buttonExit.ForeColor = "white"
	$buttonExit.BackColor = "35,35,35"
	
	$buttonCreateUser.ForeColor = "white"
	$buttonCreateUser.BackColor = "35,35,35"
	
	$groupboxADUser.ForeColor = 'White'
	$groupboxADUser.BackColor = "44,44,44"
	
	$groupbox2FA.ForeColor = 'White'
	$groupboxOffice365User.ForeColor = 'White'
	
	$tabcontrolUserProperties.ForeColor = 'White'
	$tabcontrolUserProperties.BackColor = "44,44,44"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
		

	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'White'
		$_.BackColor = "44,44,44"
	}
	
	#GENERAL PAGE
	$groupboxADSync.ForeColor = 'White'
	$panel1.BackColor = "35,35,35"
	$labelDisplayName.ForeColor = 'LightCoral'
	$labelPassword.ForeColor = 'LightCoral'
	$labelConfirmPassword.ForeColor = 'LightCoral'

	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
				$_.BackColor = "35,35,35"
				$_.ForeColor = 'White'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'White'
	$buttonGeneratePassword.BackColor = '44,44,44'
	$buttonClear.ForeColor = 'White'
	$buttonClear.BackColor = '44,44,44'
	
	$textboxPasswordGen.ForeColor = 'White'
	$textboxPasswordGen.BackColor = '35,35,35'
	$maskedtextboxpassword.ForeColor = 'White'
	$maskedtextboxpassword.BackColor = '44,44,44'
	$textboxConfirmPassword.BackColor = '44,44,44'
	$textboxConfirmPassword.ForeColor = 'White'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Flat'
	$comboboxDomains.ForeColor = 'White'
	$comboboxDomains.BackColor = "35,35,35"
	
	$comboboxOUTree.FlatStyle = 'Flat'
	$comboboxOUTree.ForeColor = 'White'
	$comboboxOUTree.BackColor = "35,35,35"
	
	$panel2.ForeColor = 'White'
	$Panel2.BackColor = "35,35,35"
	
	$datetimepickerDATE.ForeColor = 'White'
	$datetimepickerDATE.CalendarMonthBackground = "35,35,35"
	
	$datetimepickerTIME.ForeColor = 'White'
	$datetimepickerTIME.BackColor = "35,35,35"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "44,44,44"
	
	$groupboxaccountexpires.ForeColor = 'White'
	$labelUserLogonNameUPN.ForeColor = 'LightCoral'
	$labelUserLogonNamepreWind.ForeColor = 'White'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'White'
	$checkedlistboxGroups.BackColor = "35,35,35"
	$textboxPOSIX.ForeColor = 'White'
	$textboxPOSIX.BackColor = "44,44,44"
	
	$textboxSearchGroups.ForeColor = 'White'
	$textboxSearchGroups.BackColor = "35,35,35"
	
	$comboboxPrimaryGroup.FlatStyle = 'Flat'
	$comboboxPrimaryGroup.ForeColor = 'White'
	$comboboxPrimaryGroup.BackColor = "35,35,35"
	
	$groupboxPrimaryGroup.ForeColor = 'White'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'White'
	$groupboxHomeFolder.ForeColor = 'White'
	$comboboxDriveLetter.FlatStyle = 'Flat'
	$comboboxDriveLetter.ForeColor = 'White'
	$comboboxDriveLetter.BackColor = "35,35,35"
	$textboxhomedirectory.ForeColor = 'White'
	$textboxhomedirectory.BackColor = "35,35,35"
	$textboxprofilepath.ForeColor = 'White'
	$textboxprofilepath.BackColor = "35,35,35"
	$textboxlogonscript.ForeColor = 'White'
	$textboxlogonscript.BackColor = "35,35,35"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "44,44,44"
	$tabcontrolO365.ForeColor = 'White'
	$textboxADSyncServer.ForeColor = 'White'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365userpassword.ForeColor = 'LightCoral'
	$labelO365userconfirmpassword.ForeColor = 'LightCoral'
	$labelO365DisplayName.ForeColor = 'LightCoral'
	$tabpageO365General.BackColor = "44,44,44"
	$groupboxADSync.ForeColor = 'White'
	$textboxADSyncServer.BackColor = "35,35,35"
	$groupboxNoAdSync.ForeColor = 'White'
	$comboboxO365Licenses.FlatStyle = 'Flat'
	$comboboxO365Licenses.BackColor = "35,35,35"
	$comboboxO365Licenses.ForeColor = 'White'
	$panel3.ForeColor = 'White'
	$panel3.BackColor = "35,35,35"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$textboxo365passwordgen.BackColor = "44,44,44"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Lightcoral'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'White'
	$tabpageO365Account.BackColor = "44,44,44"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'LightCoral'
	$panel4.ForeColor = 'White'
	$panel4.BackColor = "35,35,35"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{

			$_.ForeColor = 'White'
			
		}
	}
	$tabpageO365Address.BackColor = "44,44,44"
	$tabpageO365Address.ForeColor = 'White'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'White'
	$tabpageO365Groups.BackColor = "44,44,44"
	$labelO365Groups.ForeColor = 'White'
	$labelO365Groups.BackColor = "44,44,44"
	$checkedlistboxDISTROo365groups.ForeColor = 'White'
	$checkedlistboxDISTROo365groups.BackColor = "35,35,35"
	$labelSearch.ForeColor = 'White'
	$textboxO365MailGroups.ForeColor = 'White'
	$textboxO365MailGroups.BackColor = "35,35,35"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'White'
	$labelSecurityGroups.BackColor = "44,44,44"
	$checkedlistboxO365SecurityGroups.ForeColor = 'White'
	$checkedlistboxO365SecurityGroups.BackColor = "35,35,35"
	$labelSearchGroups2.ForeColor = 'White'
	$labelSearchGroups2.BackColor = "44,44,44"
	$textboxSearchO365SecurityGroups.ForeColor = 'White'
	$textboxSearchO365SecurityGroups.BackColor = "35,35,35"
	$tabpagesecurityGroups.BackColor = "44,44,44"
	$tabpagesecurityGroups.ForeColor = 'White'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'White'
	$labelsharedmailboxes.BackColor = "44,44,44"
	$tabpageo365shared.ForeColor = 'White'
	$tabpageo365shared.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.ForeColor = 'White'
	$groupboxSettingsSharedMailbox.BackColor = "44,44,44"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "44,44,44"
			$_.ForeColor = 'White'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Flat'
			$_.BackColor = "35,35,35"
			$_.ForeColor = 'White'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'White'
	$checkedlistboxsharedmailboxes.BackColor = "35,35,35"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "White"
	$tabpageO365Attributes.BackColor = "44,44,44"
	$comboboxO365HidefromGAL.FlatStyle = 'Flat'
	$comboboxO365HidefromGAL.ForeColor = 'White'
	$comboboxO365HidefromGAL.BackColor = "35,35,35"
	
	$comboboxOWA.FlatStyle = 'Flat'
	$comboboxOWA.ForeColor = 'White'
	$comboboxOWA.BackColor = "35,35,35"
	
	$comboboxActiveSync.FlatStyle = 'Flat'
	$comboboxActiveSync.ForeColor = 'White'
	$comboboxActiveSync.BackColor = "35,35,35"
	
	
}

function Set-LightMode
{
	$labelCountryCode.ForeColor = 'Black'
	$contextmenustrip1.BackColor = "WhiteSmoke"
	$contextmenustrip1.ForeColor = 'Black'
	$MainForm.BackColor = "WhiteSmoke"
	$MainForm.ForeColor = 'Black'
	
	$labelLogFile.BackColor = "White"
	$labelLogFile.ForeColor = 'Black'
	
	$labelconnectionstatus.ForeColor = 'FireBrick'
	
	$richtextboxregistry.ForeColor = 'Black'
	$richtextboxregistry.BackColor = "White"
	
	$groupboxStatus.ForeColor = 'Black'
	
	$groupboxADSync.ForeColor = 'Black'
	$groupboxHybrid.ForeColor = 'Black'
	$groupboxExchangeSetup.ForeColor = 'Black'
	
	
	$tabpageSettings.BackColor = "White"
	$tabpageSettings.ForeColor = 'Black'
	$groupboxADGroups.ForeColor = 'Black'
	
	$menustrip1.BackColor = "White"
	$menustrip1.ForeColor = 'Black'
	
	$menustrip1.Items | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.DropDownItems | ForEach-Object{
				if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
				{
					$_.BackColor = "White"
					$_.ForeColor = 'Black'
					
				}
			}
		}
	}
	
	
	$fileToolStripMenuItem.DropDownItems | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ToolStripMenuItem])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	$copyActiveDirectoryUserToolStripMenuItem.ForeColor = 'Black'
	$copyActiveDirectoryUserToolStripMenuItem.BackColor = "White"
	
	$copyOffice365UserToolStripMenuItem.ForeColor = 'Black'
	$copyOffice365UserToolStripMenuItem.BackColor = "White"
	
	
	$groupboxInformation.ForeColor = 'Black'
	$linklabelTimOlvera.LinkColor = '0, 0, 255'
	$linklabelGitHub.LinkColor = '0, 0, 255'
	$labelChangelog.ForeColor = '0, 0, 255'
	
	$console.BackColor = "White"
	$console.ForeColor = 'Black'
	
	$buttonExit.ForeColor = "Black"
	$buttonExit.BackColor = "White"
	
	$buttonCreateUser.ForeColor = "Black"
	$buttonCreateUser.BackColor = "White"
	
	$groupboxADUser.ForeColor = 'Black'
	$groupboxADUser.BackColor = "White"
	
	$groupbox2FA.ForeColor = 'Black'
	$groupboxOffice365User.ForeColor = 'Black'
	
	$tabcontrolUserProperties.ForeColor = 'Black'
	$tabcontrolUserProperties.BackColor = "White"
	
	$tabcontrolUserProperties.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
		
		
	}
	$tabcontrol1.TabPages | ForEach-Object{
		$_.ForeColor = 'Black'
		$_.BackColor = "White"
	}
	
	#GENERAL PAGE
	$panel1.BackColor = "MenuBar"
	$labelDisplayName.ForeColor = 'FireBrick'
	$labelPassword.ForeColor = 'FireBrick'
	$labelConfirmPassword.ForeColor = 'FireBrick'
	
	$tabpageGeneral.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$buttonGeneratePassword.ForeColor = 'Black'
	$buttonGeneratePassword.BackColor = 'White'
	$buttonClear.ForeColor = 'Black'
	$buttonClear.BackColor = 'White'
	
	$textboxPasswordGen.ForeColor = 'Black'
	$textboxPasswordGen.BackColor = 'White'
	$maskedtextboxpassword.ForeColor = 'Black'
	$maskedtextboxpassword.BackColor = 'White'
	$textboxConfirmPassword.BackColor = 'White'
	$textboxConfirmPassword.ForeColor = 'Black'
	
	#ACCOUNT PAGE
	$tabpageAccount.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$comboboxDomains.FlatStyle = 'Standard'
	$comboboxDomains.ForeColor = 'Black'
	$comboboxDomains.BackColor = "Window"
	
	$comboboxOUTree.FlatStyle = 'Standard'
	$comboboxOUTree.ForeColor = 'Black'
	$comboboxOUTree.BackColor = "Window"
	
	$panel2.ForeColor = 'Black'
	$Panel2.BackColor = "MenuBar"
	
	$datetimepickerDATE.ForeColor = 'Black'
	$datetimepickerDATE.CalendarMonthBackground = "White"
	
	$datetimepickerTIME.ForeColor = 'Black'
	$datetimepickerTIME.BackColor = "White"
	
	$labelTimeLeft.ForeColor = 'LightGray'
	$textboxUPNDomain.BackColor = "White"
	
	$groupboxaccountexpires.ForeColor = 'Black'
	$labelUserLogonNameUPN.ForeColor = 'FireBrick'
	$labelUserLogonNamepreWind.ForeColor = 'Black'
	
	#ADDRESS PAGE
	
	$tabpageAddress.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#GROUPS PAGE
	$checkedlistboxGroups.ForeColor = 'Black'
	$checkedlistboxGroups.BackColor = "White"
	$textboxPOSIX.ForeColor = 'Black'
	$textboxPOSIX.BackColor = "White"
	
	$textboxSearchGroups.ForeColor = 'Black'
	$textboxSearchGroups.BackColor = "White"
	
	$comboboxPrimaryGroup.FlatStyle = 'Standard'
	$comboboxPrimaryGroup.ForeColor = 'Black'
	$comboboxPrimaryGroup.BackColor = "Window"
	
	$groupboxPrimaryGroup.ForeColor = 'Black'
	
	#ORGANIZATION PAGE
	$tabpageOrganization.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	#PROFILE PAGE
	$groupboxuserprofile.ForeColor = 'Black'
	$groupboxHomeFolder.ForeColor = 'Black'
	$comboboxDriveLetter.FlatStyle = 'Standard'
	$comboboxDriveLetter.ForeColor = 'Black'
	$comboboxDriveLetter.BackColor = "Window"
	$textboxhomedirectory.ForeColor = 'Black'
	$textboxhomedirectory.BackColor = "White"
	$textboxprofilepath.ForeColor = 'Black'
	$textboxprofilepath.BackColor = "White"
	$textboxlogonscript.ForeColor = 'Black'
	$textboxlogonscript.BackColor = "White"
	
	#ATTRIBUTES PAGE
	$tabpageattributes.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	
	
	
	#####OFFICE 365
	$tabcontrolO365.BackColor = "White"
	$tabcontrolO365.ForeColor = 'Black'
	$textboxADSyncServer.ForeColor = 'Black'
	#GENERAL PAGE
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365General.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365userpassword.ForeColor = 'FireBrick'
	$labelO365userconfirmpassword.ForeColor = 'FireBrick'
	$labelO365DisplayName.ForeColor = 'FireBrick'
	$tabpageO365General.BackColor = "White"
	$groupboxADSync.ForeColor = 'Black'
	$textboxADSyncServer.BackColor = "White"
	$groupboxNoAdSync.ForeColor = 'Black'
	$comboboxO365Licenses.FlatStyle = 'Standard'
	$comboboxO365Licenses.BackColor = "Window"
	$comboboxO365Licenses.ForeColor = 'Black'
	$panel3.ForeColor = 'Black'
	$panel3.BackColor = "MenuBar"
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Button])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$panel3.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$textboxo365passwordgen.BackColor = "White"
	If ($buttonConnectToOffice365.Text -eq "*Connect to Office 365")
	{
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
	}
	
	#ACCOUNT PAGE
	$tabpageO365Account.ForeColor = 'Black'
	$tabpageO365Account.BackColor = "White"
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Account.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.ComboBox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$labelO365UserPrincipalName.ForeColor = 'FireBrick'
	$panel4.ForeColor = 'Black'
	$panel4.BackColor = "MenuBar"
	
	
	#ADDRESS PAGE
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.TextBox])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			
			$_.ForeColor = 'Black'
			
		}
	}
	$tabpageO365Address.BackColor = "White"
	$tabpageO365Address.ForeColor = 'Black'
	
	
	#MAIL GROUPS PAGE
	$tabpageO365Groups.ForeColor = 'Black'
	$tabpageO365Groups.BackColor = "White"
	$labelO365Groups.ForeColor = 'Black'
	$labelO365Groups.BackColor = "White"
	$checkedlistboxDISTROo365groups.ForeColor = 'Black'
	$checkedlistboxDISTROo365groups.BackColor = "White"
	$labelSearch.ForeColor = 'Black'
	$textboxO365MailGroups.ForeColor = 'Black'
	$textboxO365MailGroups.BackColor = "White"
	
	
	#SECURITY GROUPS PAGE
	$labelSecurityGroups.ForeColor = 'Black'
	$labelSecurityGroups.BackColor = "White"
	$checkedlistboxO365SecurityGroups.ForeColor = 'Black'
	$checkedlistboxO365SecurityGroups.BackColor = "White"
	$labelSearchGroups2.ForeColor = 'Black'
	$labelSearchGroups2.BackColor = "White"
	$textboxSearchO365SecurityGroups.ForeColor = 'Black'
	$textboxSearchO365SecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.BackColor = "White"
	$tabpagesecurityGroups.ForeColor = 'Black'
	
	#SHARED MAILBOXES PAGE
	$labelsharedmailboxes.ForeColor = 'Black'
	$labelsharedmailboxes.BackColor = "White"
	$tabpageo365shared.ForeColor = 'Black'
	$tabpageo365shared.BackColor = "White"
	$groupboxSettingsSharedMailbox.ForeColor = 'Black'
	$groupboxSettingsSharedMailbox.BackColor = "White"
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Label])
		{
			$_.BackColor = "White"
			$_.ForeColor = 'Black'
			
		}
	}
	$groupboxSettingsSharedMailbox.Controls | ForEach-Object{
		if ($_ -is [System.Windows.Forms.Combobox])
		{
			$_.FlatStyle = 'Standard'
			$_.BackColor = "Window"
			$_.ForeColor = 'Black'
			
		}
	}
	$checkedlistboxsharedmailboxes.ForeColor = 'Black'
	$checkedlistboxsharedmailboxes.BackColor = "White"
	
	
	#ATTRIBUTES PAGE
	$tabpageO365Attributes.ForeColor = "Black"
	$tabpageO365Attributes.BackColor = "White"
	$comboboxO365HidefromGAL.FlatStyle = 'Standard'
	$comboboxO365HidefromGAL.ForeColor = 'Black'
	$comboboxO365HidefromGAL.BackColor = "Window"
	
	
	$comboboxOWA.FlatStyle = 'Standard'
	$comboboxOWA.ForeColor = 'Black'
	$comboboxOWA.BackColor = "Window"
	
	$comboboxActiveSync.FlatStyle = 'Standard'
	$comboboxActiveSync.ForeColor = 'Black'
	$comboboxActiveSync.BackColor = "Window"
	
}

function Copy-ADUserAttributes
{
	Add-Logs -text "LOG: Setting Description"
	$textboxDescription.Text = $UserTemplate.Description
	Add-Logs -text "LOG: Setting Office"
	$textboxoffice.Text = $UserTemplate.Office
	Add-Logs -text "LOG: Setting Office Phone"
	$textboxTelephone.Text = $UserTemplate.OfficePhone
	Add-Logs -text "LOG: Setting Email Address"
	$textboxEmail.Text = $UserTemplate.EmailAddress
	Add-Logs -text "LOG: Setting Home Page"
	$textboxWebPage.Text = $UserTemplate.HomePage
	
	Add-Logs -text "LOG: Changing the OU for the user to $((($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)")))"
	$comboboxOUTree.SelectedItem = (($UserTemplate.CanonicalName).TrimEnd("/$($UserTemplate.DisplayName)"))
	
	Add-Logs -text "LOG: Checking Password Never Expires status"
	If ($UserTemplate.PasswordNeverExpires -eq $true)
	{
		Add-Logs -text "LOG: Setting Password Never Expires to True"
		$checkboxPasswordNeverExpires.CheckState = 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting Password Never Expires to False"
		$checkboxPasswordNeverExpires.CheckState = 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change Ability"
	If ($UserTemplate.CannotChangePassword -eq $True)
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to True"
		$checkboxUserCannotChangePass.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Cannot Change Password to False"
		$checkboxUserCannotChangePass.CheckState -eq 'UnChecked'
	}
	
	Add-Logs -text "LOG: Checking Password Change statue"
	If ($UserTemplate.PasswordExpired -eq $True)
	{
		Add-Logs -text "LOG: Setting User Must Change Password to True"
		$checkboxUserMustChangePasswo.CheckState -eq 'Checked'
	}
	Else
	{
		Add-Logs -text "LOG: Setting User Must Change Password to False"
		$checkboxUserMustChangePasswo.CheckState -eq 'UnChecked'
	}
	Add-Logs -text "LOG: Setting Street Address"
	$textboxStreet.Text = $UserTemplate.StreetAddress
	Add-Logs -text "LOG: Setting PO Box"
	$textboxPOBox.Text = $UserTemplate.POBox
	Add-Logs -text "LOG: Setting City"
	$textboxcity.Text = $UserTemplate.City
	Add-Logs -text "LOG: Setting State"
	$textboxstate.Text = $UserTemplate.State
	Add-Logs -text "LOG: Setting Postal Code"
	$textboxzipcode.Text = $UserTemplate.PostalCode
	Add-Logs -text "LOG: Checking Group Memberships"
	$checkedlistboxGroups.CheckedItems = $null
	$CacheGroups = "$env:TEMP\MUCCacheGroups.txt"
	$click = 1
	($UserTemplate).MemberOf | ForEach-Object {
		$GName = (Get-ADGroup $_).name
		Add-Logs -text "LOG: Adding User to the Group: $GName"
		
		$GName | Out-File $CacheGroups -Append -Force -ErrorAction SilentlyContinue
		$checkedlistboxGroups.SelectedItem = $GName
		$index = $checkedlistboxGroups.SelectedIndex
		$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
	}
	$click = 0
	Add-Logs -text "LOG: Setting Job Title"
	$textboxjobtitle.text = $UserTemplate.Title
	Add-Logs -text "LOG: Setting Department"
	$textboxDepartment.Text = $UserTemplate.Department
	Add-Logs -text "LOG: Setting Company"
	$textboxCompany.Text = $UserTemplate.Company
	Add-Logs -text "LOG: Setting Profile Path"
	$textboxprofilepath.Text = $UserTemplate.ProfilePath
	Add-Logs -text "LOG: Setting Script Path"
	$textboxlogonscript.Text = $UserTemplate.ScriptPath
	Add-Logs -text "LOG: Setting Home Drive"
	$comboboxDriveLetter.SelectedItem = $UserTemplate.HomeDrive
	Add-Logs -text "LOG: Setting Home Directory"
	$textboxhomedirectory.Text = $UserTemplate.HomeDirectory
	Add-Logs -text "LOG: Setting Employee Type"
	$textboxemployeeType.Text = $UserTemplate.EmployeeType
	
	Add-Logs -text "LOG: Done"
	
	
}

function Copy-O365UserAttributes
{
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	
	If ($Licenses2Add.count -gt 0)
	{
		$Global:Licenses2Add = New-Object 'System.Collections.Generic.List[System.Object]'
	}
	
	$CopyUser = $CopyFromO365User_comboboxcopyuser
	add-logs -text "LOG: Copying attributes from $CopyUser"
	
	$UserObj = (Get-Msoluser -All | Where-Object { $_.DisplayName -eq $CopyUser }) | Select-Object -First 1
	
	add-logs -text "LOG: Getting the UPN Domain of $CopyUser"
	$UPNDomain = ($UserObj.userprincipalname).split('@') | Select-Object -Last 1
	add-logs -text "LOG: Setting the UPN Domain to $UPNDomain"
	$comboboxO365Domains.SelectedItem = "@"+$UPNDomain
	
	add-logs -text "LOG: Copying Country Code"
	$comboboxO365countrycode.SelectedText = ($UserObj).CountryCode
	add-logs -text "LOG: Checking MFA status of $CopyUser"
	If ($null -eq $UserObj.StrongAuthenticationRequirements.State)
	{
		add-logs -text "LOG: Setting MFA to False"
		$comboboxMFA.SelectedItem = "False"
	}
	Else
	{
		add-logs -text "LOG: Setting MFA to True"
		$comboboxMFA.SelectedItem = "True"
	}
	add-logs -text "LOG: Copying City"
	$textboxo365city.Text = ($UserObj).city
	add-logs -text "LOG: Copying State"
	$textboxo365state.Text = ($UserObj).state
	add-logs -text "LOG: Copying Street Address"
	$textboxO365street.Text = ($UserObj).streetaddress
	add-logs -text "LOG: Copying Postal Code"
	$textboxo365zip.Text = ($UserObj).postalcode
	
	If (($UserObj).PasswordNeverExpires -eq $true)
	{
		add-logs -text "LOG: Copying Password Never Expires Flag"
		$checkboxO365PasswordNeverExpires.CheckState = 'Checked'
	}
	
	If (($UserObj).BlockCredential -eq $True)
	{
		add-logs -text "LOG: Copying Disabled Account State"
		$checkboxBlockCred.CheckState = 'Checked'
	}
	

	
	add-logs -text "LOG: Getting all licenses assinged to $CopyUser"
	$currentlicenses = ($UserObj).Licenses.accountskuid
	foreach ($currentlicense in $currentlicenses)
	{
		$TenantSku = Get-MSOLAccountSku | Where-Object { $_.AccountSkuID -match $currentlicense }
		
		If ($TenantSku.ActiveUnits -ne $TenantSku.ConsumedUnits)
		{
			$lic = $currentlicense -split ":" | Select-Object -Last 1
			#lookup skus in hashtable and convert to friendly name
			$FriendlyName = $Sku.Item("$Lic")
			If ($null -eq $FriendlyName)
			{
				add-logs -text "LOG: Copying The License: $_"
				$obj = [PSCustomObject]@{
					'Name' = $lic
				}
				$Licenses2Add.Add($obj)
			}
			Else
			{
				add-logs -text "LOG: Copying The License: $FriendlyName"
				$obj = [PSCustomObject]@{
					'Name' = $FriendlyName
				}
				
				$Licenses2Add.Add($obj)
				
			}
		}
	}
	
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	Toogle-LicenseStatus
	
	add-logs -text "LOG: Checking Mail Group Membership for $CopyUser"
	Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:")})
		{
				If ($checkedlistboxDISTROo365groups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheDistroGroupsFile -Append -Force -ErrorAction SilentlyContinue
					add-logs -text "LOG: Adding User to the Distribution Group: $($_.DisplayName)"
					$checkedlistboxDISTROo365groups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxDISTROo365groups.SelectedIndex
					$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
				}
			}
		
		
	}
	Add-Logs -text "LOG: Getting all Security Groups $CopyUser is a Member of"
	Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | ForEach-Object {
		If (Get-MsolGroupMember -All -GroupObjectId $_.ObjectID | Where-Object { $_.EmailAddress -contains ($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:") })
		{
				If ($checkedlistboxO365SecurityGroups.Items -contains $_.DisplayName)
				{
					$_.DisplayName | Out-File $CacheSecurityGroupsFile -Append -Force -ErrorAction SilentlyContinue
				add-logs -text "LOG: Adding User to the Security Group: $($_.DisplayName)"
					$checkedlistboxO365SecurityGroups.SelectedItem = $($_.DisplayName)
					$index = $checkedlistboxO365SecurityGroups.SelectedIndex
					$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
				}
			}
			
			
		}
	
	
	
	$UserObjMailbox = Get-Mailbox (($UserObj.ProxyAddresses -cmatch 'SMTP:').trim("SMTP:"))
	Add-Logs -text "LOG: Gettings GAL status for User"
	If ($UserObjMailbox.HiddenFromAddressListsEnabled -eq $true)
	{
		Add-Logs -text "LOG: Hiding User from GAL: True"
		$comboboxO365HidefromGAL.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Hiding User from GAL: False"
		$comboboxO365HidefromGAL.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting Outlook on the Web (OWA) Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).OWAEnabled) -eq $True)
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): True"
		$comboboxOWA.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: Outlook on the Web (OWA): False"
		$comboboxOWA.SelectedItem = "False"
	}
	
	Add-Logs -text "LOG: Getting ActiveSync Status for user"
	If (((Get-CASMailbox (($UserObjMailbox).GUID).Guid).ActiveSync) -eq $True)
	{
		Add-Logs -text "LOG: ActiveSync: True"
		$comboboxActiveSync.SelectedItem = "True"
	}
	Else
	{
		Add-Logs -text "LOG: ActiveSync: False"
		$comboboxActiveSync.SelectedItem = "False"
	}
	
	add-logs -text "LOG: Done"
	
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

function License-MUCO365User
{
	$licenseforuser = @()
	#$Lookup = @()
	Add-Logs -text "LOG: Getting License selected for user"
	$Licenses = $Licenses2Add
	Add-Logs "LOG: We will be adding the licenses, $Licenses2Add"
	Add-Logs -text "LOG: Getting AccountSKU Domain"
	$LicenseDomain = ((((Get-MsolAccountSku).AccountSkuID) -split ":" | Select-Object -First 1) + ":").Trim()
	foreach ($License in $licenses)
	{
		Add-Logs -text "LOG: Looking up SKU for license"
		$Lookup = $Sku.keys | Where-Object { $Sku["$_"] -eq "$license" }
		Add-Logs "LOG: License lookup is $Lookup"
		If ((($Lookup | Measure-Object -Character).Characters) -lt 1)
		{
			Add-Logs -text "LOG: No SKU found during lookup"
			$BackSKU = "$LicenseDomain$License"
			Add-Logs -text "LOG: Checking if $BackSKU is already SKU"
			$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
			If ($CheckSku -ne $Null)
			{
				Add-Logs -text "LOG: Assigning $BackSKU to User"
				$licenseforuser += $CheckSku
			}
			Else
			{
				Add-Logs -text "WARN: Uknown license, could not assign $BackSKU"
				$ReLic = (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
				Add-Logs -text "WARN: Assigning $ReLic to user instead"
				$licenseforuser += (((Get-MsolAccountSku).AccountSkuID) | Select-Object -First 1)
			}
		}
		
		Else
		{
			Add-Logs -text "LOG: Found the SKU for the license"
			$Lookup | ForEach-Object {
				Add-Logs -text "LOG: Checking License $_"
				$BackSKU = "$LicenseDomain$_"
				Add-Logs -text "LOG: Looking up $BackSKU in tenant"
				Add-Logs -text "LOG: Verifying $BackSKU in tenant"
				$CheckSku = Get-MSOLAccountSku | Where-Object { $_.AccountSKuID -like "*$BackSKU*" } | Select-Object -ExpandProperty AccountSkuID
				If ($CheckSku -ne $Null)
				{
					Add-Logs -text "LOG: License Found, assigning $CheckSku to user"
					$licenseforuser += $CheckSku
				}
				Else
				{
					Add-Logs -text "WARN: $BackSKU was not found in tenant"
				}
			}
		}
		Add-Logs "LOG: OUTPUTTING $licenseforuser"
		$licenseforuser | Out-File "$env:TEMP\MUClicenseforuser.txt" -Force
		
	}
}

function New-MUCUser
{
		
	add-logs -text 'LOG: Converting password to SecureString'
	add-logs -text 'CMD: ConvertTo-SecureString -String $textboxConfirmPassword.Text'
	$PasswordSecureString = $textboxConfirmPassword.Text | ConvertTo-SecureString -AsPlainText -Force
	#Get disable account boolean
	add-logs -text 'LOG: Checking if account is disabled or enabled'
	$disabledaccount = ($checkboxAccountIsDisabled.checked)
	#If account should be disabled
	If ($disabledaccount -eq $true)
	{
		add-logs -text 'LOG: Account is disabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $false -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text -Fax $textboxFax.Text -MobilePhone $textboxMobile.Text -HomePhone $textboxHomePhone.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text 
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $Null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
	Else
	{
		add-logs -text 'LOG: Account is enabled'
		add-logs -text 'LOG: Creating user'
		Try
		{
			New-ADUser -Name ($textboxDisplayName.Text) -GivenName ($textboxFirstName.Text) -Surname ($textboxLastName.Text) -Initials ($textboxInitials.Text) -DisplayName ($textboxDisplayName.Text) -SamAccountName ($textboxSamAccount.text) -UserPrincipalName (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem)) -EmailAddress ($textboxEmail.Text) -Description ($textboxDescription.Text) -Office ($textboxoffice.text) -OfficePhone ($textboxTelephone.text) -HomePage ($textboxWebPage.text) -StreetAddress ($textboxStreet.text) -State ($textboxstate.text) -PostalCode ($textboxzipcode.Text) -City ($textboxcity.text) -Title ($textboxjobtitle.text) -Department ($textboxDepartment.text) -Company ($textboxCompany.text) -POBox ($textboxPOBox.text) -ProfilePath ($textboxprofilepath.text) -ScriptPath ($textboxlogonscript.text) -PasswordNeverExpires ($checkboxPasswordNeverExpires.Checked) -Enabled $true -CannotChangePassword ($checkboxUserCannotChangePass.checked) -ChangePasswordAtLogon ($checkboxUserMustChangePasswo.Checked) -AccountPassword $PasswordSecureString -HomeDrive $comboboxDriveLetter.SelectedItem -HomeDirectory $textboxhomedirectory.Text -Fax $textboxFax.Text -MobilePhone $textboxMobile.Text -HomePhone $textboxHomePhone.Text
		}
		Catch
		{
			add-logs -text "WARN: $_"
			$InfoMessage = $_
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		$User = Get-ADUser -Filter * -Properties * | Where-Object { ($_.Name -eq $textboxDisplayName.text) -and ($_.UserPrincipalName -eq (($textboxUserLogonName.Text) + ($comboboxDomains.SelectedItem))) }
		add-logs -text "LOG: User has been created"
		
		#Check if Account is set to expire at a specific time
		Add-Logs -text "LOG: Checking if User account expiration is set"
		If ($radiobuttonExpireOn.Checked -eq $true)
		{
			Add-Logs -text "LOG: User account expiration is set"
			$Timespan = (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToShortTimeString())
			Add-Logs -text "Account will be disabled on $Timespan"
			Set-ADAccountExpiration -Identity $textboxSamAccount.Text -DateTime $Timespan
			Add-Logs -text "LOG: Done"
		}
		Else
		{
			Add-Logs -text "LOG: User account expiration not set"
		}
		
		$Proxys = @()
		add-logs -text "LOG: Getting user proxy addresses to set"
		$Proxys += $textboxproxyaddress.Lines
		If ($Proxys -ne $Null)
		{
			foreach ($Proxy in $Proxys)
			{
				add-logs -text "LOG: Adding proxy addresses"
				add-logs -text "LOG: Getting user proxy addresses to set"
				add-logs -text "CMD: Set-ADUser $User -Add @{ proxyAddresses = $Proxy }"
				Set-ADUser $User -Add @{ proxyAddresses = $Proxy }
			}
		}
		Else
		{
			add-logs -text "LOG: No proxys were found to add"
		}
		add-logs -text "LOG: Done with Proxys"
		
		add-logs -text "LOG: Getting user employeeType attribute to set"
		If ($textboxemployeeType.text -ne "")
		{
			add-logs -text "LOG: Adding employeetype: $($textboxemployeeType.text) to user"
			Set-ADUser $User -Add @{ EmployeeType = $textboxemployeeType.text }
		}
		Else
		{
			add-logs -text "LOG: No employeeType to add"
		}
		add-logs -text "LOG: Done with employeeType"
		
		add-logs -text "LOG: Getting user employeeNumber attribute to set"
		If ($textboxemployeenumber.text -ne "")
		{
			add-logs -text "LOG: Adding employeeNumber: $($textboxemployeenumber.text) to user"
			Set-ADUser $User -EmployeeNumber $textboxemployeenumber.text
		}
		Else
		{
			add-logs -text "LOG: No employeeNumber to add"
		}
		add-logs -text "LOG: Done with employeeNumber"
		
		add-logs -text "LOG: Getting user employeeID attribute to set"
		If ($textboxEmployeeID.Text -ne "")
		{
			add-logs -text "LOG: Adding employeeID: $($textboxEmployeeID.text) to user"
			Set-ADUser $User -EmployeeID $textboxEmployeeID.text
		}
		Else
		{
			add-logs -text "LOG: No employeeID to add"
		}
		add-logs -text "LOG: Done with employeeID"
		
		#Find if user should be added to any groups
		add-logs -text 'LOG: Getting checked groups'
		$groups = $checkedlistboxGroups.CheckedItems
		If ($groups -ne $null)
		{
			add-logs -text 'LOG: Groups found'
			foreach ($group in $groups)
			{
				add-logs -text "LOG: Adding $User to $Group"
				add-logs -text "CMD: Add-ADGroupMember -Identity $Group -Members $User"
				Add-ADGroupMember -Identity $Group -Members $User
			}
		}
		Else
		{
			add-logs -text 'LOG: No Groups checked'
		}
		Add-Logs -text "LOG: Done"
		
		Add-Logs -text "LOG: Checking if primary group is set other than the default of Domain Users"
		If ($comboboxPrimaryGroup.Text -eq "Domain Users")
		{
			Add-Logs -text "LOG: Primary Group set to Domain Users"
		}
		Else
		{
			$PrimaryGroup = $comboboxPrimaryGroup.Text
			Add-Logs -text "LOG: Setting Primary Group to $PrimaryGroup"
			Add-Logs -text "CMD: `$Group = Get-ADGroup $PrimaryGroup -properties @('primaryGroupToken')"
			$Group = Get-ADGroup $PrimaryGroup -properties @("primaryGroupToken")
			Add-Logs -text "CMD: Set-ADUser -identity `$User -Replace @{ primarygroupid = `$group.primaryGroupToken }"
			Set-ADUser -identity $User.SamAccountName -Replace @{ primarygroupid = $group.primaryGroupToken }
		}
		Add-Logs -text "LOG: Done"
		
		add-logs -text 'LOG: Checking if user is being put in an specific OU'
		If ($comboboxOUTree.Text -ne $null)
		{
			
			add-logs -text 'LOG: Specific OU specified, moving user'
			$CanocicalName = $comboboxOUTree.Text
			add-logs -text "CMD: `$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { `$_.CanonicalName -eq $CanocicalName }).DistinguishedName"
			$OUTOMove = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Where-Object { $_.CanonicalName -eq $CanocicalName }).DistinguishedName
			add-logs -text "CMD: `$User | Move-ADObject -TargetPath $OUTOMove"
			$User | Move-ADObject -TargetPath $OUTOMove
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No OU Specified, skipping'
		}
	}
}

function New-MUCHybridUser
{
	add-logs -text 'LOG: Checking DirSync option'
	
	If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$SyncServer = $textboxADSyncServer.text
		add-logs -text 'LOG: DirSync Enabled'
		add-logs -text "LOG: Running DirSync on $SyncServer"
		add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
		Try
		{
			Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		add-logs -text 'LOG: Done'
	}
	Else
	{
		add-logs -text "WARN: ADSync Server text box is empty"
		Add-Type -AssemblyName System.Windows.Forms
		[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
	}
	
	Add-Logs -text "LOG: Checking exchange connection"
	$Check = Get-ExchangeServer
	If ($Check)
	{
		Add-Logs -text "INFO: Connected to Exchange - creating the user"
		$UPN = "$($textboxUserLogonName.Text)$($comboboxDomains.SelectedItem)"
		add-logs -text "CMD: Enable-RemoteMailbox -Identity $UPN -RemoteRoutingAddress $($textboxHybridRemoteRouting.Text)"
		Enable-RemoteMailbox -Identity $UPN -RemoteRoutingAddress $textboxHybridRemoteRouting.Text
	}
	Else
	{
		add-logs -text "WARN: Not connected to Exchange / no access to Exchange module - cannot create exchange mailbox"
	}
	
}

function New-MUCO365User
{
	add-logs -text 'LOG: Checking DirSync option'
	#If DirSync is enabled
	If ($checkboxRunADSync.CheckState -eq 'Checked')
	{
		If (((($textboxADSyncServer.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$SyncServer = $textboxADSyncServer.text
			add-logs -text 'LOG: DirSync Enabled'
			add-logs -text "LOG: Running DirSync on $SyncServer"
			add-logs -text "CMD: Invoke-Command -ComputerName $SyncServer -ScriptBlock { Start-ADSyncSyncCycle }"
			Try
			{
				Invoke-Command -ComputerName $textboxADSyncServer.text -ScriptBlock { Start-ADSyncSyncCycle } -ErrorAction Stop
			}
			Catch
			{
				add-logs -text "WARN: $_"
				Add-Type -AssemblyName System.Windows.Forms
				[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
			}
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text "WARN: ADSync Server text box is empty"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show("Please enter an AD Sync server", 'Warning', 'OK', 'Warning')
		}
	}
	#If DirSync is not enabled
	Else
	{
		add-logs -text "LOG: User is not being AD-Synced"
		
		add-logs -text 'LOG: All required parameters are valid'
		
		#Check to see if the user is being enabled upon creation or disabled
		
		#User is going to be disabled
		add-logs -text 'LOG: Checking enabled status of user'
		If ($checkboxBlockCred.Checked -eq $true)
		{
			#If user is going to be disabled
			add-logs -text 'LOG: User is Disabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $true -StreetAddress $textboxO365street.Text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
					
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
				
			}
		}
		Else
		{
			#User is going to be enabled upon creation
			add-logs -text 'LOG: User is Enabled'
			add-logs -text 'LOG: Creating user'
			If (($Licenses2Add) -and ($comboboxO365countrycode.SelectedItem -eq $null))
			{
				add-logs -text 'WARN: You must assign a country code to your user if you are assigning a license'
				$InfoMessage = 'You must assign a country code to your user if you are assigning a license'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				If ($Licenses2Add -ne $null)
				{
					License-MUCO365User
				}
				Try
				{
					add-logs -text 'LOG: Creating User'
					$User = New-MsolUser -FirstName $textboxO365FirstName.Text -LastName $textboxO365LastName.Text -DisplayName $textboxO365DisplayName.Text -Password $textboxo365confirmpassword.text -UserPrincipalName (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)) -UsageLocation $comboboxO365countrycode.SelectedItem -ForceChangePassword ($checkboxo365usermustchangepassword.Checked) -PasswordNeverExpires ($checkboxPasswordNeverExpires.checked) -BlockCredential $false -StreetAddress $textboxO365street.text -City $textboxo365city.Text -State $textboxo365state.Text -PostalCode $textboxo365zip.Text
					add-logs -text 'LOG: Done'
					
					Add-Logs -text 'LOG: Adding Licenses'
					$licenseforuser = Get-Content -Path "$env:TEMP\MUClicenseforuser.txt"
					$licenseforuser | ForEach-Object {
						Add-Logs -text "LOG: Adding $_"
						
						Set-MsolUserLicense -UserPrincipalName $User.UserPrincipalName -AddLicenses $_ -ErrorAction SilentlyContinue
					}
					Add-Logs -text 'LOG: Done'
				}
				Catch
				{
					add-logs -text "WARN: $_"
					$InfoMessage = $_
					$InfoTitle = "Warning"
					Show-MessageBox_psf
				}
				#Find if user should be added to any Security groups
				add-logs -text 'LOG: Getting checked Security groups'
				$groups = $checkedlistboxO365SecurityGroups.CheckedItems
				If ($groups -ne $null)
				{
					add-logs -text 'LOG: Security Groups found'
					$DN = ($User).DisplayName
					foreach ($group in $groups)
					{
						add-logs -text "LOG: Adding $DN to $Group"
						$GroupGuid = ((get-msolgroup -All | where-object { $_.displayname -eq $Group }).ObjectID).GUID
						$UserGUID = (($User).ObjectID).GUID
						add-logs -text "CMD: Add-MsolGroupMember -Identity $GroupGuid -Members $UserGUID"
						Add-MsolGroupMember -GroupObjectId $GroupGuid -GroupMemberObjectId $UserGUID
					}
				}
				Else
				{
					add-logs -text 'LOG: No Security Groups checked'
				}
				Add-Logs -text 'LOG: Done with Security Groups'
				
				#Check user licenses, if licensed create and wait for mailbox
				Add-Logs -text 'LOG: Checking if license was applied to the user'
				If ($Licenses2Add -ne $Null)
				{
					Add-Logs -text 'LOG: License is applied to the new user'
					
					$ts = New-TimeSpan -Minutes 8
					
					$TermLoop = ((get-date) + $ts).ToString("HH:mm")
					Do
					{
						$DateNow = (Get-date).ToString("HH:mm")
						Add-Logs -text 'LOG: Pausing for 30 seconds for mailbox to be created'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 20 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: 10 seconds remaining'
						Start-Sleep -Seconds 10
						Add-Logs -text 'LOG: Done'
						
						Add-Logs -text 'LOG: Checking to see if the mailbox has been created, if mailbox is not present will wait another 30 seconds'
						Add-Logs -text 'LOG: Loop will exit 8 minutes after it began regardless of mailbox creation'
					}
					Until (((Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }) -ne $null) -or ($DateNow -eq $TermLoop))
					
					add-logs -text 'LOG: Checking E-Mail address field for entered data'
					If ($textboxO365EmailAddress.Text -like "*@*")
					{
						add-logs -text 'LOG: Verifying that E-Mail value is not the same as UPN'
						If ($textboxO365EmailAddress.Text -ne (($textboxO365UPN.Text) + ($comboboxO365Domains.SelectedItem)))
						{
							add-logs -text 'LOG: Email is different from UPN, proceeding.'
							
							Try
							{
								$PrimEmail = $textboxO365EmailAddress.Text
								add-logs -text "LOG: Setting primary E-Mail to $PrimEmail"
								$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								$DN = $Mailbox.DisplayName
								add-logs -text "CMD: Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail"
								Set-Mailbox -Identity $DN -WindowsEmailAddress $PrimEmail
								add-logs -text "LOG: Done"
							}
							Catch
							{
								add-logs -text "WARN: $_"
								Add-Type -AssemblyName System.Windows.Forms
								[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
							}
						}
						Else
						{
							add-logs -text "LOG: E-Mail entered is the same as UPN, skipping."
						}
						
					}
					Else
					{
						add-logs -text "LOG: No E-Mail entered"
					}
					
					#Add any email aliases
					add-logs -text 'LOG: Checking Alias Addresses field for entered data'
					If ($textboxo365proxyaddresses.Text -ne $null)
					{
						add-logs -text 'LOG: Found Alias Addresses to add'
						$Proxys = $textboxo365proxyaddresses.Lines
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						$DN = $Mailbox.DisplayName
						foreach ($Proxy in $Proxys)
						{
							add-logs -text "LOG: Adding $Proxy for $DN"
							Set-Mailbox $Mailbox.DisplayName -EmailAddresses @{ add = "$Proxy" }
							add-logs -text 'LOG: Done'
						}
					}
					Else
					{
						add-logs -text 'LOG: No Alias Addresses found'
					}
					add-logs -text 'LOG: Done with Alias Addresses'
					
					#Find if user should be added to any mail groups
					add-logs -text 'LOG: Getting checked mail groups'
					$groups = $checkedlistboxDISTROo365groups.CheckedItems
					If ($groups -ne $null)
					{
						add-logs -text 'LOG: Mail Groups found'
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						foreach ($group in $groups)
						{
							Add-Logs -text "LOG: Checking to see if $group is a Office 365 Group"
							If ((Get-UnifiedGroup).displayName -contains $group)
							{
								Add-Logs -text "LOG: $group is an Office 365 group"
								Add-Logs -text "LOG: Adding $DN to $Group"
								Add-Logs -text "CMD: Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN"
								Add-UnifiedGroupLinks -Identity $group -LinkType Members -Links $DN
								Add-Logs -text "LOG: Done"
							}
							Else
							{
								Add-Logs -text "LOG: $group is not an Office 365 group"
								
								add-logs -text "LOG: Adding $DN to $Group"
								add-logs -text "CMD: Add-DistributionGroupMember -Identity $Group -Member $DN"
								Try
								{
									Add-DistributionGroupMember -Identity "$Group" -Member ($User).DisplayName
								}
								Catch
								{
									add-logs -text "WARN: $_"
									Add-Type -AssemblyName System.Windows.Forms
									[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
								}
							}
						}
					}
					Else
					{
						add-logs -text 'LOG: No Mail Groups checked'
					}
					Add-Logs -text 'LOG: Done with Mail Groups'
					
					#Shared Mailboxes
					Add-Logs -text 'LOG: Checking if there are Share Mailboxes checked'
					$SharedMailboxes = $checkedlistboxsharedmailboxes.CheckedItems
					#If there are shared mailboxes to add the user to (full access rights)
					If ($SharedMailboxes -ne $null)
					{
						$User = Get-MSOLUser | Where-Object { $_.Displayname -eq $textboxO365DisplayName.text }
						$DN = ($User).DisplayName
						If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								$Automap = $comboboxsharedmailboxautomap.Text
								Add-Logs -text "LOG: Adding $DN Full Access to $SharedMailbox with Automapping set to $Automap"
								If ($Automap -eq "False")
								{
									Add-Logs -text "LOG: AutoMapping set to False"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess -AutoMapping:`$false"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess -AutoMapping:$false
								}
								Else
								{
									Add-Logs -text "LOG: AutoMapping set to True"
									Add-Logs -text "CMD: Add-MailboxPermission $SharedMailbox -User $DN -AccessRights FullAccess"
									Add-MailboxPermission $SharedMailbox -User ($User).DisplayName -AccessRights FullAccess
								}
							}
						}
						ElseIf ($comboboxsharedmaiboxpermission.SelectedItem -eq "Send As")
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								Add-Logs -text "LOG: Assigning $DN Send-As permission on $SharedMailbox"
								Add-Logs -text 'CMD: Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs'
								Add-RecipientPermission -Identity $SharedMailbox -Trustee ($User).DisplayName -AccessRights SendAs -Confirm:$False
								Add-Logs -text "LOG: Done"
							}
							
						}
						Else
						{
							foreach ($SharedMailbox in $SharedMailboxes)
							{
								#$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
								Add-Logs -text "LOG: Granting $DN to Send on Behalf of $SharedMailbox"
								Add-Logs -text "CMD: Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo $DN"
								Set-Mailbox $SharedMailbox -GrantSendOnBehalfTo ($User).DisplayName
								Add-Logs -text 'LOG: Done'
							}
						}
					}
					Else
					{
						Add-Logs -text 'LOG: No Shared Mailboxes selected'
					}
					Add-Logs -text 'LOG: Done with Shared Mailboxes'
					
					Add-Logs -text 'LOG: Checking if Hide from global address list is set to True'
					#Hide from GAL
					If ($comboboxO365HidefromGAL.SelectedItem -eq $True)
					{
						Add-Logs -text 'LOG: Hide from global address list is set to True'
						Add-Logs -text 'LOG: Hiding mailbox from global address list'
						$Mailbox = Get-Mailbox | Where-Object { $_.DisplayName -eq $textboxO365DisplayName.text }
						If ($null -ne $mailbox)
						{
							Set-Mailbox -Identity ($Mailbox).DisplayName -HiddenFromAddressListsEnabled $true
						}
						Else
						{
							Add-Logs -text 'WARN: User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox'
							$InfoMessage = "User does not have a mailbox and cannot be hidden from GAL. Please verify the user has a valid license with a mailbox"
							$InfoTitle = "Warning"
							Show-MessageBox_psf
						}
					}
					Else
					{
						Add-Logs -text 'LOG: Hide from global address list is set to False'
					}
				}
				Else
				{
					Add-Logs -text 'LOG: No license is being added for the new user'
					Add-Logs -text 'LOG: Skipping Mail Groups as user is not licensed'
					Add-Logs -text 'LOG: Skipping Shared Mailboxes as user is not licensed'
					Add-Logs -text 'LOG: Skipping Hide from Global Address List as user is not licensed'
				}
				
				#If MFA is set to TRUE then enable MFA for the user
				Add-Logs -text 'LOG: Checking MFA status for the user'
				If ($comboboxMFA.Selecteditem -eq "True")
				{
					$UserMFA = ($User).UserPrincipalName
					Add-Logs -text 'LOG: MFA for the user set to TRUE, enabling MFA'
					Add-Logs -text "CMD: `$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement"
					$Auth = New-Object -TypeName Microsoft.Online.Administration.StrongAuthenticationRequirement
					Add-Logs -text 'CMD: $Auth.RelyingParty = "*"'
					$Auth.RelyingParty = "*"
					Add-Logs -text 'CMD: $MFA = @($Auth)'
					$MFA = @($Auth)
					Add-Logs -text "CMD: Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA"
					Set-MsolUser -UserPrincipalName $UserMFA -StrongAuthenticationRequirements $MFA
					Add-Logs -text 'LOG: Done'
				}
				Else
				{
					Add-Logs -text 'LOG: MFA is set to False'
				}
				Add-Logs -text 'LOG: Done'
				
				Add-Logs -text 'LOG: Checking OWA'
				If ($comboboxOWA.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: OWA Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false'
					Set-CASMailbox (($User).ObjectID).GUID -OWAEnabled $false
				}
				Else
				{
					Add-Logs -text 'LOG: OWA Enabled'
					
				}
				
				Add-Logs -text 'LOG: Checking ActiveSync'
				If ($comboboxActiveSync.SelectedItem -eq 'False')
				{
					Add-Logs -text 'LOG: ActiveSync Disabled'
					Add-Logs -text 'CMD: Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false'
					Set-CASMailbox (($User).ObjectID).GUID -ActiveSync $false
				}
				Else
				{
					Add-Logs -text 'LOG: ActiveSync Enabled'
					
				}
				
				Add-Logs -text 'LOG: Done'
			}
		}
	}
}

function Update-O365DisplayNameTextBox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365DisplayName -ErrorAction SilentlyContinue).UserFormatO365DisplayName
		#Create an array that we will use for formatting
		$O365DisplayNameFormatString = @()
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%Firstname% %LastName%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365DisplayName -Value "%FirstName% %LastName%" -Force | Out-Null
		}
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365DisplayNameFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365DisplayNameFormatString += $textboxUserLogonName.text
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365DisplayNameFormatString += $textboxO365EmailAddress.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365DisplayNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365DisplayNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365DisplayNameFormatString += $_
			}
			$textboxO365DisplayName.Text = [String]::Join('', $O365DisplayNameFormatString)
		}
		
	}
}

function Update-O365EmailTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365Email -ErrorAction SilentlyContinue).UserFormatO365Email
		If (($null -eq $config) -or ($config -eq ""))
		{
			$config = "%FirstLetterFirstName%%LastName%%UserPrincipalNameDomain%"
			Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name UserFormatO365Email -Value $config -Force | Out-Null
		}
		#Create an array that we will use for formatting
		$O365EmailFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365EmailFormatString += $space
			}
			ElseIf (($_ -eq "UPN") -or ($_ -eq "UserPrincipalName"))
			{
				$O365EmailFormatString += $textboxUserLogonName.text
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365EmailFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365EmailFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "UserPrincipalNameDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			ElseIf ($_ -eq "UPNDomain")
			{
				$O365EmailFormatString += $comboboxO365Domains.SelectedItem
			}
			Else
			{
				$O365EmailFormatString += $_
			}
			$textboxO365EmailAddress.Text = [String]::Join('', $O365EmailFormatString)
		}
		
	}
}

function Update-O365UserPrincipalNameTextbox
{
	$copyuser = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyUser -ErrorAction SilentlyContinue).CopyUser
	If ($copyuser -ne 1)
	{
		
		$config = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name UserFormatO365UserPrincipalName -ErrorAction SilentlyContinue).UserFormatO365UserPrincipalName
		#Create an array that we will use for formatting
		$O365UserPrincipalNameFormatString = @()
		$config -split "%" | ForEach-Object {
			If ($_ -eq "FirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text
			}
			ElseIf ($_ -eq "LastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text
			}
			ElseIf ($_ -like " ")
			{
				$space = " "
				$O365UserPrincipalNameFormatString += $space
			}
			ElseIf ($_ -eq "FirstLetterFirstName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365FirstName.Text.Substring(0, 1)
			}
			ElseIf ($_ -eq "FirstLetterLastName")
			{
				$O365UserPrincipalNameFormatString += $textboxO365LastName.Text.Substring(0, 1)
			}
			ElseIf (($_ -eq "Email") -or ($_ -eq "E-Mail"))
			{
				$O365UserPrincipalNameFormatString += $textboxO365EmailAddress.text
			}
			Else
			{
				$O365UserPrincipalNameFormatString += $_
			}
			$textboxO365UPN.Text = [String]::Join('', $O365UserPrincipalNameFormatString)
		}
		
	}
}

#endregion

$MainForm_Load = {
	

	
	$MFALogin = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name MFALogin -ErrorAction SilentlyContinue).MFALogin
	If ($MFALogin -eq 1)
	{
		$radiobuttonMFALogin.Checked = $true
	}
	Else
	{
		$radiobuttonNonMFALogin.Checked = $true
	}
	

	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		#Set-LightMode
		
	}
	
	
}

$MainForm_DuringShow = {
	
	Import-Module ActiveDirectory -ErrorAction SilentlyContinue
	Import-Module ADSync -ErrorAction SilentlyContinue
	
	#DEBUG
	#$tabcontrolUserProperties.Enabled = $true
	#$groupboxNoAdSync.Enabled = $true
	
	
	
	$copyActiveDirectoryUserToolStripMenuItem.Enabled = $false
	$copyOffice365UserToolStripMenuItem.Enabled = $false
	
	$textboxADSyncServer.Enabled = $false
	
	$datetimepickerDATE.Refresh()
	
	$radiobuttonNever.Checked = $true
	$datetimepickerDATE.Enabled = $false
	$datetimepickerTIME.Enabled = $false
	
	$datetimepickerTIME.Text = "05:00 PM"
	
	$MainForm.MaximizeBox = $false
	
	$maskedtextboxpassword.UseSystemPasswordChar = $true
	$textboxConfirmPassword.UseSystemPasswordChar = $true
	$textboxo365confirmpassword.UseSystemPasswordChar = $true
	$maskedtextboxo365password.UseSystemPasswordChar = $true
	
	$comboboxO365HidefromGAL.SelectedIndex = 1
	#DEBUG
	$groupboxNoAdSync.Enabled = $false
	$groupboxADSync.Enabled = $false

	#Disable the Office 365 license drop down until we connect to MSOnline
	#$comboboxO365Licenses.Enabled = $False
	$comboboxO365Licenses.Text = "Please connect to Office 365 to assign a license"
	
	#DEBUG
	$tabcontrolUserProperties.Enabled = $false
	
	
	$buttonCreateUser.Enabled = $false
	
	$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please connect to Office 365"
	$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please connect to Office 365"
	$labelSecurityGroups.Text = "To add your user to a Security Group, please connect to Office 365"
	
	
	$checkedlistboxDISTROo365groups.Enabled = $false
	$checkedlistboxsharedmailboxes.Enabled = $false
	
	$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
	
	Update-ComboBox -ComboBox $comboboxO365Domains -Items "Please connect to Office 365"
	
	$comboboxsharedmaiboxpermission.SelectedIndex = 0
	$comboboxsharedmailboxautomap.SelectedIndex = 0
	
	$comboboxsharedmaiboxpermission.Enabled = $false
	$comboboxsharedmailboxautomap.Enabled = $false
	
	$Global:AD_Pre_Req = 0
	$Global:O365_Pre_Req = 0
	
	$comboboxMFA.SelectedIndex = 0
	
	$CountryCode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CountryCode -ErrorAction SilentlyContinue).CountryCode
	If ($null -eq $CountryCode)
	{
		$comboboxO365countrycode.SelectedItem = "US"
	}
	Else
	{
		$comboboxO365countrycode.SelectedItem = $CountryCode
	}
	
	$comboboxO365HidefromGAL.SelectedItem = "False"
	
	$labelTimeLeft.Text = ""
	
	$global:ExternalLog = "$env:TEMP\MUC.txt"
	$labelLogFile.Text = $global:ExternalLog
	
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items "Domain Users"
	$comboboxPrimaryGroup.SelectedItem = "Domain Users"
	
	$AlwaysADCreate = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysADCreate -ErrorAction SilentlyContinue).AlwaysADCreate
	If ($AlwaysADCreate -eq 1)
	{
		$checkboxCreateAnActiveDirect.Checked = $true
	}
	
	$AlwaysO365Create = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name AlwaysO365Create -ErrorAction SilentlyContinue).AlwaysO365Create
	If ($AlwaysO365Create -eq 1)
	{
		$checkboxconfigo365user.Checked = $true
	}
	
	$ExchangeSetup = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeSetup -ErrorAction SilentlyContinue).ExchangeSetup
	If ($ExchangeSetup -eq "Hybrid")
	{
		$radiobuttonHybrid.Checked = $true
	}
	ElseIf ($ExchangeSetup -eq "Cloud Only")
	{
		$radiobuttonCloudOnly.Checked = $true
	}
	Else 
	{
		$radiobuttonOther.Checked = $true
	}
	
	
	If ($checkboxconfigo365user.Checked -eq $true)
	{
		$groupboxExchangeSetup.Enabled = $true
		$groupbox2FA.Enabled = $true
		$groupboxHybrid.Enabled = $true
		$textboxexchangeserverURL.Enabled = $true
	}
	Else
	{
		$groupboxExchangeSetup.Enabled = $false
		$groupbox2FA.Enabled = $false
		$groupboxHybrid.Enabled = $false
		$textboxexchangeserverURL.Enabled = $false
	}
	
	
	$comboboxActiveSync.SelectedItem = "True"
	

	$ExchangeURL = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeURL -ErrorAction SilentlyContinue).ExchangeURL
	
	$textboxexchangeserverURL.Text = $ExchangeURL
	
	
	$ExchangeWhere = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeWhere -ErrorAction SilentlyContinue).ExchangeWhere
	If ($ExchangeWhere -eq "Remote")
	{
		$radiobuttonexchangeremote.Checked = $true
	}
	Elseif ($radiobuttonLocal.Checked -eq $true)
	{
		$radiobuttonLocal.Checked = $true
		
	}
	Else
	{
		#Do Nothing
	}
	
	$RemoteFWDINGDomain = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeRemoteDomain -ErrorAction SilentlyContinue).ExchangeRemoteDomain
	$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Hybrid -Force | Out-Null
		
		$groupboxHybrid.Enabled = $true
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
		$checkboxRunADSync.checked = $true
	}
	
	$ADSyncServer = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ADSyncServer -ErrorAction SilentlyContinue).ADSyncServer
	$textboxADSyncServer.Text = $ADSyncServer
}

$resetFormToolStripMenuItem_Click = {
	Reset-Form
}

$buttonCreateUser_Click = {
	#If only an AD User is being made
	add-logs -text 'LOG: Checking to see what is being created'
	If (($checkboxCreateAnActiveDirect.Checked -eq $True) -and ($checkboxconfigo365user.Checked -eq $false))
	{
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	#If only Office 365 user is being created 
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Only an Office 365 User is being created'
	
		Try
		{
			New-MUCO365User
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
	}
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Both an Office 365 User and Active Director User is being created'
		
		#### ACTIVE DIRECTORY USER CREATION PORTION ####
		
		add-logs -text 'LOG: Only an Active Directory user is being created'
		Try
		{
			New-MUCUser
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
		
		
		
		#### OFFICE 365 USER CREATION PORTION ####
		
		
		add-logs -text 'LOG: Office 365 User is being created'
		Try
		{
			if ($radiobuttonHybrid.Checked -eq $true)
			{
				add-logs -text 'LOG: A Hybrid user is being created'
				New-MUCHybridUser
			}
			else
			{
				New-MUCO365User
			}
			
		}
		Catch
		{
			add-logs -text "WARN: $_"
			Add-Type -AssemblyName System.Windows.Forms
			[System.Windows.Forms.MessageBox]::Show($_, 'Warning', 'OK', 'Warning')
		}
	}
	Else
	{
		add-logs -text 'WARN: Nothing is being created!'
	}
	
	$ResetForm = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ResetForm -ErrorAction SilentlyContinue).ResetForm
	If ($ResetForm -eq 1)
	{
		Reset-Form
	}
}


$textboxDisplayName_TextChanged = {
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'White'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'LightCoral'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		
	}
	Else
	{
		If ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelDisplayName.Text = "Display Name:"
			$labelDisplayName.ForeColor = 'Black'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		ElseIf ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelDisplayName.Text = "*Display Name:"
			$labelDisplayName.ForeColor = 'Firebrick'
			$labelhybridusermailbox.Text = $textboxDisplayName.text
		}
		
	}
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxDisplayName_ChangeFocus = {
	$ADDisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDisplayName -ErrorAction SilentlyContinue).ADDisplayName
	If ($ADDisplayName -eq 1)
	{
		$words = $textboxDisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxLastName_TextChanged = {
	If ((($textboxLastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxLastName_ChangeFocus = {
	$ADLastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADLastName -ErrorAction SilentlyContinue).ADLastName
	If ($ADLastName -eq 1)
	{
		$words = $textboxLastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxLastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxFirstName_TextChanged = {
	If ((($textboxFirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
	
	
		
	
}

$textboxFirstName_ChangeFocus = {
	$ADFirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADFirstName -ErrorAction SilentlyContinue).ADFirstName
	If ($ADFirstName -eq 1)
	{
		$words = $textboxFirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxFirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxInitials_TextChanged = {
	If ((($textboxInitials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxDisplayName.Text = ""
	}
	Else
	{
		Update-DisplayNameTextbox
		Update-EmailTextbox
		Update-SamAccountNameTextbox
		Update-UserPrincipalNameTextbox
	}
	
}

$textboxInitials_ChangeFocus = {
	$ADInitials = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADInitials -ErrorAction SilentlyContinue).ADInitials
	If ($ADInitials -eq 1)
	{
		$words = $textboxInitials.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxInitials.Text = $TextInfo.ToTitleCase($words)
	}
}


$buttonGeneratePassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword
		$textboxPasswordGen.Text = $Password
		$maskedtextboxpassword.Text = $Password
		$textboxConfirmPassword.text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'CMD: $textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxPasswordGen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxpassword.Text = $textboxPasswordGen.Text
		$textboxConfirmPassword.text = $textboxPasswordGen.Text
	}
	
}

$textboxConfirmPassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'White'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelConfirmPassword.Text = "Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Black'
		}
		ElseIf ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelConfirmPassword.Text = "*Confirm Password:"
			$labelConfirmPassword.ForeColor = 'Firebrick'
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}

			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}

$buttonCopyOnPremUser_Click = {
	If ($checkboxCreateAnActiveDirect.Checked -eq $true)
	{
		add-logs -text "LOG: Copying AD User attributes to Office 365 user"
		$textboxO365LastName.Text = $textboxLastName.Text
		$textboxO365FirstName.Text = $textboxFirstName.text
		$textboxO365DisplayName.Text = $textboxDisplayName.Text
		$maskedtextboxo365password.Text = $maskedtextboxpassword.Text
		$textboxo365confirmpassword.Text = $textboxConfirmPassword.text
		$textboxo365passwordgen.Text = $textboxPasswordGen.text
		$textboxO365EmailAddress.Text = $textboxEmail.text
		$textboxO365UPN.Text = $textboxUserLogonName.text
		$comboboxO365Domains.SelectedItem = $comboboxDomains.SelectedItem
		
		#Address PAge
		$textboxo365city.Text = $textboxcity.Text
		$textboxO365street.Text = $textboxStreet.Text
		$textboxo365zip.Text = $textboxzipcode.Text
		$textboxo365state.Text = $textboxstate.text
		
		$textboxo365proxyaddresses.Text = $textboxproxyaddress.Text
		$comboboxO365HidefromGAL.SelectedItem = $comboboxhidefromGAL.SelectedItem
		
		$checkboxo365usermustchangepassword.Checked = $checkboxUserMustChangePasswo.Checked
		add-logs -text "LOG: Copy Finished!"
	}
	Else
	{
		add-logs -text "WARN: No Active Directory User is being created"
		$InfoMessage = "No Active Directory user is being created, there is nothing to copy"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
	}
	
}

$textboxo365confirmpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'White'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Black'
		}
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
	}
	ElseIf ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365userconfirmpassword.Text = "*Confirm Password:"
			$labelO365userconfirmpassword.ForeColor = 'Firebrick'
		}
		
	}
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
	
}

$buttonConnectToOffice365_Click = {
	add-logs -text 'LOG: Checking MFA Status'
	If ($radiobuttonNonMFALogin.Checked -eq $True)
	{
		add-logs -text 'LOG: Gathering credentials to connect to Office 365'
		add-logs -text 'CMD: Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"'
		$credential = Get-Credential -Message "Please enter your Office 365 credentials to connect to Exchange Online and MSOnline"
		add-logs -text 'LOG: Done'
		If ($credential -eq $Null)
		{
			add-logs -text 'WARN: Credential object empty'
			$InfoMessage = "No credentials were entered. Please enter valid Office 365 credentials"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		Else
		{
			add-logs -text 'LOG: Connecting to Office 365'
			add-logs -text 'CMD: Connect-MsolService -Credential $credential'
			Import-Module MSOnline
			Connect-MsolService -Credential $credential
			$exchangeSession = New-PSSession -ConfigurationName Microsoft.Exchange -ConnectionUri "https://outlook.office365.com/powershell-liveid/" -Authentication "Basic" -AllowRedirection -Credential $credential
			add-logs -text 'LOG: Done'
			add-logs -text 'LOG: Connecting to Exchange Online'
			add-logs -text 'CMD: Import-PSSession $exchangeSession -AllowClobber'
			Import-PSSession $exchangeSession -AllowClobber
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Finding MFA Exchange Online Module'
		add-logs -text 'CMD: $((Get-ChildItem -Path $($env:LOCALAPPDATA+"\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse ).FullName|?{$_ -notmatch "_none_"}|select -First 1)'
		$Modules = $((Get-ChildItem -Path $($env:LOCALAPPDATA + "\Apps\2.0\") -Filter Microsoft.Exchange.Management.ExoPowershellModule.dll -Recurse).FullName | Where-Object{ $_ -notmatch "_none_" } | Select-Object -First 1)
		If ($Modules -eq $Null)
		{
			add-logs -text 'WARN: MFA Module was not found'
			$InfoMessage = "Exchange Online MFA Module was not found, please make sure you have downloaded and installed it from your tenant https://docs.microsoft.com/en-us/powershell/exchange/exchange-online/connect-to-exchange-online-powershell/mfa-connect-to-exchange-online-powershell?view=exchange-ps"
			$InfoTitle = "Warning"
			Show-MessageBox_psf
		}
		foreach ($Module in $Modules)
		{
			Import-Module "$Module"
		}
		add-logs -text 'LOG: Done'
		add-logs -text 'LOG: Connecting to MSOnline'
		#Connect to MSOnline w/2FA
		Connect-MsolService
		add-logs -text 'LOG: Done'
		#Connect to Exchange Online w/ 2FA
		add-logs -text 'LOG: Connecting to Exchange Online'
		$EXOSession = New-ExoPSSession
		Import-PSSession $EXOSession
		add-logs -text 'LOG: Done'
	}
	add-logs -text 'LOG: Checking to see if we are connected to Office 365'
	add-logs -text 'CMD: (Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null'
	if ((Get-MsolDomain -ErrorAction SilentlyContinue) -ne $null)
	{
		
		$copyOffice365UserToolStripMenuItem.Enabled = $true
		
		add-logs -text 'LOG: Connected to Office 365!'
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$labelconnectionstatus.Text = "Connected"
			$labelconnectionstatus.ForeColor = 'Green'
		}
		
		
		$Global:O365_Pre_Req++
		#Create just an AD User
		If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD nad O365 User (w/ ADSync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create AD And O365 User (no Sync)
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 User no adsync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
		{
			$buttonCreateUser.Enabled = $true
		}
		#Create just an O365 user with ADSync
		ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $False
		}
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Enabling Disconnect from Office 365 menu item'
		add-logs -text 'CMD: $disconnectFromOffice365ToolStripMenuItem.Enabled = $true'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $true
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Disabling connect to Office 365 button!'
		add-logs -text 'CMD: $buttonConnectToOffice365.Enabled = $False'
		$buttonConnectToOffice365.Enabled = $False
		$buttonConnectToOffice365.Text = "Connected to Office 365"
		$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
		If ($DarkMode -eq 1)
		{
			$buttonConnectToOffice365.ForeColor = 'White'
		}
		Else
		{
			$buttonConnectToOffice365.ForeColor = 'Black'
		}
		
		add-logs -text 'LOG: Done'
		
		If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0) -and ($buttonConnectToOffice365.Enabled -eq $false))
		{
			$buttonCreateUser.Enabled = $true
		}
		Else
		{
			$buttonCreateUser.Enabled = $false
		}
		
		add-logs -text 'LOG: Getting all verified domains for UPN list'
		add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Domains -Items (Get-MsolDomain | Where-Object {$_.Status -eq "Verified"} | Select-Object -ExpandProperty Name)'
		$DomainsArray = @()
		$Domains = (Get-MsolDomain | Where-Object { $_.Status -eq 'Verified' } | Select-Object -ExpandProperty Name)
		If ($Domains -ne $Null)
		{
			foreach ($Domain in $Domains)
			{
				$DomainsArray += "@" + $Domain
			}
		}
		Else
		{
			add-logs -text 'WARN: No verified domains'
			$DomainsArray = "No verified Domains were found"
		}
		Update-ComboBox -ComboBox $comboboxO365Domains -Items $DomainsArray
		add-logs -text 'LOG: Done'
		
		
		#We only want licenses that have at least one to assign to a user
		$LicenseArray = @()
		
		
		add-logs -text 'LOG: Getting available licenses'
		add-logs -text 'CMD: Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }'
		$Avaialble = Get-MsolAccountSku | Where-Object { $_.ActiveUnits -ne $_.ConsumedUnits }
		add-logs -text 'LOG: Done'
		
		foreach ($item in $Avaialble)
		{
			add-logs -text 'LOG: Getting Account SKU for license'
			$RemoveDomain = ($item).AccountSkuId
			add-logs -text 'LOG: Removing domain portion of license'
			$LicenseItem = $RemoveDomain -split ":" | Select-Object -Last 1
			add-logs -text 'LOG: Converting SKU to friendly name'
			$TextLic = $Sku.Item("$LicenseItem")
			If (!($TextLic))
			{
				$LicenseArray += $LicenseItem
			}
			Else
			{
				$LicenseArray += $TextLic
			}
			add-logs -text 'LOG: Done'
		}
		
		#add-logs -text 'LOG: Enabling Licenses combobox'
		#add-logs -text 'CMD: $comboboxO365Licenses.Enabled = $True'
		#$comboboxO365Licenses.Enabled = $True
		#add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = ""
		
		#Cache licenses to use in other forms
		$LicenseArray | Out-File "$env:TEMP\MUCLicenses.txt" -Force -ErrorAction SilentlyContinue
		
		
		add-logs -text 'LOG: Loading license combobox with available licenses'
		#add-logs -text 'CMD: Update-ComboBox -ComboBox $comboboxO365Licenses ($Avaialble).AccountSkuId'
		#Update-ComboBox -ComboBox $comboboxO365Licenses $LicenseArray
		add-logs -text 'LOG: Done'
		$comboboxO365Licenses.Text = "Click to select an Office 365 license"

		
		
		add-logs -text 'LOG: Loading Office 365 Mail Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items (Get-MsolGroup -All | Where-Object {($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") }| Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$MailGroups = (Get-MsolGroup -All | Where-Object { ($_.GroupType -eq "DistributionList") -or ($_.GroupType -eq "MailEnabledSecurity") } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataMailGroups = $MailGroups
		Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $MailGroups
		$comboboxO365Domains.SelectedIndex = 0
		add-logs -text 'LOG: Done'
		
		add-logs -text 'LOG: Loading Office 365 Security Groups ListBox'
		add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items (Get-MsolGroup -All | Where-Object { $_.GroupType -like "*Security*" } | Select-Object -ExpandProperty DisplayName | Sort-Object)'
		$SecurityGroups = (Get-MsolGroup -All | Where-Object { $_.GroupType -eq "Security" } | Select-Object -ExpandProperty DisplayName | Sort-Object)
		$Global:OriginalDataSecurityGroups = $SecurityGroups
		Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $SecurityGroups
		$comboboxO365Domains.SelectedIndex = 0
		$labelSecurityGroups.Text = "Please select any Security Groups you want to add your new user to"
		
		add-logs -text 'LOG: Done'
		
		
		$labelO365Groups.Text = "To add your user to a Mail Enabled Group, please select a valid license so the user has a mailbox"
		
		$labelsharedmailboxes.text = "To grant your user permissions on a Shared Mailbox, please select a valid license so the user has a mailbox"
		
		add-logs -text 'LOG: Getting all Shared Mailboxes'
		$Shared = Get-Mailbox | Where-Object { $_.RecipientTypeDetails -eq "SharedMailbox" } | Select-Object -ExpandProperty DisplayName | Sort-Object
		Update-ListBox -ListBox $checkedlistboxsharedmailboxes -Items $Shared
		add-logs -text 'LOG: Done'
		$comboboxO365HidefromGAL.SelectedItem = "False"
		
	}
	Else
	{
		add-logs -text 'WARN: Not connected to Office 365!'
	}
	
	
	
}



$buttonO365Genpassword_Click = {
	$PasswordSettings = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name PasswordGen -ErrorAction SilentlyContinue).PasswordGen
	If ($PasswordSettings -eq 0)
	{
		add-logs -text 'LOG: Generating dictionary based password'
		$Password = Get-DictionaryPassword -O365
		$textboxo365passwordgen.Text = $Password
		$maskedtextboxo365password.Text = $Password
		$textboxo365confirmpassword.Text = $Password
	}
	Else
	{
		
		add-logs -text 'LOG: Generating random password'
		add-logs -text 'LOG: ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join '''
		$textboxo365passwordgen.Text = ([char[]]([char]33 .. [char]95) + ([char[]]([char]97 .. [char]126)) + 0 .. 9 | Sort-Object { Get-Random })[0 .. 10] -join ''
		$maskedtextboxo365password.Text = $textboxo365passwordgen.Text
		$textboxo365confirmpassword.Text = $textboxo365passwordgen.Text
		add-logs -text 'LOG: Done'
	}

	
	
}


$checkboxRunADSync_CheckedChanged = {
	If ($checkboxRunADSync.Checked -eq $True)
	{
		$groupboxNoAdSync.Enabled = $false
		$textboxO365FirstName.Enabled = $false
		$textboxO365DisplayName.Enabled = $false
		$textboxO365LastName.Enabled = $false
		$buttonCopyOnPremUser.Enabled = $false
		$buttonO365Genpassword.Enabled = $false
		$textboxConfirmPassword.Enabled = $false
		$maskedtextboxo365password.Enabled = $false
		$textboxO365UPN.Enabled = $false
		$textboxo365state.Enabled = $false
		$textboxo365city.Enabled = $false
		$textboxo365zip.Enabled = $false
		
		$labelO365Groups.Text = "This feature is not available for AD-Synced enviornments."
		
		$textboxADSyncServer.Enabled = $true
		
	}
	elseif ($checkboxRunADSync.Checked -eq $false)
	{
		$groupboxNoAdSync.Enabled = $True
		$textboxO365FirstName.Enabled = $true
		$textboxO365DisplayName.Enabled = $true
		$textboxO365LastName.Enabled = $true
		$buttonCopyOnPremUser.Enabled = $true
		$buttonO365Genpassword.Enabled = $true
		$textboxConfirmPassword.Enabled = $true
		$maskedtextboxo365password.Enabled = $true
		$textboxO365UPN.Enabled = $true
		$textboxo365state.Enabled = $true
		$textboxo365city.Enabled = $true
		$textboxo365zip.Enabled = $true
		
		$labelO365Groups.Text = "Please check all groups you want your user to be a member of."
		
		$textboxADSyncServer.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$buttonExit_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
}

$textboxO365LastName_TextChanged = {
	If ((($textboxO365LastName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
}
$textboxO365LastName_FocusChanged = {
	$O365LastName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365LastName -ErrorAction SilentlyContinue).O365LastName
	If ($O365LastName -eq 1)
	{
		$words = $textboxO365LastName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365LastName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365FirstName_TextChanged = {
	If ((($textboxO365FirstName.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = ""
	}
	Else
	{
		Update-O365EmailTextbox
		Update-O365DisplayNameTextBox
		Update-O365UserPrincipalNameTextbox
	}
	
}

$textboxO365FirstName_FocusChanged = {
	$O365FirstName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365FirstName -ErrorAction SilentlyContinue).O365FirstName
	If ($O365FirstName -eq 1)
	{
		$words = $textboxO365FirstName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365FirstName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365Initials_TextChanged = {
	If ((($textboxO365Initials.text | Measure-Object -Character).Characters) -lt 1)
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365LastName.Text
	}
	Else
	{
		$textboxO365DisplayName.Text = $textboxO365FirstName.text + " " + $textboxO365Initials.text + "." + $textboxO365LastName.Text
	}
	
}



$console_TextChanged = {
	$console.SelectionStart = $console.TextLength;
	$console.ScrollToCaret()
	$console.Focus()
	
	If ($Global:ExternalLog -ne $null)
	{
		$console.Text | Out-File $Global:ExternalLog
	}
	
}

$buttonO365Clear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxo365passwordgen.text = ""'
	$textboxo365passwordgen.text = ""
	
}

$buttonClear_Click = {
	add-logs -text 'LOG: Clearing randomly generated password'
	add-logs -text 'CMD: $textboxPasswordGen.Text = "" '
	$textboxPasswordGen.Text = ""
}

$checkboxconfigo365user_CheckedChanged = {
	if ($checkboxconfigo365user.CheckState -eq 'checked')
	{
		$tabpageOffice365.Enabled = $true
		$groupboxExchangeSetup.Enabled = $true
		$groupbox2FA.Enabled = $true
		
		$ExchangeSetup = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeSetup -ErrorAction SilentlyContinue).ExchangeSetup
		If ($ExchangeSetup -eq "Hybrid")
		{
			$radiobuttonHybrid.Checked = $true
		}
		ElseIf ($ExchangeSetup -eq "Cloud Only")
		{
			$radiobuttonCloudOnly.Checked = $true
		}
		Else
		{
			$radiobuttonOther.Checked = $true
		}
		
		
		
	}
	Else
	{
		$tabpageOffice365.Enabled = $false
		$groupboxExchangeSetup.Enabled = $false
		$groupbox2FA.Enabled = $false
		
	}
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxconfigo365user.Checked -eq $true))
	{
		add-logs -text 'LOG: Checking if DirSync is present on localhost'
		If ($null -ne (Get-Module -ListAvailable -Name "ADSync"))
		{
			add-logs -text 'LOG: DirSync found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			add-logs -text 'LOG: Done'
		}
		Else
		{
			add-logs -text 'LOG: No DirSync Found on local system'
			$checkboxRunADSync.Enabled = $True
			$groupboxADSync.Enabled = $true
			$groupboxNoAdSync.Enabled = $true
			$comboboxOWA.SelectedItem = "True"
			add-logs -text 'LOG: Done'
		}
	}
	Else
	{
		add-logs -text 'LOG: Enabling ADSync CheckBox'
		$checkboxRunADSync.Enabled = $True
		add-logs -text 'LOG: Enabling No ADSync Groupbox'
		$groupboxNoAdSync.Enabled = $true
		add-logs -text 'LOG: Done'
	}
	
	
	
	If ($radiobuttonOther.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $false
		$groupboxADSync.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
	}
	If ($radiobuttonCloudOnly.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $flase
		$groupboxADSync.Enabled = $false
		$groupboxNoAdSync.Enabled = $true
	}
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		$groupboxHybrid.Enabled = $true
		$groupboxADSync.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
	}
	
	
	$ExchangeWhere = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeWhere -ErrorAction SilentlyContinue).ExchangeWhere
	If ($ExchangeWhere -eq "Remote")
	{
		$radiobuttonexchangeremote.Checked = $true
	}
	Elseif ($radiobuttonLocal.Checked -eq $true)
	{
		$radiobuttonLocal.Checked = $true
		
	}
	Else
	{
		$CallEMS = ". '$env:ExchangeInstallPath\bin\RemoteExchange.ps1'; Connect-ExchangeServer -auto -ClientApplication:ManagementShell "
		Invoke-Expression $CallEMS
		$Check = Get-ExchangeServer
		If ($Check)
		{
			$radiobuttonLocal.Checked = $true
			$labelExchangeNotConnected.Text = "Connected"
			$labelExchangeNotConnected.ForeColor = 'MediumSeaGreen'
		}
		Else
		{
			$radiobuttonexchangeremote.Checked = $true
		}
	}
	
	
	
	
	
}

$checkboxCreateAnActiveDirect_CheckedChanged = {
	
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD and O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
	If (($checkboxCreateAnActiveDirect.Checked -eq $true))
	{
		If ($Null -ne (Get-Module -ListAvailable -Name "ActiveDirectory"))
		{
			add-logs -text 'LOG: Enabling AD User creation'
			$tabcontrolUserProperties.Enabled = $true
			add-logs -text 'LOG: Done'
			
			Add-Logs -text "Enabling Copy AD User Menu Item"
			$copyActiveDirectoryUserToolStripMenuItem.Enabled = $true
			add-logs -text 'LOG: Done'
			
			
			add-logs -text 'LOG: Loading Organizational Unit Tree'
			add-logs -text "CMD: `$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName"
			$OUTree = (Get-ADOrganizationalUnit -Filter * -Properties CanonicalName | Sort-Object | Select-Object -Property CanonicalName).CanonicalName
			If ($null -eq $OUTree)
			{
				$InfoMessage = 'Could not load Organizational Unit structure'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxOUTree.Enabled = $false
			}
			Else
			{
				add-logs -text "CMD: Update-ComboBox -ComboBox `$comboboxOUTree -Items $OUTree"
				Update-ComboBox -ComboBox $comboboxOUTree -Items $OUTree
				add-logs -text 'LOG: Done'
				$comboboxOUTree.Enabled = $true
			}
			
			add-logs -text 'LOG: Getting Active Directory Groups'
			add-logs -text 'CMD: $Groups = Get-ADGroup -Filter * | Where-Object {($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers")} | Select-Object -ExpandProperty Name | Sort-Object'
			$Groups = Get-ADGroup -Filter * | Where-Object { ($_.Name -ne "Domain Users") -and ($_.Name -ne "Domain Computers") } | Select-Object -ExpandProperty Name | Sort-Object
			$Global:OriginalData = $Groups
			If ($null -eq $Groups)
			{
				add-logs -text 'WARN: No Active Directory Groups were found'
				$InfoMessage = 'No Active Directory Group objects were found when running Get-ADGroup'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			Else
			{
				add-logs -text 'CMD: Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups'
				Update-ListBox -ListBox $checkedlistboxGroups -Items $Groups
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting NetBIOS Name'
			add-logs -text 'CMD: (Get-ADDomain).NetBIOSName'
			$Netbiosname = (Get-ADDomain).NetBIOSName
			If ($null -eq $Netbiosname)
			{
				add-logs -text 'WARN: No NetBIOS Name was found'
				$InfoMessage = 'No NetBIOS Name was found when running (Get-ADDomain).NetBIOSName'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$textboxUPNDomain.Text = "Not Available"
			}
			Else
			{
				$textboxUPNDomain.Text = $Netbiosname + "\"
				add-logs -text 'LOG: Done'
			}
			
			add-logs -text 'LOG: Getting UPN Suffixes'
			add-logs -text 'CMD: $Forest = Get-ADForest'
			$Forest = Get-ADForest
			If ($null -eq $Forest)
			{
				add-logs -text 'WARN: No Active Directory Forest was found'
				$InfoMessage = 'No Active Directory Forest was found when running Get-ADForest'
				$InfoTitle = "Warning"
				Show-MessageBox_psf
				$comboboxDomains.Enabled = $false
			}
			Else
			{
				$comboboxDomains.Enabled = $true
				$UPNs = @()
				add-logs -text 'CMD: ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)'
				$extraUPNS = ($Forest | Select-Object UPNSuffixes -ExpandProperty UPNSuffixes)
				If ($extraUPNs -ne $Null)
				{
					foreach ($extraUPN in $extraUPNs)
					{
						$UPNs += "@" + $extraUPN
					}
				}
				add-logs -text 'CMD: $UPNs += "@" +  ($Forest | Select-Object -ExpandProperty Name)'
				$UPNs += "@" + ($Forest | Select-Object -ExpandProperty Name)
				Update-ComboBox -ComboBox $comboboxDomains -Items $UPNs
			}
			add-logs -text 'LOG: Done'
			
			$comboboxDomains.SelectedIndex = 0
		}
		Else
		{
			$InfoMessage = "Could not locate the ActiveDirectory module on $env:COMPUTERNAME. This module is required to create an Active Directory user"
			$InfoTitle = "Error"
			Show-MessageBox_psf
			$checkboxCreateAnActiveDirect.CheckState = 'Unchecked'
		}
	}
	Else
	{
		$tabcontrolUserProperties.Enabled = $false
	}
	
}

$copyAllLogToClipboardToolStripMenuItem_Click = {
	add-logs -text 'LOG: Copying log to clipboard'
	add-logs -text 'CMD: $console.Text | clip'
	$console.Text | clip
	add-logs -text 'LOG: Done'
	
}

$clearLogToolStripMenuItem_Click = {
	add-logs -text 'LOG: Clearing log'
	add-logs -text 'CMD: $console.Text = ""'
	$console.Text = ""
	
}

$exitToolStripMenuItem_Click = {
	Get-PSSession | Remove-PSSession
	$MainForm.close()
	
}



$textboxUserLogonName_TextChanged = {
	
	Update-SamAccountNameTextbox
	Update-DisplayNameTextbox
	Update-EmailTextbox
	
	$textboxSamAccount.Text = $textboxUserLogonName.Text
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'White'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'LightCoral'
		}
		
	}
	Else
	{
		If ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelUserLogonNameUPN.Text = "User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Black'
		}
		ElseIf ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelUserLogonNameUPN.Text = "*User logon name: (UPN)"
			$labelUserLogonNameUPN.ForeColor = 'Firebrick'
		}
		
	}
	
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxUserLogonName_FocusChanged = {
	$ADUPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADUPN -ErrorAction SilentlyContinue).ADUPN
	If ($ADUPN -eq 1)
	{
		$words = $textboxUserLogonName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxUserLogonName.Text = $TextInfo.ToTitleCase($words)
	}
}




$maskedtextboxpassword_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'White'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'LightCoral'
			
		}
		
	}
	Else
	{
		If ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelPassword.Text = "Password:"
			$labelPassword.ForeColor = 'Black'
			
		}
		ElseIf ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelPassword.Text = "*Password:"
			$labelPassword.ForeColor = 'Firebrick'
			
		}
		
	}
	
	
	If (((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxpassword.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelpasswordconfirmmessage.Text = ""
	}
	Else
	{
		If (($textboxConfirmPassword.Text) -ne ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'LightCoral'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Red'
				$labelpasswordconfirmmessage.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
				
			}
			
		}
		ElseIf (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text))
		{
			$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
			If ($DarkMode -eq 1)
			{
				$labelpasswordconfirmmessage.ForeColor = 'MediumSeaGreen'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			Else
			{
				$labelpasswordconfirmmessage.ForeColor = 'Green'
				$labelpasswordconfirmmessage.Text = "Passwords match!"
				
			}
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
		Else
		{
			$labelpasswordconfirmmessage.Text = ""
		}
	}
	
	
}



$linklabelTimOlvera_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to gangsta site'
	add-logs -text 'CMD: start-process -FilePath "https://www.linkedin.com/in/tim-olvera-06435042"'
	#start-process -FilePath "https://www.linkedin.com/in/bradleywyatt/"
	Start-Process -FilePath "https://www.linkedin.com/in/tim-olvera-06435042"
	add-logs -text 'LOG: Done'	
}

$linklabelGitHub_LinkClicked = [System.Windows.Forms.LinkLabelLinkClickedEventHandler]{
	add-logs -text 'LOG: Navigating to GitHub Project site'
	add-logs -text 'CMD: Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"'
	Start-Process -FilePath "https://github.com/bwya77/AD-Master-User-Creator"
	add-logs -text 'LOG: Done'
	
}

$textboxO365DisplayName_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'White'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'LightCoral'
		}
	}
	Else
	{
		If ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365DisplayName.Text = "Display Name:"
			$labelO365DisplayName.ForeColor = 'Black'
		}
		ElseIf ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365DisplayName.Text = "*Display Name:"
			$labelO365DisplayName.ForeColor = 'Firebrick'
		}
	}
	
	
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365DisplayName_FocusChanged = {
	$O365DisplayName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365DisplayName -ErrorAction SilentlyContinue).O365DisplayName
	If ($O365DisplayName -eq 1)
	{
		$words = $textboxO365DisplayName.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365DisplayName.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxO365UPN_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0)
	{
		Update-O365EmailTextbox
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'White'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Black'
		}
		
	}
	ElseIf ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -lt 1)
	{
		If ($DarkMode -eq 1)
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelO365UserPrincipalName.Text = "*UserPrincipalName:"
			$labelO365UserPrincipalName.ForeColor = 'Firebrick'
		}
		
		
	}
	#Create just an AD User
	If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD nad O365 User (w/ ADSync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create AD And O365 User (no Sync)
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 User no adsync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
	{
		$buttonCreateUser.Enabled = $true
	}
	#Create just an O365 user with ADSync
	ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
	{
		$buttonCreateUser.Enabled = $true
	}
	Else
	{
		$buttonCreateUser.Enabled = $False
	}
}

$textboxO365UPN_FocusChanged = {
	$O365UPN = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365UPN -ErrorAction SilentlyContinue).O365UPN
	If ($O365UPN -eq 1)
	{
		$words = $textboxO365UPN.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365UPN.Text = $TextInfo.ToTitleCase($words)
	}
}


$maskedtextboxo365password_TextChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'White'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'lightcoral'
		}
	}
	Else
	{
		If ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -gt 0)
		{
			$labelO365userpassword.Text = "Password:"
			$labelO365userpassword.ForeColor = 'Black'
		}
		ElseIf ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1)
		{
			$labelO365userpassword.Text = "*Password:"
			$labelO365userpassword.ForeColor = 'Firebrick'
		}
	}
	
	
	If (((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -lt 1) -and ((($maskedtextboxo365password.Text | Measure-Object -Character).Characters) -lt 1))
	{
		$labelo365password.Text = ""
	}
	Else
	{
		
		If (($textboxo365confirmpassword.Text) -ne ($maskedtextboxo365password.Text))
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'LightCoral'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			Else
			{
				$labelo365password.ForeColor = 'Red'
				$labelo365password.Text = "Passwords do not match!"
				$buttonCreateUser.Enabled = $false
			}
			
		}
		Else
		{
			If ($DarkMode -eq 1)
			{
				$labelo365password.ForeColor = 'MediumSeaGreen'
				$labelo365password.Text = "Passwords match!"
			}
			Else
			{
				$labelo365password.ForeColor = 'Green'
				$labelo365password.Text = "Passwords match!"
			}
			
			
			#Create just an AD User
			If (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $false) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD nad O365 User (w/ ADSync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create AD And O365 User (no Sync)
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $true) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and (($textboxConfirmPassword.Text) -eq ($maskedtextboxpassword.Text)) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxConfirmPassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxDisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxUserLogonName.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 User no adsync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($O365_Pre_Req -eq 1) -and ((($textboxo365confirmpassword.Text | Measure-Object -Character).Characters) -gt 0) -and (($maskedtextboxo365password.text) -eq ($textboxo365confirmpassword.text)) -and ((($textboxO365DisplayName.Text | Measure-Object -Character).Characters) -gt 0) -and ((($textboxO365UPN.Text | Measure-Object -Character).Characters) -gt 0))
			{
				$buttonCreateUser.Enabled = $true
			}
			#Create just an O365 user with ADSync
			ElseIf (($checkboxCreateAnActiveDirect.Checked -eq $false) -and ($checkboxconfigo365user.Checked -eq $true) -and ($checkboxRunADSync.Checked -eq $true))
			{
				$buttonCreateUser.Enabled = $true
			}
			Else
			{
				$buttonCreateUser.Enabled = $False
			}
		}
	}
}

$comboboxO365Licnses_Click = {
	Show-O365LicenseSelection_psf
	$comboboxO365Licenses.text = "Selected Licenses: $($Licenses2Add.count)"
	
	
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	Toogle-LicenseStatus
}





$comboboxO365countrycode_SelectedIndexChanged = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	
	If (($comboboxO365countrycode.SelectedItem -eq $Null) -and ($comboboxO365Licenses.SelectedItem -ne $null))
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'LightCoral'
		}
		Else
		{
			$labelCountryCode.Text = "*Country Code"
			$labelCountryCode.ForeColor = 'Firebrick'
		}
		
	}
	Else
	{
		If ($DarkMode -eq 1)
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'White'
		}
		Else
		{
			$labelCountryCode.Text = "Country Code"
			$labelCountryCode.ForeColor = 'Black'
		}
		
	}
	
	
}

$disconnectFromOffice365ToolStripMenuItem_Click = {
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'LightCoral'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'LightCoral'
	}
	Else
	{
		$Global:O365_Pre_Req--
		Add-Logs -text 'LOG: Removing PSSessiong'
		Add-Logs -text 'CMD: Get-PSSession | Remove-PSSession'
		Get-PSSession | Remove-PSSession
		$buttonConnectToOffice365.Enabled = $true
		$buttonConnectToOffice365.Text = "*Connect to Office 365"
		$buttonConnectToOffice365.ForeColor = 'Firebrick'
		Add-Logs -text 'LOG: Done'
		$disconnectFromOffice365ToolStripMenuItem.Enabled = $false
		$labelconnectionstatus.Text = "Not Connected"
		$labelconnectionstatus.ForeColor = 'Firebrick'
	}
	
	
}



$saveLogAsToolStripMenuItem_Click = {
	$SaveChooser = New-Object -Typename System.Windows.Forms.SaveFileDialog
	$SaveChooser.title = "Save Log File"
	$SaveChooser.filter = "Text File|*.txt"
	$SaveChooser.ShowDialog()
	$console.Text | Out-File $SaveChooser.Filename
	
}

$comboboxsharedmaiboxpermission_SelectedIndexChanged = {
	If ($comboboxsharedmaiboxpermission.SelectedItem -eq "Full Access")
	{
		$comboboxsharedmailboxautomap.Enabled = $true
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items "True", "False"
		$comboboxsharedmailboxautomap.SelectedIndex = 0
	}
	Else
	{
		Update-ComboBox -ComboBox $comboboxsharedmailboxautomap -Items ""
		$comboboxsharedmailboxautomap.Enabled = $false
		
	}
	
}




$versionToolStripMenuItem_Click = {
	$InfoMessage = "
Version Number: $Version
Build Date: $Builddate
Gangsta: Tim O.
"
	$InfoTitle = "Build Information"
	Show-MessageBox_psf	
}


$changelogToolStripMenuItem_Click = {
	Show-ChangeLog_psf
}

$labelChangelog_Click = {
	Show-ChangeLog_psf
}

$externalLogFileToolStripMenuItem_Click = {
	# Class Details:  https://msdn.microsoft.com/en-us/library/system.windows.forms.savefiledialog(v=vs.110).aspx 
	$SaveFileDialog = New-Object windows.forms.savefiledialog
	$SaveFileDialog.initialDirectory = [System.IO.Directory]::GetCurrentDirectory()
	$SaveFileDialog.title = "Log File Location"
	#$SaveFileDialog.filter = "All files (*.*)| *.*"   
	#$SaveFileDialog.filter = "PublishSettings Files|*.publishsettings|All Files|*.*" 
	$SaveFileDialog.filter = "Log Text File|*.txt"
	$SaveFileDialog.ShowHelp = $True
	$result = $SaveFileDialog.ShowDialog()
	$result
	$Global:ExternalLog = $SaveFileDialog.filename
	Write-Host $result
	If ($result -eq "Ok")
	{
		
		$labelLogFile.Text = $global:ExternalLog
		
	}
}


$radiobuttonExpireOn_CheckedChanged = {
	#Enable the Date Date / Time picker
	$datetimepickerDATE.Enabled = $true
	#Enable the Time date/time picker
	$datetimepickerTIME.Enabled = $true
	
}

$radiobuttonNever_CheckedChanged = {
	#Disable the Date Date/Time picker
	$datetimepickerDATE.Enabled = $false
	#Disable the Time Date/Time picker
	$datetimepickerTIME.Enabled = $false
	
}

$datetimepickerDATE_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$datetimepickerTIME_ValueChanged = {
	$TimeUntil = (New-TimeSpan –Start ((Get-Date -Format "dddd, MMMM, dd, yyyy") + " " + (get-date -Format "HH:mm")) –End (($datetimepickerDATE.Value.ToLongDateString()) + " " + $datetimepickerTIME.Value.ToString("HH:mm")))
	$Days = $TimeUntil.Days
	$Hours = $TimeUntil.Hours
	$Minutes = $TimeUntil.Minutes
	$labelTimeLeft.Text = "In $Days days, $Hours hours, and $Minutes minutes"
	
}

$checkedlistboxGroups_SelectedIndexChanged = {

	If ($click -ne 1)
	{
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		$checkedlistboxGroups.CheckedItems | ForEach-Object{
			#If checked and not in file, add and append
			$CheckItem = Get-Content $CacheGroups | Select-String $_
			If ($null -eq $CheckItem)
			{				
				$_ | Out-File $CacheGroups -Force -Append
			}
		}
		
		$CachedCheckedGroups = Get-Content $CacheGroups -ErrorAction SilentlyContinue
		
		
		#Get all unchecked items
		$UncheckedItems = $checkedlistboxGroups.Items | Where-Object { $checkedlistboxGroups.CheckedItems -notcontains $_ }
		
		#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
		Compare-Object -ReferenceObject $CachedCheckedGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
			# == means that the obj is unchecked but present on the file, we need to remove from file
			If ($_.SideIndicator -eq "==")
			{
				#Remove the item that is present on the list but unchecked from the file
				$Info = $CachedCheckedGroups | select-string -pattern $_.InputObject -notmatch
				$InfoMessage = $Info
				$Info | Out-File $CacheGroups -Force -ErrorAction SilentlyContinue
			}
		}
	}
	
	
	$Items = @()
	$Items += $checkedlistboxGroups.CheckedItems
	$Items += "Domain Users"
	Update-ComboBox -ComboBox $comboboxPrimaryGroup -Items $Items
	
	
}





$optionsToolStripMenuItem_Click = {
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
}

$textboxDescription_FocusChanged = {
	$ADDescription = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDescription -ErrorAction SilentlyContinue).ADDescription
	If ($ADDescription -eq 1)
	{
		$words = $textboxDescription.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDescription.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxoffice_FocusChanged = {
	$ADOffice = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADOffice -ErrorAction SilentlyContinue).ADOffice
	If ($ADOffice -eq 1)
	{
		$words = $textboxoffice.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxoffice.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSamAccount_FocusChanged = {
	$ADSamAccountName = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADSamAccountName -ErrorAction SilentlyContinue).ADSamAccountName
	If ($ADSamAccountName -eq 1)
	{
		$words = $textboxSamAccount.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxSamAccount.Text = $TextInfo.ToTitleCase($words)
	}
	
}



$textboxStreet_FocusChanged = {
	$ADStreet = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADStreet -ErrorAction SilentlyContinue).ADStreet
	If ($ADStreet -eq 1)
	{
		$words = $textboxstreet.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstreet.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxcity_FocusChanged = {
	$ADCity = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCity -ErrorAction SilentlyContinue).ADCity
	If ($ADCity -eq 1)
	{
		$words = $textboxcity.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxcity.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxstate_FocusChanged = {
	$ADState = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADState -ErrorAction SilentlyContinue).ADState
	If ($ADState -eq 1)
	{
		$words = $textboxstate.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxstate.Text = $TextInfo.ToTitleCase($words)
	}
	
	
}

$textboxjobtitle_FocusChanged = {
	$ADJobTitle = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADJobTitle -ErrorAction SilentlyContinue).ADJobTitle
	If ($ADJobTitle -eq 1)
	{
		$words = $textboxjobtitle.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxjobtitle.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxDepartment_FocusChanged = {
	$ADDepartment = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADDepartment -ErrorAction SilentlyContinue).ADDepartment
	If ($ADDepartment -eq 1)
	{
		$words = $textboxDepartment.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxDepartment.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxCompany_FocusChanged = {
	$ADCompany = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\AD' | Get-ItemProperty -Name ADCompany -ErrorAction SilentlyContinue).ADCompany
	If ($ADCompany -eq 1)
	{
		$words = $textboxCompany.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxCompany.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxSearchGroups_TextChanged = {
	
	$click = 1
	$Filter = $textboxSearchGroups.text
	$Results = $OriginalData | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxGroups -Items $Results
	
	Get-Content $CacheGroups -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxGroups.Items -contains $_)
		{
			$checkedlistboxGroups.SelectedItem = $_
			$index = $checkedlistboxGroups.SelectedIndex
			$checkedlistboxGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchGroups.Focus()
	
}


$textboxSearchO365SecurityGroups_TextChanged = {
	$click = 1
	
	
	$Filter = $textboxSearchO365SecurityGroups.text
	$Results = $OriginalDataSecurityGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxO365SecurityGroups -Items $Results
	
	Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxO365SecurityGroups.Items -contains $_)
		{
			$checkedlistboxO365SecurityGroups.SelectedItem = $_
			$index = $checkedlistboxO365SecurityGroups.SelectedIndex
			$checkedlistboxO365SecurityGroups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxSearchO365SecurityGroups.Focus()
	
}

$textboxO365MailGroups_TextChanged={
	
	$click = 1
	$Filter = $textboxO365MailGroups.text
	$Results = $OriginalDataMailGroups | Where-Object { $_ -like "*$filter*" }
	Update-ListBox -ListBox $checkedlistboxDISTROo365groups -Items $Results
	
	Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue | ForEach-Object {
		If ($checkedlistboxDISTROo365groups.Items -contains $_)
		{
			$checkedlistboxDISTROo365groups.SelectedItem = $_
			$index = $checkedlistboxDISTROo365groups.SelectedIndex
			$checkedlistboxDISTROo365groups.SetItemCheckState($index, 'Checked')
		}
	}
	
	$click = 0
	
	$textboxO365MailGroups.Focus()
	
	
	
	
}

$textboxO365street_FocusChanged={
	$O365Street = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365Street -ErrorAction SilentlyContinue).O365Street
	If ($O365Street -eq 1)
	{
		$words = $textboxO365street.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxO365street.Text = $TextInfo.ToTitleCase($words)
	}
	
}

$textboxo365city_FocusChanged={
	$O365City = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365City -ErrorAction SilentlyContinue).O365City
	If ($O365City -eq 1)
	{
		$words = $textboxo365city.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365city.Text = $TextInfo.ToTitleCase($words)
	}
}

$textboxo365state_FocusChanged={
	$O365State = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\TitleCase\O365' | Get-ItemProperty -Name O365State -ErrorAction SilentlyContinue).O365State
	If ($O365State -eq 1)
	{
		$words = $textboxo365state.Text
		$TextInfo = (Get-Culture).TextInfo
		$textboxo365state.Text = $TextInfo.ToTitleCase($words)
	}
	
}


$textboxemployeenumber_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
}

$textboxEmployeeID_TextChanged={
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
}

$textboxEmail_TextChanged={
	
	Update-DisplayNameTextbox
	Update-EmailTextbox
	Update-SamAccountNameTextbox
	Update-UserPrincipalNameTextbox
	
	
}

$copyActiveDirectoryUserToolStripMenuItem_Click={
	
	#Set value to 1 so we dont have string settings get in the way
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 1 -Force | Out-Null
	Show-CopyFromUser_psf
	$CopyUser = $CopyFromUser_comboboxcopyuser
	$Job = $PSJob
	$UserJob = ($Job | Where-Object { $_.Name -like $CopyUser })[0]
	$UserTemplate = Get-ADUser -identity ($UserJob).ObjectGuid -properties *
	Copy-ADUserAttributes
	#Set back to 0
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyUser -Value 0 -Force | Out-Null
	Get-Job | Remove-Job
	
}

$textboxSamAccount_TextChanged={
	Update-EmailTextbox
	Update-DisplayNameTextbox
	Update-UserPrincipalNameTextbox
}
$textboxSamAccount_FocusChanged = {
	#Update-EmailTextbox
	Update-DisplayNameTextbox
	#Update-UserPrincipalNameTextbox
}


$clearFormToolStripMenuItem_Click={
	Reset-Form
	
}


$exitToolStripMenuItem1_Click={
	$MainForm.close()
	
}

$copyToolStripMenuItem_Click={
	Show-OptionsMenu_psf
	$DarkMode = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name DarkMode -ErrorAction SilentlyContinue).DarkMode
	If ($DarkMode -eq 1)
	{
		Set-DarkMode
		
	}
	Else
	{
		Set-LightMode
		
	}
	
}

$checkedlistboxDISTROo365groups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxDISTROo365groups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheDistroGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheDistroGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedDistroGroups = Get-Content $CacheDistroGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxDISTROo365groups.Items | Where-Object { $checkedlistboxDISTROo365groups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedDistroGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedDistroGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheDistroGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkedlistboxO365SecurityGroups_SelectedIndexChanged = {
	$CopyO365User = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name CopyO365User -ErrorAction SilentlyContinue).CopyO365User
	If ($CopyO365User -ne 1)
	{
		If ($click -ne 1)
		{
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			$checkedlistboxO365SecurityGroups.CheckedItems | ForEach-Object{
				#If checked and not in file, add and append
				$CheckItem = Get-Content $CacheSecurityGroupsFile | Select-String $_
				If ($null -eq $CheckItem)
				{
					$_ | Out-File $CacheSecurityGroupsFile -Force -Append
				}
			}
			
			$CachedCheckedSecurityGroups = Get-Content $CacheSecurityGroupsFile -ErrorAction SilentlyContinue
			
			
			#Get all unchecked items
			$UncheckedItems = $checkedlistboxO365SecurityGroups.Items | Where-Object { $checkedlistboxO365SecurityGroups.CheckedItems -notcontains $_ }
			
			#Compare unchecked items to the list, if an unchecked item is present on the list we need to uncheck the item in the listbox
			Compare-Object -ReferenceObject $CachedCheckedSecurityGroups -DifferenceObject $UncheckedItems -IncludeEqual | ForEach-Object {
				# == means that the obj is unchecked but present on the file, we need to remove from file
				If ($_.SideIndicator -eq "==")
				{
					#Remove the item that is present on the list but unchecked from the file
					$Info = $CachedCheckedSecurityGroups | select-string -pattern $_.InputObject -notmatch
					$InfoMessage = $Info
					$Info | Out-File $CacheSecurityGroupsFile -Force -ErrorAction SilentlyContinue
				}
			}
		}
	}
	
}

$checkboxUserMustChangePasswo_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}

$checkboxUserCannotChangePass_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both 'User Must Change Password at Next Logon' and User 'Cannot Change Password' for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
		
	}
	
	
}

$checkboxPasswordNeverExpires_CheckedChanged={
	If (($checkboxUserCannotChangePass.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You cannot check both 'User Must Change Password at Next Logon' and 'User Cannot Change Password' for the same user."
		$InfoMessage = "You cannot check both User Must Change Password at Next Logon and User Cannot Change Password for the same user."
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxUserCannotChangePass.CheckState = 'Unchecked'
	}
	ElseIf (($checkboxPasswordNeverExpires.Checked -eq $true) -and ($checkboxUserMustChangePasswo.Checked -eq $true))
	{
		add-logs -text "WARN: You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoMessage = "You have selected 'Password never Expires'. and 'User must change password at next logon'. They will be unable to change their password"
		$InfoTitle = "Warning"
		Show-MessageBox_psf
		$checkboxPasswordNeverExpires.CheckState = 'Unchecked'
	}
	
}


$copyOffice365UserToolStripMenuItem_Click={
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 1 -Force | Out-Null
	Show-CopyFromO365User_psf
	Copy-O365UserAttributes
	Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name CopyO365User -Value 0 -Force | Out-Null
	
}

$MainForm_Closing=[System.Windows.Forms.FormClosingEventHandler]{
Get-PSSession | Remove-PSSession -ErrorAction SilentlyContinue
	
}



$comboboxO365Domains_SelectedIndexChanged={
	Update-O365EmailTextbox
}


$comboboxDomains_SelectedIndexChanged={
	Update-EmailTextbox
	
}

$radiobuttonHybrid_CheckedChanged={
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Hybrid -Force | Out-Null
		
		$groupboxHybrid.Enabled = $true
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $false
		$checkboxRunADSync.checked -eq $true
	}
	
	
}

$radiobuttonCloudOnly_CheckedChanged={
	If ($radiobuttonCloudOnly.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value "Cloud Only" -Force | Out-Null
		
		$groupboxHybrid.Enabled = $false
		$groupboxADGroups.Enabled = $false
		$groupboxNoAdSync.Enabled = $true
	}

	
}



$radiobuttonOther_CheckedChanged={
	If ($radiobuttonOther.Checked -eq $true)
	{
		#Get-Item 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' -Force | Set-ItemProperty -Name ExchangeSetup -Value Other -Force | Out-Null
		
		
		$groupboxHybrid.Enabled = $false
		$groupboxADGroups.Enabled = $true
		$groupboxNoAdSync.Enabled = $true
	}
	
}

$radiobuttonexchangeremote_CheckedChanged = {
	If ($radiobuttonexchangeremote.Checked -eq $true)
	{
		$textboxexchangeserverURL.Enabled = $true
	}
	Else
	{
		$textboxexchangeserverURL.Enabled = $false
	}
	
	
}

$buttonConnectToExchange_Click={
	If ($radiobuttonHybrid.Checked -eq $true)
	{
		If ($radiobuttonexchangeremote.Checked -eq $true)
		{
			try
			{
				Connect-Exchange -URL $textboxexchangeserverURL.Text
			}
			catch
			{
				add-logs -text "WARN: $_"
				$InfoMessage = $_
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			
		}
		Else
		{
			try
			{
				$CallEMS = ". '$env:ExchangeInstallPath\bin\RemoteExchange.ps1'; Connect-ExchangeServer -auto -ClientApplication:ManagementShell "
				Invoke-Expression $CallEMS
			}
			catch
			{
				add-logs -text "WARN: $_"
				$InfoMessage = $_
				$InfoTitle = "Warning"
				Show-MessageBox_psf
			}
			
		}
		$Check = Get-ExchangeServer
		If ($Check)
		{
			$labelExchangeNotConnected.Text = "Connected"
			$labelExchangeNotConnected.ForeColor = 'MediumSeaGreen'
		}
		
		
	}
	
}


$textboxEmail_FocusLeave = {
	
	$RemoteFWDINGDomain = (Get-ItemProperty 'HKCU:\Software\TheLazyAdministrator\MasterUserCreator\' | Get-ItemProperty -Name ExchangeRemoteDomain -ErrorAction SilentlyContinue).ExchangeRemoteDomain
	$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	
	If ($textboxHybridRemoteRouting.Text -ne $RemoteFWDINGDomain)
	{
		$textboxHybridRemoteRouting.Text = $RemoteFWDINGDomain
	}
	$EmailFirstHalf = ((($textboxEmail.Text).Split("@") | Select-Object -First 1))
	$ExistingValue = $textboxHybridRemoteRouting.Text
	$textboxHybridRemoteRouting.Text = "$EmailFirstHalf$ExistingValue"
	
}



$button1_Click={

		#TODO: Place custom script here
		$tabpageGeneral.Enabled = $true
		$tabpage1.Enabled = $true
		$tabcontrolUserProperties.Enabled = $true

}
]]></Code>
  <Mode>1</Mode>
  <Assemblies />
</File>